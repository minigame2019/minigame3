Shader "Hidden/Post FX/Lut Generator" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 24723
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "TONEMAPPING_NEUTRAL" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "TONEMAPPING_NEUTRAL" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "TONEMAPPING_FILMIC" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "TONEMAPPING_FILMIC" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 _Balance;
					//   float3 _ChannelMixerBlue;
					//   float3 _ChannelMixerGreen;
					//   float3 _ChannelMixerRed;
					//   float _Contrast;
					//   sampler2D _Curves;
					//   float3 _Gain;
					//   float _HueShift;
					//   float3 _InvGamma;
					//   float3 _Lift;
					//   float4 _LutParams;
					//   float3 _Offset;
					//   float3 _Power;
					//   float _Saturation;
					//   float3 _Slope;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _Balance           c0       1
					//   _Lift              c1       1
					//   _InvGamma          c2       1
					//   _Gain              c3       1
					//   _Offset            c4       1
					//   _Power             c5       1
					//   _Slope             c6       1
					//   _HueShift          c7       1
					//   _Saturation        c8       1
					//   _Contrast          c9       1
					//   _ChannelMixerRed   c10      1
					//   _ChannelMixerGreen c11      1
					//   _ChannelMixerBlue  c12      1
					//   _LutParams         c13      1
					//   _Curves            s0       1
					//
					
					    ps_3_0
					    def c14, -0.386036009, 13.6054821, -0.0479959995, 0.179999992
					    def c15, 0.5, 1.525878e-005, 9.72000027, 0.0570776239
					    def c16, 0.212599993, 0.715200007, 0.0722000003, -1.52587891e-005
					    def c17, 6, 9.99999975e-005, 0.25, -0.413588405
					    def c18, 0.413588405, 0.71495831, 17.5200005, -9.72000027
					    def c19, 1, 0, -0.333333343, 9.99999975e-005
					    def c20, 0.0897922963, 0.813422978, 0.0967615992, 65504
					    def c21, 1, 0, -1, 0.666666687
					    def c22, 1, 0.666666687, 0.333333343, 0
					    def c23, -1.05440795, 0.71495831, 6, -3
					    def c24, 1.45143926, -0.236510754, -0.214928567, 0.00390625
					    def c25, -0.0765537769, 1.17622972, -0.0996759236, 0.75
					    def c26, 0.0175439995, 0.111543998, 0.870703995, -3.05175708e-005
					    def c27, 0.439700991, 0.382977992, 0.177334994, 0
					    def c28, 0.00831614807, -0.00603244966, 0.997716308, 0
					    def c29, 0.390404999, 0.549941003, 0.00892631989, 0
					    def c30, 0.070841603, 0.963172019, 0.00135775004, 0
					    def c31, 0.0231081992, 0.128021002, 0.936245024, 0
					    def c32, 2.85846996, -1.62879002, -0.0248910002, 0
					    def c33, -0.210181996, 1.15820003, 0.000324280991, 0
					    def c34, -0.0418119989, -0.118169002, 1.06867003, 0
					    def c35, 1.70504999, -0.621789992, -0.0832599998, 0
					    def c36, -0.130260006, 1.1408, -0.0105499998, 0
					    def c37, -0.0240000002, -0.128969997, 1.15296996, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c13.x
					    add_pp r1.yz, -c13, v0.xxyw
					    mul_pp r0.y, r1.y, c13.x
					    frc_pp r1.x, r0.y
					    mad_pp r1.w, r1.x, -r0.x, r1.y
					    mov r0.x, c14.x
					    mad_pp r0.xyz, r1.xzww, c13.w, r0.x
					    mul_pp r0.xyz, r0, c14.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    add_pp r0.xyz, r1, c14.z
					    mul_pp r0.xyz, r0, c14.w
					    dp3_pp r1.x, c27, r0
					    dp3_pp r1.y, c20, r0
					    dp3_pp r1.z, c26, r0
					    max_pp r0.xyz, r1, c27.w
					    min_pp r1.xyz, r0, c20.w
					    log_pp r0.x, r1.x
					    log_pp r0.yz, r1.y
					    log_pp r0.w, r1.z
					    add_pp r0, r0, c15.z
					    mul_pp r0, r0, c15.w
					    mad_pp r2.xyz, r1, c15.x, c15.y
					    add r1, r1.xyyz, c26.w
					    log_pp r3.x, r2.x
					    log_pp r3.yz, r2.y
					    log_pp r3.w, r2.z
					    add_pp r2, r3, c15.z
					    mul_pp r2, r2, c15.w
					    cmp_pp r0, r1, r0, r2
					    mov r1.xyz, c6
					    mad_pp r0, r0, r1.xyyz, c4.xyyz
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.z
					    log_pp r1.z, r0.w
					    mul_pp r1.xyz, r1, c5
					    exp_pp r2.x, r1.x
					    exp_pp r2.yz, r1.y
					    exp_pp r2.w, r1.z
					    cmp_pp r0, -r0.xzzw, r0, r2
					    add r1.x, -r0.w, r0.z
					    mad_pp r2, r0.zwzz, c19.xxyy, c19.yyyz
					    mad_pp r3, r2.yxyy, c21.xxyy, c21.yyzw
					    cmp_pp r1, r1.x, r2.wyzx, r3.wyzx
					    add r2.x, r0.x, -r1.w
					    mov_pp r3.z, r1.x
					    mov_pp r1.x, r0.x
					    mov_pp r3.xyw, r1.wyzx
					    cmp_pp r1, r2.x, r1, r3
					    min_pp r2.x, r1.y, r1.w
					    add_pp r2.x, r1.x, -r2.x
					    mad_pp r2.y, r2.x, c17.x, c17.y
					    rcp r2.y, r2.y
					    add r1.y, -r1.y, r1.w
					    mad_pp r1.y, r1.y, r2.y, r1.z
					    add_pp r1.x, r1.x, c19.w
					    rcp r1.x, r1.x
					    mul_pp r2.z, r1.x, r2.x
					    abs_pp r2.x, r1.y
					    mov_pp r2.yw, c17.z
					    texld r1, r2, s0
					    texld r2, r2.zwzw, s0
					    mov_sat r1.x, r2.z
					    mov_sat r1.y, r1.y
					    add_pp r1.xy, r1, r1
					    mul_pp r1.x, r1.x, r1.y
					    dp3_pp r2.x, r0.xzww, c16
					    mov_pp r2.yw, c17.z
					    texld r3, r2, s0
					    mov_sat r1.y, r3.w
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r1.x, r1.x, c8.x
					    lrp_pp r3, r1.x, r0, r2.x
					    add_pp r0, r3, c17.w
					    mov r1.xy, c23
					    mad r1.z, r0.w, c9.x, r1.x
					    mov r2.xy, c18
					    mad r3, r0.xzwx, c9.x, r2.xxxy
					    mad r0, r0, c9.x, r1.xyxy
					    mad_pp r1.xyw, r3.xyzz, c18.z, c18.w
					    exp_pp r1.w, r1.w
					    cmp_pp r1.z, r1.z, c20.w, r1.w
					    add_pp r1.w, r1.w, c16.w
					    add_pp r1.w, r1.w, r1.w
					    cmp_pp r3.z, r0.w, r1.z, r1.w
					    exp_pp r0.w, r1.x
					    exp_pp r1.x, r1.y
					    add_pp r1.y, r0.w, c16.w
					    cmp_pp r0.x, r0.x, c20.w, r0.w
					    add_pp r0.w, r1.y, r1.y
					    cmp_pp r3.x, r3.w, r0.x, r0.w
					    add_pp r0.x, r1.x, c16.w
					    cmp_pp r0.z, r0.z, c20.w, r1.x
					    add_pp r0.x, r0.x, r0.x
					    cmp_pp r3.y, r0.y, r0.z, r0.x
					    dp3_pp r0.x, c24, r3
					    dp3_pp r0.y, c25, r3
					    dp3_pp r0.z, c28, r3
					    dp3_pp r1.x, c29, r0
					    dp3_pp r1.y, c30, r0
					    dp3_pp r1.z, c31, r0
					    mul_pp r0.xyz, r1, c0
					    dp3_pp r1.x, c32, r0
					    dp3_pp r1.y, c33, r0
					    dp3_pp r1.z, c34, r0
					    mov r0.x, c19.x
					    add_pp r0.xyz, r0.x, -c1
					    mul_pp r0.xyz, r0, c3
					    mov r3.xyz, c1
					    mul_pp r3.xyz, r3, c3
					    mad_pp r0.xyz, r1, r0, r3
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r1.xyz, r1, c2
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    cmp_pp r0.xyz, -r0, r0, r3
					    add r1.x, -r0.z, r0.y
					    mad_pp r3, r0.yzyy, c19.xxyy, c19.yyyz
					    mad_pp r4, r3.yxyy, c21.xxyy, c21.yyzw
					    cmp_pp r1, r1.x, r3.xywz, r4.xywz
					    add r2.x, r0.x, -r1.x
					    mov_pp r0.yzw, r1.xywx
					    mov_pp r1.xyw, r0.wyzx
					    cmp_pp r0, r2.x, r0, r1
					    min_pp r1.x, r0.y, r0.w
					    add_pp r1.x, r0.x, -r1.x
					    mad_pp r1.y, r1.x, c17.x, c17.y
					    rcp r1.y, r1.y
					    add r0.y, -r0.y, r0.w
					    mad_pp r0.y, r0.y, r1.y, r0.z
					    add_pp r2.z, r0_abs.y, c7.x
					    texld r3, r2.zwzw, s0
					    mov_sat r3.x, r3.x
					    add_pp r0.y, r3.x, -c15.x
					    add_pp r0.y, r0.y, r2.z
					    add r0.z, -r0.y, c19.x
					    add_pp r1.yz, r0.y, c21.xxzw
					    cmp_pp r0.z, r0.z, r0.y, r1.z
					    cmp_pp r0.y, r0.y, r0.z, r1.y
					    add_pp r0.yzw, r0.y, c22.xxyz
					    frc_pp r0.yzw, r0
					    mad_pp r0.yzw, r0, c23.z, c23.w
					    add_sat_pp r0.yzw, r0_abs, -c19.x
					    add_pp r1.y, r0.x, c19.w
					    rcp r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    lrp_pp r2.xyz, r1.x, r0.yzww, c19.x
					    mul_pp r0.xyz, r0.x, r2
					    dp3_pp r1.x, r0, c10
					    dp3_pp r1.y, r0, c11
					    dp3_pp r1.z, r0, c12
					    dp3_pp r0.x, c35, r1
					    dp3_pp r0.y, c36, r1
					    dp3_pp r0.z, c37, r1
					    add_pp r0.xyz, r0, c24.w
					    mov r0.w, c25.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp r1.x, r1.w
					    texld_pp r2, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp r1.z, r0.w
					    mov_sat_pp r1.y, r2.w
					    add_pp r0.xyz, r1, c24.w
					    mov r0.w, c25.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp oC0.x, r1.x
					    texld_pp r1, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp oC0.z, r0.z
					    mov_sat_pp oC0.y, r1.y
					    mov_pp oC0.w, c19.x
					
					// approximately 176 instruction slots used (10 texture, 166 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 4
					add r0.yz, v1.xxyx, -cb0[17].yyzy
					mul r1.x, r0.y, cb0[17].x
					frc r0.x, r1.x
					div r1.x, r0.x, cb0[17].x
					add r0.w, r0.y, -r1.x
					mad r0.xyz, r0.xzwx, cb0[17].wwww, l(-0.386036, -0.386036, -0.386036, 0.000000)
					mul r0.xyz, r0.xyzx, l(13.605482, 13.605482, 13.605482, 0.000000)
					exp r0.xyz, r0.xyzx
					add r0.xyz, r0.xyzx, l(-0.047996, -0.047996, -0.047996, 0.000000)
					mul r0.xyz, r0.xyzx, l(0.180000, 0.180000, 0.180000, 0.000000)
					dp3 r1.x, l(0.439701, 0.382978, 0.177335, 0.000000), r0.xyzx
					dp3 r1.y, l(0.089792, 0.813423, 0.096762, 0.000000), r0.xyzx
					dp3 r1.z, l(0.017544, 0.111544, 0.870704, 0.000000), r0.xyzx
					max r0.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
					min r0.xyz, r0.xyzx, l(65504.000000, 65504.000000, 65504.000000, 0.000000)
					mad r1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.000015, 0.000015, 0.000015, 0.000000)
					log r1.xyz, r1.xyzx
					add r1.xyz, r1.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r1.xyz, r1.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					log r2.xyz, r0.xyzx
					lt r0.xyz, r0.xyzx, l(0.000031, 0.000031, 0.000031, 0.000000)
					add r2.xyz, r2.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r2.xyz, r2.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					movc r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
					mad r0.xyz, r0.xyzx, cb0[10].xyzx, cb0[8].xyzx
					log r1.xyz, r0.xyzx
					mul r1.xyz, r1.xyzx, cb0[9].xyzx
					exp r1.xyz, r1.xyzx
					lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
					ge r0.w, r0.y, r0.z
					and r0.w, r0.w, l(0x3f800000)
					mov r1.xy, r0.zyzz
					add r2.xy, r0.yzyy, -r1.xyxx
					mov r1.zw, l(0,0,-1.000000,0.666667)
					mov r2.zw, l(0,0,1.000000,-1.000000)
					mad r1.xyzw, r0.wwww, r2.xywz, r1.xywz
					ge r0.w, r0.x, r1.x
					and r0.w, r0.w, l(0x3f800000)
					mov r2.z, r1.w
					mov r1.w, r0.x
					mov r2.xyw, r1.wywx
					add r2.xyzw, -r1.xyzw, r2.xyzw
					mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
					min r0.w, r1.y, r1.w
					add r0.w, -r0.w, r1.x
					mad r2.x, r0.w, l(6.000000), l(0.000100)
					add r1.y, -r1.y, r1.w
					div r1.y, r1.y, r2.x
					add r1.y, r1.y, r1.z
					add r1.x, r1.x, l(0.000100)
					div r2.z, r0.w, r1.x
					mov r2.x, |r1.y|
					mov r2.yw, l(0,0.250000,0,0.250000)
					sample r1.xyzw, r2.xyxx, t0.yxzw, s0
					sample r2.xyzw, r2.zwzz, t0.zxyw, s0
					mov_sat r2.x, r2.x
					add r0.w, r2.x, r2.x
					mov_sat r1.x, r1.x
					add r1.x, r1.x, r1.x
					mul r0.w, r0.w, r1.x
					dp3 r1.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
					add r0.xyz, r0.xyzx, -r1.xxxx
					mov r1.yw, l(0,0.250000,0,0.250000)
					sample r2.xyzw, r1.xyxx, t0.wxyz, s0
					mov_sat r2.x, r2.x
					add r1.y, r2.x, r2.x
					mul r0.w, r0.w, r1.y
					mul r0.w, r0.w, cb0[11].x
					mad r0.xyz, r0.wwww, r0.xyzx, r1.xxxx
					add r0.xyz, r0.xyzx, l(-0.413588, -0.413588, -0.413588, 0.000000)
					mad r0.xyz, r0.xyzx, cb0[11].yyyy, l(0.413588, 0.413588, 0.413588, 0.000000)
					lt r2.xyzw, r0.xxyy, l(-0.301370, 1.467996, -0.301370, 1.467996)
					mad r0.xyw, r0.xyxz, l(17.520000, 17.520000, 0.000000, 17.520000), l(-9.720000, -9.720000, 0.000000, -9.720000)
					lt r1.xy, r0.zzzz, l(-0.301370, 1.467996, 0.000000, 0.000000)
					exp r0.xyz, r0.xywx
					movc r2.yw, r2.yyyw, r0.xxxy, l(0,65504.000000,0,65504.000000)
					add r0.xyw, r0.xyxz, l(-0.000015, -0.000015, 0.000000, -0.000015)
					movc r0.z, r1.y, r0.z, l(65504.000000)
					add r0.xyw, r0.xyxw, r0.xyxw
					movc r2.xy, r2.xzxx, r0.xyxx, r2.ywyy
					movc r2.z, r1.x, r0.w, r0.z
					dp3 r0.x, l(1.451439, -0.236511, -0.214929, 0.000000), r2.xyzx
					dp3 r0.y, l(-0.076554, 1.176230, -0.099676, 0.000000), r2.xyzx
					dp3 r0.z, l(0.008316, -0.006032, 0.997716, 0.000000), r2.xyzx
					dp3 r2.x, l(0.390405, 0.549941, 0.008926, 0.000000), r0.xyzx
					dp3 r2.y, l(0.070842, 0.963172, 0.001358, 0.000000), r0.xyzx
					dp3 r2.z, l(0.023108, 0.128021, 0.936245, 0.000000), r0.xyzx
					mul r0.xyz, r2.xyzx, cb0[4].xyzx
					dp3 r2.x, l(2.858470, -1.628790, -0.024891, 0.000000), r0.xyzx
					dp3 r2.y, l(-0.210182, 1.158200, 0.000324, 0.000000), r0.xyzx
					dp3 r2.z, l(-0.041812, -0.118169, 1.068670, 0.000000), r0.xyzx
					add r0.xyz, -cb0[5].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mul r0.xyz, r0.xyzx, cb0[7].xyzx
					mul r3.xyz, cb0[5].xyzx, cb0[7].xyzx
					mad r0.xyz, r2.xyzx, r0.xyzx, r3.xyzx
					log r2.xyz, r0.xyzx
					mul r2.xyz, r2.xyzx, cb0[6].xyzx
					exp r2.xyz, r2.xyzx
					lt r3.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyw, r3.yzyx, r2.yzyx, r0.yzyx
					ge r1.x, r0.x, r0.y
					and r1.x, r1.x, l(0x3f800000)
					mov r2.xy, r0.yxyy
					add r3.xy, r0.xyxx, -r2.xyxx
					mov r2.zw, l(0,0,-1.000000,0.666667)
					mov r3.zw, l(0,0,1.000000,-1.000000)
					mad r2.xyzw, r1.xxxx, r3.xyzw, r2.xyzw
					ge r1.x, r0.w, r2.x
					and r1.x, r1.x, l(0x3f800000)
					mov r0.xyz, r2.xywx
					mov r2.xyw, r0.wywx
					add r2.xyzw, -r0.xyzw, r2.xyzw
					mad r0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
					min r1.x, r0.y, r0.w
					add r1.x, r0.x, -r1.x
					mad r1.y, r1.x, l(6.000000), l(0.000100)
					add r0.y, -r0.y, r0.w
					div r0.y, r0.y, r1.y
					add r0.y, r0.y, r0.z
					add r1.z, |r0.y|, cb0[10].w
					sample r2.xyzw, r1.zwzz, t0.xyzw, s0
					mov_sat r2.x, r2.x
					add r0.y, r2.x, l(-0.500000)
					add r0.y, r0.y, r1.z
					lt r0.z, l(1.000000), r0.y
					add r1.yz, r0.yyyy, l(0.000000, 1.000000, -1.000000, 0.000000)
					movc r0.z, r0.z, r1.z, r0.y
					lt r0.y, r0.y, l(0.000000)
					movc r0.y, r0.y, r1.y, r0.z
					add r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)
					frc r0.yzw, r0.yyzw
					mad r0.yzw, r0.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)
					add_sat r0.yzw, |r0.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r0.yzw, r0.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r1.y, r0.x, l(0.000100)
					div r1.x, r1.x, r1.y
					mad r0.yzw, r1.xxxx, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
					mul r0.xyz, r0.yzwy, r0.xxxx
					dp3 r1.x, r0.xyzx, cb0[12].xyzx
					dp3 r1.y, r0.xyzx, cb0[13].xyzx
					dp3 r1.z, r0.xyzx, cb0[14].xyzx
					dp3 r0.x, l(1.705050, -0.621790, -0.083260, 0.000000), r1.xyzx
					dp3 r0.y, l(-0.130260, 1.140800, -0.010550, 0.000000), r1.xyzx
					dp3 r0.z, l(-0.024000, -0.128970, 1.152970, 0.000000), r1.xyzx
					add r0.xyz, r0.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.wxyz, s0
					mov_sat r1.x, r1.x
					sample r2.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat r1.z, r0.w
					mov_sat r1.y, r2.w
					add r0.xyz, r1.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.xyzw, s0
					mov_sat o0.x, r1.x
					sample r1.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat o0.z, r0.z
					mov_sat o0.y, r1.y
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "TONEMAPPING_NEUTRAL" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 _Balance;
					//   float3 _ChannelMixerBlue;
					//   float3 _ChannelMixerGreen;
					//   float3 _ChannelMixerRed;
					//   float _Contrast;
					//   sampler2D _Curves;
					//   float3 _Gain;
					//   float _HueShift;
					//   float3 _InvGamma;
					//   float3 _Lift;
					//   float4 _LutParams;
					//   float4 _NeutralTonemapperParams1;
					//   float4 _NeutralTonemapperParams2;
					//   float3 _Offset;
					//   float3 _Power;
					//   float _Saturation;
					//   float3 _Slope;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _Balance                  c0       1
					//   _Lift                     c1       1
					//   _InvGamma                 c2       1
					//   _Gain                     c3       1
					//   _Offset                   c4       1
					//   _Power                    c5       1
					//   _Slope                    c6       1
					//   _HueShift                 c7       1
					//   _Saturation               c8       1
					//   _Contrast                 c9       1
					//   _ChannelMixerRed          c10      1
					//   _ChannelMixerGreen        c11      1
					//   _ChannelMixerBlue         c12      1
					//   _NeutralTonemapperParams1 c13      1
					//   _NeutralTonemapperParams2 c14      1
					//   _LutParams                c15      1
					//   _Curves                   s0       1
					//
					
					    ps_3_0
					    def c16, -0.386036009, 13.6054821, -0.0479959995, 0.179999992
					    def c17, 0.5, 1.525878e-005, 9.72000027, 0.0570776239
					    def c18, 0.212599993, 0.715200007, 0.0722000003, -1.52587891e-005
					    def c19, 6, 9.99999975e-005, 0.25, -0.413588405
					    def c20, 0.413588405, 0.71495831, 17.5200005, -9.72000027
					    def c21, 0.0897922963, 0.813422978, 0.0967615992, 65504
					    def c22, 1, 0, -1, 0.666666687
					    def c23, 1, 0.666666687, 0.333333343, 0
					    def c24, -1.05440795, 0.71495831, 6, -3
					    def c25, 1.45143926, -0.236510754, -0.214928567, 0.00390625
					    def c26, -0.0765537769, 1.17622972, -0.0996759236, 0.75
					    def c27, 0.439700991, 0.382977992, 0.177334994, 0
					    def c28, 1, 0, -0.333333343, 9.99999975e-005
					    def c29, 0.0175439995, 0.111543998, 0.870703995, -3.05175708e-005
					    def c30, 0.00831614807, -0.00603244966, 0.997716308, 0
					    def c31, 0.390404999, 0.549941003, 0.00892631989, 0
					    def c32, 0.070841603, 0.963172019, 0.00135775004, 0
					    def c33, 0.0231081992, 0.128021002, 0.936245024, 0
					    def c34, 2.85846996, -1.62879002, -0.0248910002, 0
					    def c35, -0.210181996, 1.15820003, 0.000324280991, 0
					    def c36, -0.0418119989, -0.118169002, 1.06867003, 0
					    def c37, 1.70504999, -0.621789992, -0.0832599998, 0
					    def c38, -0.130260006, 1.1408, -0.0105499998, 0
					    def c39, -0.0240000002, -0.128969997, 1.15296996, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c15.x
					    add_pp r1.yz, -c15, v0.xxyw
					    mul_pp r0.y, r1.y, c15.x
					    frc_pp r1.x, r0.y
					    mad_pp r1.w, r1.x, -r0.x, r1.y
					    mov r0.x, c16.x
					    mad_pp r0.xyz, r1.xzww, c15.w, r0.x
					    mul_pp r0.xyz, r0, c16.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    add_pp r0.xyz, r1, c16.z
					    mul_pp r0.xyz, r0, c16.w
					    dp3_pp r1.x, c27, r0
					    dp3_pp r1.y, c21, r0
					    dp3_pp r1.z, c29, r0
					    max_pp r0.xyz, r1, c27.w
					    min_pp r1.xyz, r0, c21.w
					    log_pp r0.x, r1.x
					    log_pp r0.yz, r1.y
					    log_pp r0.w, r1.z
					    add_pp r0, r0, c17.z
					    mul_pp r0, r0, c17.w
					    mad_pp r2.xyz, r1, c17.x, c17.y
					    add r1, r1.xyyz, c29.w
					    log_pp r3.x, r2.x
					    log_pp r3.yz, r2.y
					    log_pp r3.w, r2.z
					    add_pp r2, r3, c17.z
					    mul_pp r2, r2, c17.w
					    cmp_pp r0, r1, r0, r2
					    mov r1.xyz, c6
					    mad_pp r0, r0, r1.xyyz, c4.xyyz
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.z
					    log_pp r1.z, r0.w
					    mul_pp r1.xyz, r1, c5
					    exp_pp r2.x, r1.x
					    exp_pp r2.yz, r1.y
					    exp_pp r2.w, r1.z
					    cmp_pp r0, -r0.xzzw, r0, r2
					    add r1.x, -r0.w, r0.z
					    mad_pp r2, r0.zwzz, c28.xxyy, c28.yyyz
					    mad_pp r3, r2.yxyy, c22.xxyy, c22.yyzw
					    cmp_pp r1, r1.x, r2.wyzx, r3.wyzx
					    add r2.x, r0.x, -r1.w
					    mov_pp r3.z, r1.x
					    mov_pp r1.x, r0.x
					    mov_pp r3.xyw, r1.wyzx
					    cmp_pp r1, r2.x, r1, r3
					    min_pp r2.x, r1.y, r1.w
					    add_pp r2.x, r1.x, -r2.x
					    mad_pp r2.y, r2.x, c19.x, c19.y
					    rcp r2.y, r2.y
					    add r1.y, -r1.y, r1.w
					    mad_pp r1.y, r1.y, r2.y, r1.z
					    add_pp r1.x, r1.x, c28.w
					    rcp r1.x, r1.x
					    mul_pp r2.z, r1.x, r2.x
					    abs_pp r2.x, r1.y
					    mov_pp r2.yw, c19.z
					    texld r1, r2, s0
					    texld r2, r2.zwzw, s0
					    mov_sat r1.x, r2.z
					    mov_sat r1.y, r1.y
					    add_pp r1.xy, r1, r1
					    mul_pp r1.x, r1.x, r1.y
					    dp3_pp r2.x, r0.xzww, c18
					    mov_pp r2.yw, c19.z
					    texld r3, r2, s0
					    mov_sat r1.y, r3.w
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r1.x, r1.x, c8.x
					    lrp_pp r3, r1.x, r0, r2.x
					    add_pp r0, r3, c19.w
					    mov r1.xy, c24
					    mad r1.z, r0.w, c9.x, r1.x
					    mov r2.xy, c20
					    mad r3, r0.xzwx, c9.x, r2.xxxy
					    mad r0, r0, c9.x, r1.xyxy
					    mad_pp r1.xyw, r3.xyzz, c20.z, c20.w
					    exp_pp r1.w, r1.w
					    cmp_pp r1.z, r1.z, c21.w, r1.w
					    add_pp r1.w, r1.w, c18.w
					    add_pp r1.w, r1.w, r1.w
					    cmp_pp r3.z, r0.w, r1.z, r1.w
					    exp_pp r0.w, r1.x
					    exp_pp r1.x, r1.y
					    add_pp r1.y, r0.w, c18.w
					    cmp_pp r0.x, r0.x, c21.w, r0.w
					    add_pp r0.w, r1.y, r1.y
					    cmp_pp r3.x, r3.w, r0.x, r0.w
					    add_pp r0.x, r1.x, c18.w
					    cmp_pp r0.z, r0.z, c21.w, r1.x
					    add_pp r0.x, r0.x, r0.x
					    cmp_pp r3.y, r0.y, r0.z, r0.x
					    dp3_pp r0.x, c25, r3
					    dp3_pp r0.y, c26, r3
					    dp3_pp r0.z, c30, r3
					    dp3_pp r1.x, c31, r0
					    dp3_pp r1.y, c32, r0
					    dp3_pp r1.z, c33, r0
					    mul_pp r0.xyz, r1, c0
					    dp3_pp r1.x, c34, r0
					    dp3_pp r1.y, c35, r0
					    dp3_pp r1.z, c36, r0
					    mov r0.x, c28.x
					    add_pp r0.xyz, r0.x, -c1
					    mul_pp r0.xyz, r0, c3
					    mov r3.xyz, c1
					    mul_pp r3.xyz, r3, c3
					    mad_pp r0.xyz, r1, r0, r3
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r1.xyz, r1, c2
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    cmp_pp r0.xyz, -r0, r0, r3
					    add r1.x, -r0.z, r0.y
					    mad_pp r3, r0.yzyy, c28.xxyy, c28.yyyz
					    mad_pp r4, r3.yxyy, c22.xxyy, c22.yyzw
					    cmp_pp r1, r1.x, r3.xywz, r4.xywz
					    add r2.x, r0.x, -r1.x
					    mov_pp r0.yzw, r1.xywx
					    mov_pp r1.xyw, r0.wyzx
					    cmp_pp r0, r2.x, r0, r1
					    min_pp r1.x, r0.y, r0.w
					    add_pp r1.x, r0.x, -r1.x
					    mad_pp r1.y, r1.x, c19.x, c19.y
					    rcp r1.y, r1.y
					    add r0.y, -r0.y, r0.w
					    mad_pp r0.y, r0.y, r1.y, r0.z
					    add_pp r2.z, r0_abs.y, c7.x
					    texld r3, r2.zwzw, s0
					    mov_sat r3.x, r3.x
					    add_pp r0.y, r3.x, -c17.x
					    add_pp r0.y, r0.y, r2.z
					    add r0.z, -r0.y, c28.x
					    add_pp r1.yz, r0.y, c22.xxzw
					    cmp_pp r0.z, r0.z, r0.y, r1.z
					    cmp_pp r0.y, r0.y, r0.z, r1.y
					    add_pp r0.yzw, r0.y, c23.xxyz
					    frc_pp r0.yzw, r0
					    mad_pp r0.yzw, r0, c24.z, c24.w
					    add_sat_pp r0.yzw, r0_abs, -c28.x
					    add_pp r1.y, r0.x, c28.w
					    rcp r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    lrp_pp r2.xyz, r1.x, r0.yzww, c28.x
					    mul_pp r0.xyz, r0.x, r2
					    dp3_pp r1.x, r0, c10
					    dp3_pp r1.y, r0, c11
					    dp3_pp r1.z, r0, c12
					    dp3_pp r0.x, c37, r1
					    dp3_pp r0.y, c38, r1
					    dp3_pp r0.z, c39, r1
					    max_pp r1.xyz, r0, c27.w
					    rcp r0.x, c14.y
					    mul_pp r0.x, r0.x, c14.x
					    mov r2.xyw, c13
					    mad_pp r0.y, r2.x, c14.z, r2.y
					    mul_pp r0.zw, r2.w, c14.xyxy
					    mad_pp r0.y, c14.z, r0.y, r0.w
					    rcp r0.y, r0.y
					    mul_pp r1.w, c13.y, c13.z
					    mad_pp r2.x, r2.x, c14.z, r1.w
					    mad_pp r2.x, c14.z, r2.x, r0.z
					    mad_pp r0.y, r2.x, r0.y, -r0.x
					    rcp_pp r0.y, r0.y
					    mul_pp r1.xyz, r0.y, r1
					    mad_pp r2.xyz, c13.x, r1, r1.w
					    mad_pp r2.xyz, r1, r2, r0.z
					    mad_pp r3.xyz, c13.x, r1, c13.y
					    mad_pp r1.xyz, r1, r3, r0.w
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    mad_pp r0.xzw, r2.xyyz, r3.xyyz, -r0.x
					    mul_pp r0.xyz, r0.y, r0.xzww
					    rcp r0.w, c14.w
					    mad_pp r0.xyz, r0, r0.w, c25.w
					    mov r0.w, c26.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp r1.x, r1.w
					    texld_pp r2, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp r1.z, r0.w
					    mov_sat_pp r1.y, r2.w
					    add_pp r0.xyz, r1, c25.w
					    mov r0.w, c26.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp oC0.x, r1.x
					    texld_pp r1, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp oC0.z, r0.z
					    mov_sat_pp oC0.y, r1.y
					    mov_pp oC0.w, c28.x
					
					// approximately 200 instruction slots used (10 texture, 190 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "TONEMAPPING_NEUTRAL" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 4
					add r0.yz, v1.xxyx, -cb0[17].yyzy
					mul r1.x, r0.y, cb0[17].x
					frc r0.x, r1.x
					div r1.x, r0.x, cb0[17].x
					add r0.w, r0.y, -r1.x
					mad r0.xyz, r0.xzwx, cb0[17].wwww, l(-0.386036, -0.386036, -0.386036, 0.000000)
					mul r0.xyz, r0.xyzx, l(13.605482, 13.605482, 13.605482, 0.000000)
					exp r0.xyz, r0.xyzx
					add r0.xyz, r0.xyzx, l(-0.047996, -0.047996, -0.047996, 0.000000)
					mul r0.xyz, r0.xyzx, l(0.180000, 0.180000, 0.180000, 0.000000)
					dp3 r1.x, l(0.439701, 0.382978, 0.177335, 0.000000), r0.xyzx
					dp3 r1.y, l(0.089792, 0.813423, 0.096762, 0.000000), r0.xyzx
					dp3 r1.z, l(0.017544, 0.111544, 0.870704, 0.000000), r0.xyzx
					max r0.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
					min r0.xyz, r0.xyzx, l(65504.000000, 65504.000000, 65504.000000, 0.000000)
					mad r1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.000015, 0.000015, 0.000015, 0.000000)
					log r1.xyz, r1.xyzx
					add r1.xyz, r1.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r1.xyz, r1.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					log r2.xyz, r0.xyzx
					lt r0.xyz, r0.xyzx, l(0.000031, 0.000031, 0.000031, 0.000000)
					add r2.xyz, r2.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r2.xyz, r2.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					movc r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
					mad r0.xyz, r0.xyzx, cb0[10].xyzx, cb0[8].xyzx
					log r1.xyz, r0.xyzx
					mul r1.xyz, r1.xyzx, cb0[9].xyzx
					exp r1.xyz, r1.xyzx
					lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
					ge r0.w, r0.y, r0.z
					and r0.w, r0.w, l(0x3f800000)
					mov r1.xy, r0.zyzz
					add r2.xy, r0.yzyy, -r1.xyxx
					mov r1.zw, l(0,0,-1.000000,0.666667)
					mov r2.zw, l(0,0,1.000000,-1.000000)
					mad r1.xyzw, r0.wwww, r2.xywz, r1.xywz
					ge r0.w, r0.x, r1.x
					and r0.w, r0.w, l(0x3f800000)
					mov r2.z, r1.w
					mov r1.w, r0.x
					mov r2.xyw, r1.wywx
					add r2.xyzw, -r1.xyzw, r2.xyzw
					mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
					min r0.w, r1.y, r1.w
					add r0.w, -r0.w, r1.x
					mad r2.x, r0.w, l(6.000000), l(0.000100)
					add r1.y, -r1.y, r1.w
					div r1.y, r1.y, r2.x
					add r1.y, r1.y, r1.z
					add r1.x, r1.x, l(0.000100)
					div r2.z, r0.w, r1.x
					mov r2.x, |r1.y|
					mov r2.yw, l(0,0.250000,0,0.250000)
					sample r1.xyzw, r2.xyxx, t0.yxzw, s0
					sample r2.xyzw, r2.zwzz, t0.zxyw, s0
					mov_sat r2.x, r2.x
					add r0.w, r2.x, r2.x
					mov_sat r1.x, r1.x
					add r1.x, r1.x, r1.x
					mul r0.w, r0.w, r1.x
					dp3 r1.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
					add r0.xyz, r0.xyzx, -r1.xxxx
					mov r1.yw, l(0,0.250000,0,0.250000)
					sample r2.xyzw, r1.xyxx, t0.wxyz, s0
					mov_sat r2.x, r2.x
					add r1.y, r2.x, r2.x
					mul r0.w, r0.w, r1.y
					mul r0.w, r0.w, cb0[11].x
					mad r0.xyz, r0.wwww, r0.xyzx, r1.xxxx
					add r0.xyz, r0.xyzx, l(-0.413588, -0.413588, -0.413588, 0.000000)
					mad r0.xyz, r0.xyzx, cb0[11].yyyy, l(0.413588, 0.413588, 0.413588, 0.000000)
					lt r2.xyzw, r0.xxyy, l(-0.301370, 1.467996, -0.301370, 1.467996)
					mad r0.xyw, r0.xyxz, l(17.520000, 17.520000, 0.000000, 17.520000), l(-9.720000, -9.720000, 0.000000, -9.720000)
					lt r1.xy, r0.zzzz, l(-0.301370, 1.467996, 0.000000, 0.000000)
					exp r0.xyz, r0.xywx
					movc r2.yw, r2.yyyw, r0.xxxy, l(0,65504.000000,0,65504.000000)
					add r0.xyw, r0.xyxz, l(-0.000015, -0.000015, 0.000000, -0.000015)
					movc r0.z, r1.y, r0.z, l(65504.000000)
					add r0.xyw, r0.xyxw, r0.xyxw
					movc r2.xy, r2.xzxx, r0.xyxx, r2.ywyy
					movc r2.z, r1.x, r0.w, r0.z
					dp3 r0.x, l(1.451439, -0.236511, -0.214929, 0.000000), r2.xyzx
					dp3 r0.y, l(-0.076554, 1.176230, -0.099676, 0.000000), r2.xyzx
					dp3 r0.z, l(0.008316, -0.006032, 0.997716, 0.000000), r2.xyzx
					dp3 r2.x, l(0.390405, 0.549941, 0.008926, 0.000000), r0.xyzx
					dp3 r2.y, l(0.070842, 0.963172, 0.001358, 0.000000), r0.xyzx
					dp3 r2.z, l(0.023108, 0.128021, 0.936245, 0.000000), r0.xyzx
					mul r0.xyz, r2.xyzx, cb0[4].xyzx
					dp3 r2.x, l(2.858470, -1.628790, -0.024891, 0.000000), r0.xyzx
					dp3 r2.y, l(-0.210182, 1.158200, 0.000324, 0.000000), r0.xyzx
					dp3 r2.z, l(-0.041812, -0.118169, 1.068670, 0.000000), r0.xyzx
					add r0.xyz, -cb0[5].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mul r0.xyz, r0.xyzx, cb0[7].xyzx
					mul r3.xyz, cb0[5].xyzx, cb0[7].xyzx
					mad r0.xyz, r2.xyzx, r0.xyzx, r3.xyzx
					log r2.xyz, r0.xyzx
					mul r2.xyz, r2.xyzx, cb0[6].xyzx
					exp r2.xyz, r2.xyzx
					lt r3.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyw, r3.yzyx, r2.yzyx, r0.yzyx
					ge r1.x, r0.x, r0.y
					and r1.x, r1.x, l(0x3f800000)
					mov r2.xy, r0.yxyy
					add r3.xy, r0.xyxx, -r2.xyxx
					mov r2.zw, l(0,0,-1.000000,0.666667)
					mov r3.zw, l(0,0,1.000000,-1.000000)
					mad r2.xyzw, r1.xxxx, r3.xyzw, r2.xyzw
					ge r1.x, r0.w, r2.x
					and r1.x, r1.x, l(0x3f800000)
					mov r0.xyz, r2.xywx
					mov r2.xyw, r0.wywx
					add r2.xyzw, -r0.xyzw, r2.xyzw
					mad r0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
					min r1.x, r0.y, r0.w
					add r1.x, r0.x, -r1.x
					mad r1.y, r1.x, l(6.000000), l(0.000100)
					add r0.y, -r0.y, r0.w
					div r0.y, r0.y, r1.y
					add r0.y, r0.y, r0.z
					add r1.z, |r0.y|, cb0[10].w
					sample r2.xyzw, r1.zwzz, t0.xyzw, s0
					mov_sat r2.x, r2.x
					add r0.y, r2.x, l(-0.500000)
					add r0.y, r0.y, r1.z
					lt r0.z, l(1.000000), r0.y
					add r1.yz, r0.yyyy, l(0.000000, 1.000000, -1.000000, 0.000000)
					movc r0.z, r0.z, r1.z, r0.y
					lt r0.y, r0.y, l(0.000000)
					movc r0.y, r0.y, r1.y, r0.z
					add r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)
					frc r0.yzw, r0.yyzw
					mad r0.yzw, r0.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)
					add_sat r0.yzw, |r0.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r0.yzw, r0.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r1.y, r0.x, l(0.000100)
					div r1.x, r1.x, r1.y
					mad r0.yzw, r1.xxxx, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
					mul r0.xyz, r0.yzwy, r0.xxxx
					dp3 r1.x, r0.xyzx, cb0[12].xyzx
					dp3 r1.y, r0.xyzx, cb0[13].xyzx
					dp3 r1.z, r0.xyzx, cb0[14].xyzx
					dp3 r0.x, l(1.705050, -0.621790, -0.083260, 0.000000), r1.xyzx
					dp3 r0.y, l(-0.130260, 1.140800, -0.010550, 0.000000), r1.xyzx
					dp3 r0.z, l(-0.024000, -0.128970, 1.152970, 0.000000), r1.xyzx
					max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r0.w, cb0[15].y, cb0[15].z
					mad r1.x, cb0[15].x, cb0[16].z, r0.w
					mul r1.yz, cb0[15].wwww, cb0[16].xxyx
					mad r1.x, cb0[16].z, r1.x, r1.y
					mad r1.w, cb0[15].x, cb0[16].z, cb0[15].y
					mad r1.w, cb0[16].z, r1.w, r1.z
					div r1.x, r1.x, r1.w
					div r1.w, cb0[16].x, cb0[16].y
					add r1.x, -r1.w, r1.x
					div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
					mul r0.xyz, r0.xyzx, r1.xxxx
					mad r2.xyz, cb0[15].xxxx, r0.xyzx, r0.wwww
					mad r2.xyz, r0.xyzx, r2.xyzx, r1.yyyy
					mad r3.xyz, cb0[15].xxxx, r0.xyzx, cb0[15].yyyy
					mad r0.xyz, r0.xyzx, r3.xyzx, r1.zzzz
					div r0.xyz, r2.xyzx, r0.xyzx
					add r0.xyz, -r1.wwww, r0.xyzx
					mul r0.xyz, r1.xxxx, r0.xyzx
					div r0.xyz, r0.xyzx, cb0[16].wwww
					add r0.xyz, r0.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.wxyz, s0
					mov_sat r1.x, r1.x
					sample r2.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat r1.z, r0.w
					mov_sat r1.y, r2.w
					add r0.xyz, r1.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.xyzw, s0
					mov_sat o0.x, r1.x
					sample r1.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat o0.z, r0.z
					mov_sat o0.y, r1.y
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "TONEMAPPING_FILMIC" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 _Balance;
					//   float3 _ChannelMixerBlue;
					//   float3 _ChannelMixerGreen;
					//   float3 _ChannelMixerRed;
					//   float _Contrast;
					//   sampler2D _Curves;
					//   float3 _Gain;
					//   float _HueShift;
					//   float3 _InvGamma;
					//   float3 _Lift;
					//   float4 _LutParams;
					//   float3 _Offset;
					//   float3 _Power;
					//   float _Saturation;
					//   float3 _Slope;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _Balance           c0       1
					//   _Lift              c1       1
					//   _InvGamma          c2       1
					//   _Gain              c3       1
					//   _Offset            c4       1
					//   _Power             c5       1
					//   _Slope             c6       1
					//   _HueShift          c7       1
					//   _Saturation        c8       1
					//   _Contrast          c9       1
					//   _ChannelMixerRed   c10      1
					//   _ChannelMixerGreen c11      1
					//   _ChannelMixerBlue  c12      1
					//   _LutParams         c13      1
					//   _Curves            s0       1
					//
					
					    ps_3_0
					    def c14, -0.386036009, 13.6054821, -0.0479959995, 0.179999992
					    def c15, 0.5, 1.525878e-005, 9.72000027, 0.0570776239
					    def c16, 1, 0, -1, 0.666666687
					    def c17, 0.212599993, 0.715200007, 0.0722000003, -1.52587891e-005
					    def c18, 6, 9.99999975e-005, 0.25, -0.413588405
					    def c19, 0.413588405, 0.71495831, 17.5200005, -9.72000027
					    def c20, 0.0897922963, 0.813422978, 0.0967615992, 65504
					    def c21, -1.05440795, 0.71495831, 6, -3
					    def c22, -0.0765537769, 1.17622972, -0.0996759236, 1.00000001e-010
					    def c23, 1, 0.666666687, 0.333333343, 2
					    def c24, 0.070841603, 0.963172019, 0.00135775004, -0.400000006
					    def c25, 5, 2.5, 0.0799999982, -0.5
					    def c26, 0.0208350997, -0.0851330012, -2, 1.57079637
					    def c27, 0.695452213, 0.140678704, 0.163869068, 0.180141002
					    def c28, 0.0447945632, 0.859671116, 0.0955343172, -0.330299497
					    def c29, -0.00552588282, 0.00402521016, 1.00150073, 0.999866009
					    def c30, -0, -3.14159274, 57.2957802, 360
					    def c31, 180, 360, -360, 0.0148148146
					    def c32, -2, 3, 0.0299999993, 0.180000007
					    def c33, 278.508514, 10.7771997, 293.604492, 88.7121964
					    def c34, 80.6889038, 0.662454188, 0.134004205, 0.156187683
					    def c35, 0.272228986, 0.674081981, 0.0536894985, 0.959999979
					    def c36, 0.0117218941, -0.00828444213, 0.988394856, 0.00390625
					    def c37, 0.987223983, -0.00611326983, 0.0159533005, 0.75
					    def c38, 1, 0, -0.333333343, 9.99999975e-005
					    def c39, 2.85846996, -1.62879002, -0.0248910002, 0.159999996
					    def c40, 0.0175439995, 0.111543998, 0.870703995, -3.05175708e-005
					    def c41, 1.45143926, -0.236510754, -0.214928567, -0.00999999978
					    def c42, -0.210181996, 1.15820003, 0.000324280991, -0.479999989
					    def c43, 0.00831614807, -0.00603244966, 0.997716308, 100
					    def c44, 0.439700991, 0.382977992, 0.177334994, 0
					    def c45, 53117.8438, 1.6410234, -0.324803293, -0.236424699
					    def c46, 0.272228718, 0.674081743, 0.0536895171, 10000
					    def c47, -0.663662851, 1.61533165, 0.0167563483, 0.930000007
					    def c48, -0.00557464967, 0.0040607336, 1.01033914, 0.981100023
					    def c49, -0.0418119989, -0.118169002, 1.06867003, 1.73205078
					    def c50, 0.0231081992, 0.128021002, 0.936245024, 0.0250000004
					    def c51, 0.390404999, 0.549941003, 0.00892631989, 1.75
					    def c52, -0.00759836007, 1.00186002, 0.00533019984, 0
					    def c53, 0.00307257008, -0.00509594986, 1.08168006, 0
					    def c54, 3.2409699, -1.5373832, -0.498610765, 0
					    def c55, -0.969243646, 1.8759675, 0.0415550582, 0
					    def c56, 0.0556300804, -0.203976959, 1.05697155, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c13.x
					    add_pp r1.yz, -c13, v0.xxyw
					    mul_pp r0.y, r1.y, c13.x
					    frc_pp r1.x, r0.y
					    mad_pp r1.w, r1.x, -r0.x, r1.y
					    mov r0.x, c14.x
					    mad_pp r0.xyz, r1.xzww, c13.w, r0.x
					    mul_pp r0.xyz, r0, c14.y
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    add_pp r0.xyz, r1, c14.z
					    mul_pp r0.xyz, r0, c14.w
					    dp3_pp r1.x, c44, r0
					    dp3_pp r1.y, c20, r0
					    dp3_pp r1.z, c40, r0
					    max_pp r0.xyz, r1, c44.w
					    min_pp r1.xyz, r0, c20.w
					    log_pp r0.x, r1.x
					    log_pp r0.yz, r1.y
					    log_pp r0.w, r1.z
					    add_pp r0, r0, c15.z
					    mul_pp r0, r0, c15.w
					    mad_pp r2.xyz, r1, c15.x, c15.y
					    add r1, r1.xyyz, c40.w
					    log_pp r3.x, r2.x
					    log_pp r3.yz, r2.y
					    log_pp r3.w, r2.z
					    add_pp r2, r3, c15.z
					    mul_pp r2, r2, c15.w
					    cmp_pp r0, r1, r0, r2
					    mov r1.xyz, c6
					    mad_pp r0, r0, r1.xyyz, c4.xyyz
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.z
					    log_pp r1.z, r0.w
					    mul_pp r1.xyz, r1, c5
					    exp_pp r2.x, r1.x
					    exp_pp r2.yz, r1.y
					    exp_pp r2.w, r1.z
					    cmp_pp r0, -r0.xzzw, r0, r2
					    add r1.x, -r0.w, r0.z
					    mad_pp r2, r0.zwzz, c38.xxyy, c38.yyyz
					    mad_pp r3, r2.yxyy, c16.xxyy, c16.yyzw
					    cmp_pp r1, r1.x, r2.wyzx, r3.wyzx
					    add r2.x, r0.x, -r1.w
					    mov_pp r3.z, r1.x
					    mov_pp r1.x, r0.x
					    mov_pp r3.xyw, r1.wyzx
					    cmp_pp r1, r2.x, r1, r3
					    min_pp r2.x, r1.y, r1.w
					    add_pp r2.x, r1.x, -r2.x
					    mad_pp r2.y, r2.x, c18.x, c18.y
					    rcp r2.y, r2.y
					    add r1.y, -r1.y, r1.w
					    mad_pp r1.y, r1.y, r2.y, r1.z
					    add_pp r1.x, r1.x, c38.w
					    rcp r1.x, r1.x
					    mul_pp r2.z, r1.x, r2.x
					    abs_pp r2.x, r1.y
					    mov_pp r2.yw, c18.z
					    texld r1, r2, s0
					    texld r2, r2.zwzw, s0
					    mov_sat r1.x, r2.z
					    mov_sat r1.y, r1.y
					    add_pp r1.xy, r1, r1
					    mul_pp r1.x, r1.x, r1.y
					    dp3_pp r2.x, r0.xzww, c17
					    mov_pp r2.yw, c18.z
					    texld r3, r2, s0
					    mov_sat r1.y, r3.w
					    add_pp r1.y, r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r1.x, r1.x, c8.x
					    lrp_pp r3, r1.x, r0, r2.x
					    add_pp r0, r3, c18.w
					    mov r1.xy, c21
					    mad r1.z, r0.w, c9.x, r1.x
					    mov r2.xy, c19
					    mad r3, r0.xzwx, c9.x, r2.xxxy
					    mad r0, r0, c9.x, r1.xyxy
					    mad_pp r1.xyw, r3.xyzz, c19.z, c19.w
					    exp_pp r1.w, r1.w
					    cmp_pp r1.z, r1.z, c20.w, r1.w
					    add_pp r1.w, r1.w, c17.w
					    add_pp r1.w, r1.w, r1.w
					    cmp_pp r3.z, r0.w, r1.z, r1.w
					    exp_pp r0.w, r1.x
					    exp_pp r1.x, r1.y
					    add_pp r1.y, r0.w, c17.w
					    cmp_pp r0.x, r0.x, c20.w, r0.w
					    add_pp r0.w, r1.y, r1.y
					    cmp_pp r3.x, r3.w, r0.x, r0.w
					    add_pp r0.x, r1.x, c17.w
					    cmp_pp r0.z, r0.z, c20.w, r1.x
					    add_pp r0.x, r0.x, r0.x
					    cmp_pp r3.y, r0.y, r0.z, r0.x
					    dp3_pp r0.x, c41, r3
					    dp3_pp r0.y, c22, r3
					    dp3_pp r0.z, c43, r3
					    dp3_pp r1.x, c51, r0
					    dp3_pp r1.y, c24, r0
					    dp3_pp r1.z, c50, r0
					    mul_pp r0.xyz, r1, c0
					    dp3_pp r1.x, c39, r0
					    dp3_pp r1.y, c42, r0
					    dp3_pp r1.z, c49, r0
					    mov r0.x, c38.x
					    add_pp r0.xyz, r0.x, -c1
					    mul_pp r0.xyz, r0, c3
					    mov r3.xyz, c1
					    mul_pp r3.xyz, r3, c3
					    mad_pp r0.xyz, r1, r0, r3
					    log_pp r1.x, r0.x
					    log_pp r1.y, r0.y
					    log_pp r1.z, r0.z
					    mul_pp r1.xyz, r1, c2
					    exp_pp r3.x, r1.x
					    exp_pp r3.y, r1.y
					    exp_pp r3.z, r1.z
					    cmp_pp r0.xyz, -r0, r0, r3
					    add r1.x, -r0.z, r0.y
					    mad_pp r3, r0.yzyy, c38.xxyy, c38.yyyz
					    mad_pp r4, r3.yxyy, c16.xxyy, c16.yyzw
					    cmp_pp r1, r1.x, r3.xywz, r4.xywz
					    add r2.x, r0.x, -r1.x
					    mov_pp r0.yzw, r1.xywx
					    mov_pp r1.xyw, r0.wyzx
					    cmp_pp r0, r2.x, r0, r1
					    min_pp r1.x, r0.y, r0.w
					    add_pp r1.x, r0.x, -r1.x
					    mad_pp r1.y, r1.x, c18.x, c18.y
					    rcp r1.y, r1.y
					    add r0.y, -r0.y, r0.w
					    mad_pp r0.y, r0.y, r1.y, r0.z
					    add_pp r2.z, r0_abs.y, c7.x
					    texld r3, r2.zwzw, s0
					    mov_sat r3.x, r3.x
					    add_pp r0.y, r3.x, -c15.x
					    add_pp r0.y, r0.y, r2.z
					    add r0.z, -r0.y, c38.x
					    add_pp r1.yz, r0.y, c16.xxzw
					    cmp_pp r0.z, r0.z, r0.y, r1.z
					    cmp_pp r0.y, r0.y, r0.z, r1.y
					    add_pp r0.yzw, r0.y, c23.xxyz
					    frc_pp r0.yzw, r0
					    mad_pp r0.yzw, r0, c21.z, c21.w
					    add_sat_pp r0.yzw, r0_abs, -c38.x
					    add_pp r1.y, r0.x, c38.w
					    rcp r1.y, r1.y
					    mul_pp r1.x, r1.y, r1.x
					    lrp_pp r2.xyz, r1.x, r0.yzww, c38.x
					    mul_pp r0.xyz, r0.x, r2
					    dp3_pp r1.x, r0, c10
					    dp3_pp r1.y, r0, c11
					    dp3_pp r1.z, r0, c12
					    dp3_pp r0.y, c27, r1
					    dp3_pp r0.z, c28, r1
					    dp3_pp r0.w, c29, r1
					    add r1, -r0.wzyw, r0.zwzy
					    mul_pp r1.yz, r0.xwzw, r1
					    add_pp r0.x, r1.z, r1.y
					    mad_pp r0.x, r0.y, r1.w, r0.x
					    cmp_pp r1.xy, r1.x, r0.wzzw, r0.zwzw
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    add_pp r1.z, r0.z, r0.w
					    add_pp r1.z, r0.y, r1.z
					    mad_pp r0.x, r0.x, c51.w, r1.z
					    mul_pp r1.z, r0.x, -c38.z
					    rcp r1.z, r1.z
					    mad_pp r1.z, r1.z, c25.z, c25.w
					    min_pp r2.x, r1.x, r0.y
					    max_pp r2.y, r0.y, r1.y
					    min_pp r1.x, -r2.x, -c22.w
					    max_pp r1.y, r2.y, c22.w
					    add_pp r1.x, r1.x, r1.y
					    add r1.y, r2.y, c41.w
					    rcp r1.w, r2.y
					    cmp r1.y, r1.y, r1.w, c43.w
					    mad_pp r1.w, r1.x, r1.y, c24.w
					    mul_pp r1.x, r1.y, r1.x
					    cmp_pp r1.y, r1.w, -c38.y, -c38.x
					    mul_pp r2.xy, r1.w, c25
					    cmp_pp r1.w, -r2.x, c38.y, c38.x
					    add_pp r2.x, -r2_abs.y, c38.x
					    max_pp r3.x, r2.x, c44.w
					    mad r2.x, r3.x, -r3.x, c38.x
					    add r1.y, r1.y, r1.w
					    mad_pp r1.y, r1.y, r2.x, c38.x
					    mul_pp r1.y, r1.y, c50.w
					    mul_pp r1.z, r1.z, r1.y
					    add r1.w, r0.x, c42.w
					    add r0.x, -r0.x, c39.w
					    cmp_pp r1.z, r1.w, c44.w, r1.z
					    cmp_pp r0.x, r0.x, r1.y, r1.z
					    add_pp r0.x, r0.x, c38.x
					    mul_pp r2.yzw, r0.x, r0
					    mad r1.yz, r0, r0.x, -r2.xzww
					    mad_pp r0.y, r0.y, -r0.x, c32.z
					    mul_pp r0.z, r1.z, c49.w
					    mad_pp r1.w, r2.y, c23.w, -r2.z
					    mad_pp r0.x, r0.w, -r0.x, r1.w
					    max_pp r1.w, r0_abs.z, r0_abs.x
					    rcp_pp r0.w, r1.w
					    min_pp r1.w, r0_abs.x, r0_abs.z
					    mul_pp r0.w, r0.w, r1.w
					    mul_pp r1.w, r0.w, r0.w
					    mad_pp r3.x, r1.w, c26.x, c26.y
					    mad_pp r3.x, r1.w, r3.x, c27.w
					    mad_pp r3.x, r1.w, r3.x, c28.w
					    mad_pp r1.w, r1.w, r3.x, c29.w
					    mul_pp r0.w, r0.w, r1.w
					    mad_pp r1.w, r0.w, c26.z, c26.w
					    add r3.x, -r0_abs.z, r0_abs.x
					    cmp_pp r3.x, r3.x, c38.y, c38.x
					    mad_pp r0.w, r1.w, r3.x, r0.w
					    cmp_pp r1.w, r0.x, c30.x, c30.y
					    add_pp r0.w, r0.w, r1.w
					    add_pp r1.w, r0.w, r0.w
					    max_pp r3.x, r0.z, r0.x
					    min_pp r3.y, r0.x, r0.z
					    cmp_pp r0.x, r3.x, c38.x, c38.y
					    cmp_pp r0.x, r3.y, c44.w, r0.x
					    mad r0.x, r0.x, -r1.w, r0.w
					    mul_pp r0.x, r0.x, c30.z
					    cmp r0.z, -r1_abs.z, -c38.x, -c38.y
					    cmp r0.z, -r1_abs.y, r0.z, c44.w
					    cmp_pp r0.x, r0.z, r0.x, c44.w
					    add_pp r0.z, r0.x, c30.w
					    cmp_pp r0.x, r0.x, r0.x, r0.z
					    add r0.z, -r0.x, c31.x
					    add r1.yzw, r0.x, c31.xxyz
					    cmp_pp r0.x, r0.z, r0.x, r1.w
					    cmp_pp r0.x, r1.y, r0.x, r1.z
					    mul_pp r0.x, r0.x, c31.w
					    add_pp r0.x, -r0_abs.x, c38.x
					    max_pp r1.y, r0.x, c44.w
					    mad_pp r0.x, r1.y, c32.x, c32.y
					    mul_pp r0.z, r1.y, r1.y
					    mul_pp r0.x, r0.z, r0.x
					    mul_pp r0.x, r0.x, r0.x
					    mul_pp r0.x, r1.x, r0.x
					    mul_pp r0.x, r0.y, r0.x
					    mad_pp r2.x, r0.x, c32.w, r2.y
					    dp3_pp r0.x, c41, r2.xzww
					    dp3_pp r0.y, c22, r2.xzww
					    dp3_pp r0.z, c43, r2.xzww
					    max_pp r1.xyz, r0, c44.w
					    dp3_pp r0.x, r1, c35
					    lrp_pp r2.xyz, c35.w, r1, r0.x
					    mad_pp r0.xyz, r2, c33.x, c33.y
					    mul_pp r0.xyz, r0, r2
					    mad_pp r1.xyz, r2, c33.z, c33.w
					    mad_pp r1.xyz, r2, r1, c34.x
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    rcp r2.z, r1.z
					    mul_pp r0.xyz, r0, r2
					    dp3_pp r1.y, c46, r0
					    dp3_pp r1.x, c34.yzww, r0
					    dp3_pp r1.z, c48, r0
					    dp3_pp r0.x, r1, c38.x
					    add r0.y, r0.x, -c38.w
					    rcp r0.x, r0.x
					    cmp r0.x, r0.y, r0.x, c46.w
					    mad_pp r0.y, r1.x, -r0.x, c38.x
					    mul_pp r2.xy, r0.x, r1
					    mad_pp r2.z, r1.y, -r0.x, r0.y
					    mad r0.x, r1.y, r0.x, -c38.w
					    max_pp r0.y, r1.y, c44.w
					    rcp r0.z, r2.y
					    cmp r0.x, r0.x, r0.z, c46.w
					    add r0.z, r0.y, -c20.w
					    pow_pp r1.x, r0.y, c48.w
					    cmp_pp r1.y, r0.z, c45.x, r1.x
					    mul_pp r0.x, r0.x, r1.y
					    mul_pp r1.xz, r0.x, r2
					    dp3_pp r0.x, c45.yzww, r1
					    dp3_pp r0.y, c47, r1
					    dp3_pp r0.z, c36, r1
					    dp3_pp r0.w, r0, c35
					    lrp_pp r1.xyz, c47.w, r0, r0.w
					    dp3_pp r0.x, c34.yzww, r1
					    dp3_pp r0.y, c46, r1
					    dp3_pp r0.z, c48, r1
					    dp3_pp r1.x, c37, r0
					    dp3_pp r1.y, c52, r0
					    dp3_pp r1.z, c53, r0
					    dp3_pp r0.x, c54, r1
					    dp3_pp r0.y, c55, r1
					    dp3_pp r0.z, c56, r1
					    add_pp r0.xyz, r0, c36.w
					    mov r0.w, c37.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp r1.x, r1.w
					    texld_pp r2, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp r1.z, r0.w
					    mov_sat_pp r1.y, r2.w
					    add_pp r0.xyz, r1, c36.w
					    mov r0.w, c37.w
					    texld_pp r1, r0.xwzw, s0
					    mov_sat_pp oC0.x, r1.x
					    texld_pp r1, r0.ywzw, s0
					    texld_pp r0, r0.zwzw, s0
					    mov_sat_pp oC0.z, r0.z
					    mov_sat_pp oC0.y, r1.y
					    mov_pp oC0.w, c38.x
					
					// approximately 311 instruction slots used (10 texture, 301 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "TONEMAPPING_FILMIC" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 4
					add r0.yz, v1.xxyx, -cb0[17].yyzy
					mul r1.x, r0.y, cb0[17].x
					frc r0.x, r1.x
					div r1.x, r0.x, cb0[17].x
					add r0.w, r0.y, -r1.x
					mad r0.xyz, r0.xzwx, cb0[17].wwww, l(-0.386036, -0.386036, -0.386036, 0.000000)
					mul r0.xyz, r0.xyzx, l(13.605482, 13.605482, 13.605482, 0.000000)
					exp r0.xyz, r0.xyzx
					add r0.xyz, r0.xyzx, l(-0.047996, -0.047996, -0.047996, 0.000000)
					mul r0.xyz, r0.xyzx, l(0.180000, 0.180000, 0.180000, 0.000000)
					dp3 r1.x, l(0.439701, 0.382978, 0.177335, 0.000000), r0.xyzx
					dp3 r1.y, l(0.089792, 0.813423, 0.096762, 0.000000), r0.xyzx
					dp3 r1.z, l(0.017544, 0.111544, 0.870704, 0.000000), r0.xyzx
					max r0.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
					min r0.xyz, r0.xyzx, l(65504.000000, 65504.000000, 65504.000000, 0.000000)
					mad r1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.000015, 0.000015, 0.000015, 0.000000)
					log r1.xyz, r1.xyzx
					add r1.xyz, r1.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r1.xyz, r1.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					log r2.xyz, r0.xyzx
					lt r0.xyz, r0.xyzx, l(0.000031, 0.000031, 0.000031, 0.000000)
					add r2.xyz, r2.xyzx, l(9.720000, 9.720000, 9.720000, 0.000000)
					mul r2.xyz, r2.xyzx, l(0.057078, 0.057078, 0.057078, 0.000000)
					movc r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
					mad r0.xyz, r0.xyzx, cb0[10].xyzx, cb0[8].xyzx
					log r1.xyz, r0.xyzx
					mul r1.xyz, r1.xyzx, cb0[9].xyzx
					exp r1.xyz, r1.xyzx
					lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
					ge r0.w, r0.y, r0.z
					and r0.w, r0.w, l(0x3f800000)
					mov r1.xy, r0.zyzz
					add r2.xy, r0.yzyy, -r1.xyxx
					mov r1.zw, l(0,0,-1.000000,0.666667)
					mov r2.zw, l(0,0,1.000000,-1.000000)
					mad r1.xyzw, r0.wwww, r2.xywz, r1.xywz
					ge r0.w, r0.x, r1.x
					and r0.w, r0.w, l(0x3f800000)
					mov r2.z, r1.w
					mov r1.w, r0.x
					mov r2.xyw, r1.wywx
					add r2.xyzw, -r1.xyzw, r2.xyzw
					mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
					min r0.w, r1.y, r1.w
					add r0.w, -r0.w, r1.x
					mad r2.x, r0.w, l(6.000000), l(0.000100)
					add r1.y, -r1.y, r1.w
					div r1.y, r1.y, r2.x
					add r1.y, r1.y, r1.z
					add r1.x, r1.x, l(0.000100)
					div r2.z, r0.w, r1.x
					mov r2.x, |r1.y|
					mov r2.yw, l(0,0.250000,0,0.250000)
					sample r1.xyzw, r2.xyxx, t0.yxzw, s0
					sample r2.xyzw, r2.zwzz, t0.zxyw, s0
					mov_sat r2.x, r2.x
					add r0.w, r2.x, r2.x
					mov_sat r1.x, r1.x
					add r1.x, r1.x, r1.x
					mul r0.w, r0.w, r1.x
					dp3 r1.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
					add r0.xyz, r0.xyzx, -r1.xxxx
					mov r1.yw, l(0,0.250000,0,0.250000)
					sample r2.xyzw, r1.xyxx, t0.wxyz, s0
					mov_sat r2.x, r2.x
					add r1.y, r2.x, r2.x
					mul r0.w, r0.w, r1.y
					mul r0.w, r0.w, cb0[11].x
					mad r0.xyz, r0.wwww, r0.xyzx, r1.xxxx
					add r0.xyz, r0.xyzx, l(-0.413588, -0.413588, -0.413588, 0.000000)
					mad r0.xyz, r0.xyzx, cb0[11].yyyy, l(0.413588, 0.413588, 0.413588, 0.000000)
					lt r2.xyzw, r0.xxyy, l(-0.301370, 1.467996, -0.301370, 1.467996)
					mad r0.xyw, r0.xyxz, l(17.520000, 17.520000, 0.000000, 17.520000), l(-9.720000, -9.720000, 0.000000, -9.720000)
					lt r1.xy, r0.zzzz, l(-0.301370, 1.467996, 0.000000, 0.000000)
					exp r0.xyz, r0.xywx
					movc r2.yw, r2.yyyw, r0.xxxy, l(0,65504.000000,0,65504.000000)
					add r0.xyw, r0.xyxz, l(-0.000015, -0.000015, 0.000000, -0.000015)
					movc r0.z, r1.y, r0.z, l(65504.000000)
					add r0.xyw, r0.xyxw, r0.xyxw
					movc r2.xy, r2.xzxx, r0.xyxx, r2.ywyy
					movc r2.z, r1.x, r0.w, r0.z
					dp3 r0.x, l(1.451439, -0.236511, -0.214929, 0.000000), r2.xyzx
					dp3 r0.y, l(-0.076554, 1.176230, -0.099676, 0.000000), r2.xyzx
					dp3 r0.z, l(0.008316, -0.006032, 0.997716, 0.000000), r2.xyzx
					dp3 r2.x, l(0.390405, 0.549941, 0.008926, 0.000000), r0.xyzx
					dp3 r2.y, l(0.070842, 0.963172, 0.001358, 0.000000), r0.xyzx
					dp3 r2.z, l(0.023108, 0.128021, 0.936245, 0.000000), r0.xyzx
					mul r0.xyz, r2.xyzx, cb0[4].xyzx
					dp3 r2.x, l(2.858470, -1.628790, -0.024891, 0.000000), r0.xyzx
					dp3 r2.y, l(-0.210182, 1.158200, 0.000324, 0.000000), r0.xyzx
					dp3 r2.z, l(-0.041812, -0.118169, 1.068670, 0.000000), r0.xyzx
					add r0.xyz, -cb0[5].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mul r0.xyz, r0.xyzx, cb0[7].xyzx
					mul r3.xyz, cb0[5].xyzx, cb0[7].xyzx
					mad r0.xyz, r2.xyzx, r0.xyzx, r3.xyzx
					log r2.xyz, r0.xyzx
					mul r2.xyz, r2.xyzx, cb0[6].xyzx
					exp r2.xyz, r2.xyzx
					lt r3.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
					movc r0.xyw, r3.yzyx, r2.yzyx, r0.yzyx
					ge r1.x, r0.x, r0.y
					and r1.x, r1.x, l(0x3f800000)
					mov r2.xy, r0.yxyy
					add r3.xy, r0.xyxx, -r2.xyxx
					mov r2.zw, l(0,0,-1.000000,0.666667)
					mov r3.zw, l(0,0,1.000000,-1.000000)
					mad r2.xyzw, r1.xxxx, r3.xyzw, r2.xyzw
					ge r1.x, r0.w, r2.x
					and r1.x, r1.x, l(0x3f800000)
					mov r0.xyz, r2.xywx
					mov r2.xyw, r0.wywx
					add r2.xyzw, -r0.xyzw, r2.xyzw
					mad r0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
					min r1.x, r0.y, r0.w
					add r1.x, r0.x, -r1.x
					mad r1.y, r1.x, l(6.000000), l(0.000100)
					add r0.y, -r0.y, r0.w
					div r0.y, r0.y, r1.y
					add r0.y, r0.y, r0.z
					add r1.z, |r0.y|, cb0[10].w
					sample r2.xyzw, r1.zwzz, t0.xyzw, s0
					mov_sat r2.x, r2.x
					add r0.y, r2.x, l(-0.500000)
					add r0.y, r0.y, r1.z
					lt r0.z, l(1.000000), r0.y
					add r1.yz, r0.yyyy, l(0.000000, 1.000000, -1.000000, 0.000000)
					movc r0.z, r0.z, r1.z, r0.y
					lt r0.y, r0.y, l(0.000000)
					movc r0.y, r0.y, r1.y, r0.z
					add r0.yzw, r0.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)
					frc r0.yzw, r0.yyzw
					mad r0.yzw, r0.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)
					add_sat r0.yzw, |r0.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r0.yzw, r0.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
					add r1.y, r0.x, l(0.000100)
					div r1.x, r1.x, r1.y
					mad r0.yzw, r1.xxxx, r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
					mul r0.xyz, r0.yzwy, r0.xxxx
					dp3 r1.x, r0.xyzx, cb0[12].xyzx
					dp3 r1.y, r0.xyzx, cb0[13].xyzx
					dp3 r1.z, r0.xyzx, cb0[14].xyzx
					dp3 r0.y, l(0.695452, 0.140679, 0.163869, 0.000000), r1.xyzx
					dp3 r0.z, l(0.044795, 0.859671, 0.095534, 0.000000), r1.xyzx
					dp3 r0.w, l(-0.005526, 0.004025, 1.001501, 0.000000), r1.xyzx
					add r1.xyz, -r0.zywz, r0.wzyw
					mul r1.xy, r0.wzww, r1.xyxx
					add r0.x, r1.y, r1.x
					mad r0.x, r0.y, r1.z, r0.x
					sqrt r0.x, r0.x
					add r1.x, r0.z, r0.w
					add r1.x, r0.y, r1.x
					mad r0.x, r0.x, l(1.750000), r1.x
					mul r1.x, r0.x, l(0.333333)
					div r1.x, l(0.080000), r1.x
					min r1.y, r0.w, r0.z
					min r1.y, r0.y, r1.y
					max r1.z, r0.w, r0.z
					max r1.z, r0.y, r1.z
					max r1.yzw, r1.yyzz, l(0.000000, 0.000000, 0.000000, 0.010000)
					add r1.y, -r1.y, r1.z
					div r1.y, r1.y, r1.w
					add r1.xz, r1.xxyx, l(-0.500000, 0.000000, -0.400000, 0.000000)
					lt r1.w, l(0.000000), r1.z
					lt r2.x, r1.z, l(0.000000)
					mul r1.z, r1.z, l(2.500000)
					add r1.z, -|r1.z|, l(1.000000)
					max r1.z, r1.z, l(0.000000)
					mad r1.z, -r1.z, r1.z, l(1.000000)
					iadd r1.w, -r1.w, r2.x
					itof r1.w, r1.w
					mad r1.z, r1.w, r1.z, l(1.000000)
					mul r1.z, r1.z, l(0.025000)
					mul r1.x, r1.x, r1.z
					ge r1.w, r0.x, l(0.480000)
					ge r0.x, l(0.160000), r0.x
					movc r1.x, r1.w, l(0), r1.x
					movc r0.x, r0.x, r1.z, r1.x
					add r0.x, r0.x, l(1.000000)
					mul r2.yzw, r0.xxxx, r0.yyzw
					mad r0.y, -r0.y, r0.x, l(0.030000)
					mad r0.z, r0.z, r0.x, -r2.w
					mul r0.z, r0.z, l(1.732051)
					mad r1.x, r2.y, l(2.000000), -r2.z
					mad r0.x, -r0.w, r0.x, r1.x
					max r0.w, |r0.x|, |r0.z|
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					min r1.x, |r0.x|, |r0.z|
					mul r0.w, r0.w, r1.x
					mul r1.x, r0.w, r0.w
					mad r1.z, r1.x, l(0.020835), l(-0.085133)
					mad r1.z, r1.x, r1.z, l(0.180141)
					mad r1.z, r1.x, r1.z, l(-0.330299)
					mad r1.x, r1.x, r1.z, l(0.999866)
					mul r1.z, r0.w, r1.x
					mad r1.z, r1.z, l(-2.000000), l(1.570796)
					lt r1.w, |r0.x|, |r0.z|
					and r1.z, r1.w, r1.z
					mad r0.w, r0.w, r1.x, r1.z
					lt r1.x, r0.x, -r0.x
					and r1.x, r1.x, l(0xc0490fdb)
					add r0.w, r0.w, r1.x
					min r1.x, r0.x, r0.z
					max r0.x, r0.x, r0.z
					ge r0.x, r0.x, -r0.x
					lt r0.z, r1.x, -r1.x
					and r0.x, r0.x, r0.z
					movc r0.x, r0.x, -r0.w, r0.w
					mul r0.x, r0.x, l(57.295780)
					eq r0.zw, r2.zzzw, r2.yyyz
					and r0.z, r0.w, r0.z
					movc r0.x, r0.z, l(0), r0.x
					lt r0.z, r0.x, l(0.000000)
					add r0.w, r0.x, l(360.000000)
					movc r0.x, r0.z, r0.w, r0.x
					lt r0.z, l(180.000000), r0.x
					add r1.xz, r0.xxxx, l(360.000000, 0.000000, -360.000000, 0.000000)
					movc r0.z, r0.z, r1.z, r0.x
					lt r0.x, r0.x, l(-180.000000)
					movc r0.x, r0.x, r1.x, r0.z
					mul r0.x, r0.x, l(0.014815)
					add r0.x, -|r0.x|, l(1.000000)
					max r0.x, r0.x, l(0.000000)
					mad r0.z, r0.x, l(-2.000000), l(3.000000)
					mul r0.x, r0.x, r0.x
					mul r0.x, r0.x, r0.z
					mul r0.x, r0.x, r0.x
					mul r0.x, r1.y, r0.x
					mul r0.x, r0.y, r0.x
					mad r2.x, r0.x, l(0.180000), r2.y
					dp3 r0.x, l(1.451439, -0.236511, -0.214929, 0.000000), r2.xzwx
					dp3 r0.y, l(-0.076554, 1.176230, -0.099676, 0.000000), r2.xzwx
					dp3 r0.z, l(0.008316, -0.006032, 0.997716, 0.000000), r2.xzwx
					max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp3 r0.w, r0.xyzx, l(0.272229, 0.674082, 0.053689, 0.000000)
					add r0.xyz, -r0.wwww, r0.xyzx
					mad r0.xyz, r0.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000), r0.wwww
					mad r1.xyz, r0.xyzx, l(278.508514, 278.508514, 278.508514, 0.000000), l(10.777200, 10.777200, 10.777200, 0.000000)
					mul r1.xyz, r0.xyzx, r1.xyzx
					mad r2.xyz, r0.xyzx, l(293.604492, 293.604492, 293.604492, 0.000000), l(88.712196, 88.712196, 88.712196, 0.000000)
					mad r0.xyz, r0.xyzx, r2.xyzx, l(80.688904, 80.688904, 80.688904, 0.000000)
					div r0.xyz, r1.xyzx, r0.xyzx
					dp3 r1.x, l(0.662454, 0.134004, 0.156188, 0.000000), r0.xyzx
					dp3 r1.z, l(-0.005575, 0.004061, 1.010339, 0.000000), r0.xyzx
					dp3 r1.y, l(0.272229, 0.674082, 0.053690, 0.000000), r0.xyzx
					dp3 r0.x, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					max r0.x, r0.x, l(0.000100)
					div r0.xy, r1.xyxx, r0.xxxx
					max r0.w, r1.y, l(0.000000)
					min r0.w, r0.w, l(65504.000000)
					log r0.w, r0.w
					mul r0.w, r0.w, l(0.981100)
					exp r1.y, r0.w
					add r0.w, -r0.x, l(1.000000)
					add r0.z, -r0.y, r0.w
					max r0.y, r0.y, l(0.000100)
					div r0.y, r1.y, r0.y
					mul r1.xz, r0.yyyy, r0.xxzx
					dp3 r0.x, l(1.641023, -0.324803, -0.236425, 0.000000), r1.xyzx
					dp3 r0.y, l(-0.663663, 1.615332, 0.016756, 0.000000), r1.xyzx
					dp3 r0.z, l(0.011722, -0.008284, 0.988395, 0.000000), r1.xyzx
					dp3 r0.w, r0.xyzx, l(0.272229, 0.674082, 0.053689, 0.000000)
					add r0.xyz, -r0.wwww, r0.xyzx
					mad r0.xyz, r0.xyzx, l(0.930000, 0.930000, 0.930000, 0.000000), r0.wwww
					dp3 r1.x, l(0.662454, 0.134004, 0.156188, 0.000000), r0.xyzx
					dp3 r1.y, l(0.272229, 0.674082, 0.053690, 0.000000), r0.xyzx
					dp3 r1.z, l(-0.005575, 0.004061, 1.010339, 0.000000), r0.xyzx
					dp3 r0.x, l(0.987224, -0.006113, 0.015953, 0.000000), r1.xyzx
					dp3 r0.y, l(-0.007598, 1.001860, 0.005330, 0.000000), r1.xyzx
					dp3 r0.z, l(0.003073, -0.005096, 1.081680, 0.000000), r1.xyzx
					dp3 r1.x, l(3.240970, -1.537383, -0.498611, 0.000000), r0.xyzx
					dp3 r1.y, l(-0.969244, 1.875968, 0.041555, 0.000000), r0.xyzx
					dp3 r1.z, l(0.055630, -0.203977, 1.056972, 0.000000), r0.xyzx
					add r0.xyz, r1.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.wxyz, s0
					mov_sat r1.x, r1.x
					sample r2.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat r1.z, r0.w
					mov_sat r1.y, r2.w
					add r0.xyz, r1.xyzx, l(0.003906, 0.003906, 0.003906, 0.000000)
					mov r0.w, l(0.750000)
					sample r1.xyzw, r0.xwxx, t0.xyzw, s0
					mov_sat o0.x, r1.x
					sample r1.xyzw, r0.ywyy, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mov_sat o0.z, r0.z
					mov_sat o0.y, r1.y
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}