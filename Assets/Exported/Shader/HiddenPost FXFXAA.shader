Shader "Hidden/Post FX/FXAA" {
	Properties {
		_MainTex ("Texture", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 64265
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DITHERING" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DITHERING" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "GRAIN" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "GRAIN" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "GRAIN" "DITHERING" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_ST         c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o2.xy, v1, c8, c8.zwzw
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "GRAIN" "DITHERING" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[4], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					mad o1.zw, v1.xxxy, cb0[3].xxxy, cb0[3].zzzw
					mov o1.xy, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _MainTex_TexelSize;
					//   float3 _QualitySettings;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex_ST        c1       1
					//   _QualitySettings   c2       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c3, 0.0833333358, 0.5, -2, 3
					    def c4, 0.25, 1.5, 4, 8
					    def c5, 0, 1, -1, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0.xy, v0, c1, c1.zwzw
					    mov r0.z, c5.x
					    texldl r1, r0.xyzz, s0
					    mov r2.xyz, c5
					    mad r3.xyz, c0.yxyw, r2.yyxw, r0.yxyw
					    mov r0.w, r3.x
					    texldl r4, r0.xwzz, s0
					    mul r3, r3.yzyy, c5.yyxx
					    texldl r3, r3, s0
					    mad r3.xzw, c0.yyxy, r2.zyzx, r0.yyxy
					    mov r5.xzw, r0.xyzz
					    mov r5.y, r3.x
					    texldl r6, r5, s0
					    mul r7, r3.zwzz, c5.yyxx
					    texldl r7, r7, s0
					    max r0.z, r4.y, r1.y
					    min r0.w, r1.y, r4.y
					    max r2.w, r3.y, r0.z
					    min r4.x, r0.w, r3.y
					    max r0.z, r6.y, r7.y
					    min r0.w, r7.y, r6.y
					    max r3.x, r0.z, r2.w
					    min r2.w, r4.x, r0.w
					    mul r0.z, r3.x, c2.y
					    add r0.w, -r2.w, r3.x
					    max r2.w, c2.z, r0.z
					    if_lt r0.w, r2.w
					    else
					      add r8.xy, r0, -c0
					      mov r8.zw, c5.x
					      texldl r8, r8, s0
					      add r9.xy, r0, c0
					      mov r9.zw, c5.x
					      texldl r9, r9, s0
					      mad r10, c0.xyxy, r2.yzzy, r0.xyxy
					      mul r11, r10.xyxx, c5.yyxx
					      texldl r11, r11, s0
					      mul r10, r10.zwxx, c5.yyxx
					      texldl r10, r10, s0
					      add r0.z, r4.y, r6.y
					      add r2.y, r3.y, r7.y
					      rcp r0.w, r0.w
					      add r2.z, r0.z, r2.y
					      mad r0.z, r1.y, c5.w, r0.z
					      mad r2.y, r1.y, c5.w, r2.y
					      add r2.w, r9.y, r11.y
					      add r3.x, r8.y, r11.y
					      mad r3.z, r3.y, c5.w, r2.w
					      mad r3.x, r6.y, c5.w, r3.x
					      add r3.w, r8.y, r10.y
					      add r4.x, r9.y, r10.y
					      mad r0.z, r0_abs.z, -c5.w, r3_abs.z
					      mad r2.y, r2_abs.y, -c5.w, r3_abs.x
					      mad r3.x, r7.y, c5.w, r3.w
					      mad r3.z, r4.y, c5.w, r4.x
					      add r0.z, r0.z, r3_abs.x
					      add r2.y, r2.y, r3_abs.z
					      add r2.w, r2.w, r3.w
					      add r0.z, r0.z, -r2.y
					      mad r2.y, r2.z, -c5.w, r2.w
					      cmp r2.z, r0.z, r6.y, r7.y
					      cmp r2.w, r0.z, r4.y, r3.y
					      cmp r3.x, r0.z, c0.y, c0.x
					      mad r2.y, r2.y, c3.x, -r1.y
					      add r3.yz, -r1.y, r2.xzww
					      add r2.zw, r1.y, r2
					      add r3.w, -r3_abs.z, r3_abs.y
					      max r4.x, r3_abs.y, r3_abs.z
					      cmp r3.x, r3.w, -r3.x, r3.x
					      mul_sat r0.w, r0.w, r2_abs.y
					      cmp r2.y, r0.z, c0.x, r2.x
					      cmp r2.x, r0.z, r2.x, c0.y
					      mad r3.yz, r3.x, c3.y, r0.xxyw
					      cmp r3.y, r0.z, r5.x, r3.y
					      cmp r3.z, r0.z, r3.z, r0.y
					      add r6.xy, -r2.yxzw, r3.yzzw
					      add r7.xy, r2.yxzw, r3.yzzw
					      mad r3.y, r0.w, c3.z, c3.w
					      mov r6.zw, c5.x
					      texldl r8, r6, s0
					      mul r0.w, r0.w, r0.w
					      mov r7.zw, c5.x
					      texldl r9, r7, s0
					      cmp r2.z, r3.w, r2.z, r2.w
					      mul r2.w, r4.x, c4.x
					      mad r3.z, r2.z, -c3.y, r1.y
					      mul r0.w, r0.w, r3.y
					      mad r3.y, r2.z, -c3.y, r8.y
					      mad r3.w, r2.z, -c3.y, r9.y
					      mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					      add r4.w, -r2.y, r6.x
					      cmp r8.x, r4.y, r6.x, r4.w
					      add r4.w, -r2.x, r6.y
					      cmp r8.y, r4.y, r6.y, r4.w
					      cmp r5.yz, r4, c5.x, c5.y
					      add r4.w, r5.z, r5.y
					      add r5.y, r2.y, r7.x
					      cmp r6.x, r4.z, r7.x, r5.y
					      add r5.y, r2.x, r7.y
					      cmp r6.y, r4.z, r7.y, r5.y
					      if_lt -r4.w, c5.x
					        if_ge r3_abs.y, r2.w
					        else
					          mov r8.zw, c5.x
					          texldl r7, r8, s0
					          mov r3.y, r7.y
					        endif
					        if_ge r3_abs.w, r2.w
					        else
					          mov r6.zw, c5.x
					          texldl r7, r6, s0
					          mov r3.w, r7.y
					        endif
					        mad r4.w, r2.z, -c3.y, r3.y
					        cmp r3.y, r4.y, r3.y, r4.w
					        mad r4.y, r2.z, -c3.y, r3.w
					        cmp r3.w, r4.z, r3.w, r4.y
					        mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					        add r4.w, -r2.y, r8.x
					        cmp r8.x, r4.y, r8.x, r4.w
					        add r4.w, -r2.x, r8.y
					        cmp r8.y, r4.y, r8.y, r4.w
					        cmp r5.yz, r4, c5.x, c5.y
					        add r4.w, r5.z, r5.y
					        add r5.y, r2.y, r6.x
					        cmp r6.x, r4.z, r6.x, r5.y
					        add r5.y, r2.x, r6.y
					        cmp r6.y, r4.z, r6.y, r5.y
					        if_lt -r4.w, c5.x
					          if_ge r3_abs.y, r2.w
					          else
					            mov r8.zw, c5.x
					            texldl r7, r8, s0
					            mov r3.y, r7.y
					          endif
					          if_ge r3_abs.w, r2.w
					          else
					            mov r6.zw, c5.x
					            texldl r7, r6, s0
					            mov r3.w, r7.y
					          endif
					          mad r4.w, r2.z, -c3.y, r3.y
					          cmp r3.y, r4.y, r3.y, r4.w
					          mad r4.y, r2.z, -c3.y, r3.w
					          cmp r3.w, r4.z, r3.w, r4.y
					          mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					          add r4.w, -r2.y, r8.x
					          cmp r8.x, r4.y, r8.x, r4.w
					          add r4.w, -r2.x, r8.y
					          cmp r8.y, r4.y, r8.y, r4.w
					          cmp r5.yz, r4, c5.x, c5.y
					          add r4.w, r5.z, r5.y
					          add r5.y, r2.y, r6.x
					          cmp r6.x, r4.z, r6.x, r5.y
					          add r5.y, r2.x, r6.y
					          cmp r6.y, r4.z, r6.y, r5.y
					          if_lt -r4.w, c5.x
					            if_ge r3_abs.y, r2.w
					            else
					              mov r8.zw, c5.x
					              texldl r7, r8, s0
					              mov r3.y, r7.y
					            endif
					            if_ge r3_abs.w, r2.w
					            else
					              mov r6.zw, c5.x
					              texldl r7, r6, s0
					              mov r3.w, r7.y
					            endif
					            mad r4.w, r2.z, -c3.y, r3.y
					            cmp r3.y, r4.y, r3.y, r4.w
					            mad r4.y, r2.z, -c3.y, r3.w
					            cmp r3.w, r4.z, r3.w, r4.y
					            mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					            add r4.w, -r2.y, r8.x
					            cmp r8.x, r4.y, r8.x, r4.w
					            add r4.w, -r2.x, r8.y
					            cmp r8.y, r4.y, r8.y, r4.w
					            cmp r5.yz, r4, c5.x, c5.y
					            add r4.w, r5.z, r5.y
					            add r5.y, r2.y, r6.x
					            cmp r6.x, r4.z, r6.x, r5.y
					            add r5.y, r2.x, r6.y
					            cmp r6.y, r4.z, r6.y, r5.y
					            if_lt -r4.w, c5.x
					              if_ge r3_abs.y, r2.w
					              else
					                mov r8.zw, c5.x
					                texldl r7, r8, s0
					                mov r3.y, r7.y
					              endif
					              if_ge r3_abs.w, r2.w
					              else
					                mov r6.zw, c5.x
					                texldl r7, r6, s0
					                mov r3.w, r7.y
					              endif
					              mad r4.w, r2.z, -c3.y, r3.y
					              cmp r3.y, r4.y, r3.y, r4.w
					              mad r4.y, r2.z, -c3.y, r3.w
					              cmp r3.w, r4.z, r3.w, r4.y
					              mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					              mad r4.w, r2.y, -c4.y, r8.x
					              cmp r8.x, r4.y, r8.x, r4.w
					              mad r4.w, r2.x, -c4.y, r8.y
					              cmp r8.y, r4.y, r8.y, r4.w
					              cmp r5.yz, r4, c5.x, c5.y
					              add r4.w, r5.z, r5.y
					              mad r5.y, r2.y, c4.y, r6.x
					              cmp r6.x, r4.z, r6.x, r5.y
					              mad r5.y, r2.x, c4.y, r6.y
					              cmp r6.y, r4.z, r6.y, r5.y
					              if_lt -r4.w, c5.x
					                if_ge r3_abs.y, r2.w
					                else
					                  mov r8.zw, c5.x
					                  texldl r7, r8, s0
					                  mov r3.y, r7.y
					                endif
					                if_ge r3_abs.w, r2.w
					                else
					                  mov r6.zw, c5.x
					                  texldl r7, r6, s0
					                  mov r3.w, r7.y
					                endif
					                mad r4.w, r2.z, -c3.y, r3.y
					                cmp r3.y, r4.y, r3.y, r4.w
					                mad r4.y, r2.z, -c3.y, r3.w
					                cmp r3.w, r4.z, r3.w, r4.y
					                mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					                mad r4.w, r2.y, c5.w, r8.x
					                cmp r8.x, r4.y, r8.x, r4.w
					                mad r4.w, r2.x, c5.w, r8.y
					                cmp r8.y, r4.y, r8.y, r4.w
					                cmp r5.yz, r4, c5.x, c5.y
					                add r4.w, r5.z, r5.y
					                mad r5.y, r2.y, -c5.w, r6.x
					                cmp r6.x, r4.z, r6.x, r5.y
					                mad r5.y, r2.x, -c5.w, r6.y
					                cmp r6.y, r4.z, r6.y, r5.y
					                if_lt -r4.w, c5.x
					                  if_ge r3_abs.y, r2.w
					                  else
					                    mov r8.zw, c5.x
					                    texldl r7, r8, s0
					                    mov r3.y, r7.y
					                  endif
					                  if_ge r3_abs.w, r2.w
					                  else
					                    mov r6.zw, c5.x
					                    texldl r7, r6, s0
					                    mov r3.w, r7.y
					                  endif
					                  mad r4.w, r2.z, -c3.y, r3.y
					                  cmp r3.y, r4.y, r3.y, r4.w
					                  mad r4.y, r2.z, -c3.y, r3.w
					                  cmp r3.w, r4.z, r3.w, r4.y
					                  mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					                  mad r4.w, r2.y, c5.w, r8.x
					                  cmp r8.x, r4.y, r8.x, r4.w
					                  mad r4.w, r2.x, c5.w, r8.y
					                  cmp r8.y, r4.y, r8.y, r4.w
					                  cmp r5.yz, r4, c5.x, c5.y
					                  add r4.w, r5.z, r5.y
					                  mad r5.y, r2.y, -c5.w, r6.x
					                  cmp r6.x, r4.z, r6.x, r5.y
					                  mad r5.y, r2.x, -c5.w, r6.y
					                  cmp r6.y, r4.z, r6.y, r5.y
					                  if_lt -r4.w, c5.x
					                    if_ge r3_abs.y, r2.w
					                    else
					                      mov r8.zw, c5.x
					                      texldl r7, r8, s0
					                      mov r3.y, r7.y
					                    endif
					                    if_ge r3_abs.w, r2.w
					                    else
					                      mov r6.zw, c5.x
					                      texldl r7, r6, s0
					                      mov r3.w, r7.y
					                    endif
					                    mad r4.w, r2.z, -c3.y, r3.y
					                    cmp r3.y, r4.y, r3.y, r4.w
					                    mad r4.y, r2.z, -c3.y, r3.w
					                    cmp r3.w, r4.z, r3.w, r4.y
					                    mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					                    mad r4.w, r2.y, c5.w, r8.x
					                    cmp r8.x, r4.y, r8.x, r4.w
					                    mad r4.w, r2.x, c5.w, r8.y
					                    cmp r8.y, r4.y, r8.y, r4.w
					                    cmp r5.yz, r4, c5.x, c5.y
					                    add r4.w, r5.z, r5.y
					                    mad r5.y, r2.y, -c5.w, r6.x
					                    cmp r6.x, r4.z, r6.x, r5.y
					                    mad r5.y, r2.x, -c5.w, r6.y
					                    cmp r6.y, r4.z, r6.y, r5.y
					                    if_lt -r4.w, c5.x
					                      if_ge r3_abs.y, r2.w
					                      else
					                        mov r8.zw, c5.x
					                        texldl r7, r8, s0
					                        mov r3.y, r7.y
					                      endif
					                      if_ge r3_abs.w, r2.w
					                      else
					                        mov r6.zw, c5.x
					                        texldl r7, r6, s0
					                        mov r3.w, r7.y
					                      endif
					                      mad r4.w, r2.z, -c3.y, r3.y
					                      cmp r3.y, r4.y, r3.y, r4.w
					                      mad r4.y, r2.z, -c3.y, r3.w
					                      cmp r3.w, r4.z, r3.w, r4.y
					                      mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					                      mad r4.w, r2.y, c5.w, r8.x
					                      cmp r8.x, r4.y, r8.x, r4.w
					                      mad r4.w, r2.x, c5.w, r8.y
					                      cmp r8.y, r4.y, r8.y, r4.w
					                      cmp r5.yz, r4, c5.x, c5.y
					                      add r4.w, r5.z, r5.y
					                      mad r5.y, r2.y, -c5.w, r6.x
					                      cmp r6.x, r4.z, r6.x, r5.y
					                      mad r5.y, r2.x, -c5.w, r6.y
					                      cmp r6.y, r4.z, r6.y, r5.y
					                      if_lt -r4.w, c5.x
					                        if_ge r3_abs.y, r2.w
					                        else
					                          mov r8.zw, c5.x
					                          texldl r7, r8, s0
					                          mov r3.y, r7.y
					                        endif
					                        if_ge r3_abs.w, r2.w
					                        else
					                          mov r6.zw, c5.x
					                          texldl r7, r6, s0
					                          mov r3.w, r7.y
					                        endif
					                        mad r4.w, r2.z, -c3.y, r3.y
					                        cmp r3.y, r4.y, r3.y, r4.w
					                        mad r4.y, r2.z, -c3.y, r3.w
					                        cmp r3.w, r4.z, r3.w, r4.y
					                        mad r4.yz, r4.x, -c4.x, r3_abs.xyww
					                        mad r4.w, r2.y, -c4.z, r8.x
					                        cmp r8.x, r4.y, r8.x, r4.w
					                        mad r4.w, r2.x, -c4.z, r8.y
					                        cmp r8.y, r4.y, r8.y, r4.w
					                        cmp r5.yz, r4, c5.x, c5.y
					                        add r4.w, r5.z, r5.y
					                        mad r5.y, r2.y, c4.z, r6.x
					                        cmp r6.x, r4.z, r6.x, r5.y
					                        mad r5.y, r2.x, c4.z, r6.y
					                        cmp r6.y, r4.z, r6.y, r5.y
					                        if_lt -r4.w, c5.x
					                          if_ge r3_abs.y, r2.w
					                          else
					                            mov r8.zw, c5.x
					                            texldl r7, r8, s0
					                            mov r3.y, r7.y
					                          endif
					                          if_ge r3_abs.w, r2.w
					                          else
					                            mov r6.zw, c5.x
					                            texldl r7, r6, s0
					                            mov r3.w, r7.y
					                          endif
					                          mad r2.w, r2.z, -c3.y, r3.y
					                          mad r2.z, r2.z, -c3.y, r3.w
					                          cmp r3.yw, r4.xyzz, r3, r2.xwzz
					                          mad r2.zw, r4.x, -c4.x, r3_abs.xyyw
					                          mad r4.x, r2.y, -c4.w, r8.x
					                          cmp r8.x, r2.z, r8.x, r4.x
					                          mad r4.x, r2.x, -c4.w, r8.y
					                          cmp r8.y, r2.z, r8.y, r4.x
					                          mad r2.y, r2.y, c4.w, r6.x
					                          mad r2.x, r2.x, c4.w, r6.y
					                          cmp r6.xy, r2.w, r6, r2.yxzw
					                        endif
					                      endif
					                    endif
					                  endif
					                endif
					              endif
					            endif
					          endif
					        endif
					      endif
					      add r2.x, r5.x, -r8.x
					      add r2.z, r0.y, -r8.y
					      cmp r2.x, r0.z, r2.x, r2.z
					      add r2.yz, -r0.xxyw, r6.xxyw
					      cmp r2.y, r0.z, r2.y, r2.z
					      cmp r2.zw, r3.xyyw, c5.x, c5.y
					      cmp r3.y, r3.z, -c5.x, -c5.y
					      add r2.zw, r2, r3.y
					      add r3.y, r2.x, r2.y
					      rcp r3.y, r3.y
					      add r3.z, -r2.y, r2.x
					      min r3.w, r2.y, r2.x
					      cmp r2.x, r3.z, r2_abs.w, r2_abs.z
					      mul r0.w, r0.w, r0.w
					      mad r2.y, r3.w, -r3.y, c3.y
					      mul r0.w, r0.w, c2.x
					      cmp r2.x, -r2.x, c5.x, r2.y
					      max r3.y, r2.x, r0.w
					      mad r0.xw, r3.y, r3.x, r0.xyzy
					      cmp r2.x, r0.z, r5.x, r0.x
					      cmp r2.y, r0.z, r0.w, r0.y
					      mov r2.zw, c5.x
					      texldl r1, r2, s0
					    endif
					    mov_pp oC0.xyz, r1
					    mov_pp oC0.w, c5.y
					
					// approximately 506 instruction slots used (64 texture, 442 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 10
					mad r0.xy, v1.xyxx, cb0[3].xyxx, cb0[3].zwzz
					sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
					mad r2.xyzw, cb0[2].xyxy, l(0.000000, 1.000000, 1.000000, 0.000000), r0.xyxy
					sample_l r3.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r2.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
					mad r4.xyzw, cb0[2].xyxy, l(0.000000, -1.000000, -1.000000, 0.000000), r0.xyxy
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					max r0.z, r1.y, r3.y
					min r0.w, r1.y, r3.y
					max r0.z, r0.z, r2.y
					min r0.w, r0.w, r2.y
					max r2.x, r4.y, r5.y
					min r2.z, r4.y, r5.y
					max r0.z, r0.z, r2.x
					min r0.w, r0.w, r2.z
					mul r2.x, r0.z, cb0[7].y
					add r0.z, -r0.w, r0.z
					max r0.w, r2.x, cb0[7].z
					ge r0.w, r0.z, r0.w
					if_nz r0.w
					  add r2.xz, r0.xxyx, -cb0[2].xxyx
					  sample_l r6.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  add r2.xz, r0.xxyx, cb0[2].xxyx
					  sample_l r7.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  mad r8.xyzw, cb0[2].xyxy, l(1.000000, -1.000000, -1.000000, 1.000000), r0.xyxy
					  sample_l r9.xyzw, r8.xyxx, t0.xyzw, s0, l(0.000000)
					  sample_l r8.xyzw, r8.zwzz, t0.xyzw, s0, l(0.000000)
					  add r0.w, r3.y, r5.y
					  add r2.x, r2.y, r4.y
					  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					  add r2.z, r0.w, r2.x
					  mad r0.w, r1.y, l(-2.000000), r0.w
					  mad r2.x, r1.y, l(-2.000000), r2.x
					  add r2.w, r7.y, r9.y
					  add r3.x, r6.y, r9.y
					  mad r3.z, r2.y, l(-2.000000), r2.w
					  mad r3.x, r5.y, l(-2.000000), r3.x
					  add r3.w, r6.y, r8.y
					  add r4.x, r7.y, r8.y
					  mad r0.w, |r0.w|, l(2.000000), |r3.z|
					  mad r2.x, |r2.x|, l(2.000000), |r3.x|
					  mad r3.x, r4.y, l(-2.000000), r3.w
					  mad r3.z, r3.y, l(-2.000000), r4.x
					  add r0.w, r0.w, |r3.x|
					  add r2.x, r2.x, |r3.z|
					  add r2.w, r2.w, r3.w
					  ge r0.w, r0.w, r2.x
					  mad r2.x, r2.z, l(2.000000), r2.w
					  movc r2.z, r0.w, r5.y, r4.y
					  movc r2.y, r0.w, r3.y, r2.y
					  movc r2.w, r0.w, cb0[2].y, cb0[2].x
					  mad r2.x, r2.x, l(0.083333), -r1.y
					  add r3.xy, -r1.yyyy, r2.zyzz
					  add r2.yz, r1.yyyy, r2.yyzy
					  ge r3.z, |r3.x|, |r3.y|
					  max r3.x, |r3.y|, |r3.x|
					  movc r2.w, r3.z, -r2.w, r2.w
					  mul_sat r0.z, r0.z, |r2.x|
					  and r2.x, r0.w, cb0[2].x
					  movc r3.y, r0.w, l(0), cb0[2].y
					  mad r4.xy, r2.wwww, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
					  movc r3.w, r0.w, r0.x, r4.x
					  movc r4.x, r0.w, r4.y, r0.y
					  add r5.x, -r2.x, r3.w
					  add r5.y, -r3.y, r4.x
					  add r6.x, r2.x, r3.w
					  add r6.y, r3.y, r4.x
					  mad r3.w, r0.z, l(-2.000000), l(3.000000)
					  sample_l r4.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)
					  mul r0.z, r0.z, r0.z
					  sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, l(0.000000)
					  movc r2.y, r3.z, r2.z, r2.y
					  mul r2.z, r3.x, l(0.250000)
					  mad r3.x, -r2.y, l(0.500000), r1.y
					  mul r0.z, r0.z, r3.w
					  lt r3.x, r3.x, l(0.000000)
					  mad r4.y, -r2.y, l(0.500000), r4.y
					  mad r4.x, -r2.y, l(0.500000), r7.y
					  ge r3.zw, |r4.yyyx|, r2.zzzz
					  add r5.z, -r2.x, r5.x
					  movc r5.x, r3.z, r5.x, r5.z
					  add r5.w, -r3.y, r5.y
					  movc r5.z, r3.z, r5.y, r5.w
					  not r5.yw, r3.zzzw
					  or r5.y, r5.w, r5.y
					  add r5.w, r2.x, r6.x
					  movc r6.x, r3.w, r6.x, r5.w
					  add r5.w, r3.y, r6.y
					  movc r6.z, r3.w, r6.y, r5.w
					  if_nz r5.y
					    if_z r3.z
					      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					    else 
					      mov r7.x, r4.y
					    endif 
					    if_z r3.w
					      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					    endif 
					    mad r5.y, -r2.y, l(0.500000), r7.x
					    movc r4.y, r3.z, r7.x, r5.y
					    mad r3.z, -r2.y, l(0.500000), r4.x
					    movc r4.x, r3.w, r4.x, r3.z
					    ge r3.zw, |r4.yyyx|, r2.zzzz
					    add r5.y, -r2.x, r5.x
					    movc r5.x, r3.z, r5.x, r5.y
					    add r5.y, -r3.y, r5.z
					    movc r5.z, r3.z, r5.z, r5.y
					    not r5.yw, r3.zzzw
					    or r5.y, r5.w, r5.y
					    add r5.w, r2.x, r6.x
					    movc r6.x, r3.w, r6.x, r5.w
					    add r5.w, r3.y, r6.z
					    movc r6.z, r3.w, r6.z, r5.w
					    if_nz r5.y
					      if_z r3.z
					        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					      else 
					        mov r7.x, r4.y
					      endif 
					      if_z r3.w
					        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					      endif 
					      mad r5.y, -r2.y, l(0.500000), r7.x
					      movc r4.y, r3.z, r7.x, r5.y
					      mad r3.z, -r2.y, l(0.500000), r4.x
					      movc r4.x, r3.w, r4.x, r3.z
					      ge r3.zw, |r4.yyyx|, r2.zzzz
					      add r5.y, -r2.x, r5.x
					      movc r5.x, r3.z, r5.x, r5.y
					      add r5.y, -r3.y, r5.z
					      movc r5.z, r3.z, r5.z, r5.y
					      not r5.yw, r3.zzzw
					      or r5.y, r5.w, r5.y
					      add r5.w, r2.x, r6.x
					      movc r6.x, r3.w, r6.x, r5.w
					      add r5.w, r3.y, r6.z
					      movc r6.z, r3.w, r6.z, r5.w
					      if_nz r5.y
					        if_z r3.z
					          sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					        else 
					          mov r7.x, r4.y
					        endif 
					        if_z r3.w
					          sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					        endif 
					        mad r5.y, -r2.y, l(0.500000), r7.x
					        movc r4.y, r3.z, r7.x, r5.y
					        mad r3.z, -r2.y, l(0.500000), r4.x
					        movc r4.x, r3.w, r4.x, r3.z
					        ge r3.zw, |r4.yyyx|, r2.zzzz
					        add r5.y, -r2.x, r5.x
					        movc r5.x, r3.z, r5.x, r5.y
					        add r5.y, -r3.y, r5.z
					        movc r5.z, r3.z, r5.z, r5.y
					        not r5.yw, r3.zzzw
					        or r5.y, r5.w, r5.y
					        add r5.w, r2.x, r6.x
					        movc r6.x, r3.w, r6.x, r5.w
					        add r5.w, r3.y, r6.z
					        movc r6.z, r3.w, r6.z, r5.w
					        if_nz r5.y
					          if_z r3.z
					            sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					          else 
					            mov r7.x, r4.y
					          endif 
					          if_z r3.w
					            sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					          endif 
					          mad r5.y, -r2.y, l(0.500000), r7.x
					          movc r4.y, r3.z, r7.x, r5.y
					          mad r3.z, -r2.y, l(0.500000), r4.x
					          movc r4.x, r3.w, r4.x, r3.z
					          ge r3.zw, |r4.yyyx|, r2.zzzz
					          mad r5.y, -r2.x, l(1.500000), r5.x
					          movc r5.x, r3.z, r5.x, r5.y
					          mad r5.y, -r3.y, l(1.500000), r5.z
					          movc r5.z, r3.z, r5.z, r5.y
					          not r5.yw, r3.zzzw
					          or r5.y, r5.w, r5.y
					          mad r5.w, r2.x, l(1.500000), r6.x
					          movc r6.x, r3.w, r6.x, r5.w
					          mad r5.w, r3.y, l(1.500000), r6.z
					          movc r6.z, r3.w, r6.z, r5.w
					          if_nz r5.y
					            if_z r3.z
					              sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					            else 
					              mov r7.x, r4.y
					            endif 
					            if_z r3.w
					              sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					            endif 
					            mad r5.y, -r2.y, l(0.500000), r7.x
					            movc r4.y, r3.z, r7.x, r5.y
					            mad r3.z, -r2.y, l(0.500000), r4.x
					            movc r4.x, r3.w, r4.x, r3.z
					            ge r3.zw, |r4.yyyx|, r2.zzzz
					            mad r5.y, -r2.x, l(2.000000), r5.x
					            movc r5.x, r3.z, r5.x, r5.y
					            mad r5.y, -r3.y, l(2.000000), r5.z
					            movc r5.z, r3.z, r5.z, r5.y
					            not r5.yw, r3.zzzw
					            or r5.y, r5.w, r5.y
					            mad r5.w, r2.x, l(2.000000), r6.x
					            movc r6.x, r3.w, r6.x, r5.w
					            mad r5.w, r3.y, l(2.000000), r6.z
					            movc r6.z, r3.w, r6.z, r5.w
					            if_nz r5.y
					              if_z r3.z
					                sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					              else 
					                mov r7.x, r4.y
					              endif 
					              if_z r3.w
					                sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					              endif 
					              mad r5.y, -r2.y, l(0.500000), r7.x
					              movc r4.y, r3.z, r7.x, r5.y
					              mad r3.z, -r2.y, l(0.500000), r4.x
					              movc r4.x, r3.w, r4.x, r3.z
					              ge r3.zw, |r4.yyyx|, r2.zzzz
					              mad r5.y, -r2.x, l(2.000000), r5.x
					              movc r5.x, r3.z, r5.x, r5.y
					              mad r5.y, -r3.y, l(2.000000), r5.z
					              movc r5.z, r3.z, r5.z, r5.y
					              not r5.yw, r3.zzzw
					              or r5.y, r5.w, r5.y
					              mad r5.w, r2.x, l(2.000000), r6.x
					              movc r6.x, r3.w, r6.x, r5.w
					              mad r5.w, r3.y, l(2.000000), r6.z
					              movc r6.z, r3.w, r6.z, r5.w
					              if_nz r5.y
					                if_z r3.z
					                  sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                else 
					                  mov r7.x, r4.y
					                endif 
					                if_z r3.w
					                  sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                endif 
					                mad r5.y, -r2.y, l(0.500000), r7.x
					                movc r4.y, r3.z, r7.x, r5.y
					                mad r3.z, -r2.y, l(0.500000), r4.x
					                movc r4.x, r3.w, r4.x, r3.z
					                ge r3.zw, |r4.yyyx|, r2.zzzz
					                mad r5.y, -r2.x, l(2.000000), r5.x
					                movc r5.x, r3.z, r5.x, r5.y
					                mad r5.y, -r3.y, l(2.000000), r5.z
					                movc r5.z, r3.z, r5.z, r5.y
					                not r5.yw, r3.zzzw
					                or r5.y, r5.w, r5.y
					                mad r5.w, r2.x, l(2.000000), r6.x
					                movc r6.x, r3.w, r6.x, r5.w
					                mad r5.w, r3.y, l(2.000000), r6.z
					                movc r6.z, r3.w, r6.z, r5.w
					                if_nz r5.y
					                  if_z r3.z
					                    sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                  else 
					                    mov r7.x, r4.y
					                  endif 
					                  if_z r3.w
					                    sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                  endif 
					                  mad r5.y, -r2.y, l(0.500000), r7.x
					                  movc r4.y, r3.z, r7.x, r5.y
					                  mad r3.z, -r2.y, l(0.500000), r4.x
					                  movc r4.x, r3.w, r4.x, r3.z
					                  ge r3.zw, |r4.yyyx|, r2.zzzz
					                  mad r5.y, -r2.x, l(2.000000), r5.x
					                  movc r5.x, r3.z, r5.x, r5.y
					                  mad r5.y, -r3.y, l(2.000000), r5.z
					                  movc r5.z, r3.z, r5.z, r5.y
					                  not r5.yw, r3.zzzw
					                  or r5.y, r5.w, r5.y
					                  mad r5.w, r2.x, l(2.000000), r6.x
					                  movc r6.x, r3.w, r6.x, r5.w
					                  mad r5.w, r3.y, l(2.000000), r6.z
					                  movc r6.z, r3.w, r6.z, r5.w
					                  if_nz r5.y
					                    if_z r3.z
					                      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                    else 
					                      mov r7.x, r4.y
					                    endif 
					                    if_z r3.w
					                      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                    endif 
					                    mad r5.y, -r2.y, l(0.500000), r7.x
					                    movc r4.y, r3.z, r7.x, r5.y
					                    mad r3.z, -r2.y, l(0.500000), r4.x
					                    movc r4.x, r3.w, r4.x, r3.z
					                    ge r3.zw, |r4.yyyx|, r2.zzzz
					                    mad r5.y, -r2.x, l(4.000000), r5.x
					                    movc r5.x, r3.z, r5.x, r5.y
					                    mad r5.y, -r3.y, l(4.000000), r5.z
					                    movc r5.z, r3.z, r5.z, r5.y
					                    not r5.yw, r3.zzzw
					                    or r5.y, r5.w, r5.y
					                    mad r5.w, r2.x, l(4.000000), r6.x
					                    movc r6.x, r3.w, r6.x, r5.w
					                    mad r5.w, r3.y, l(4.000000), r6.z
					                    movc r6.z, r3.w, r6.z, r5.w
					                    if_nz r5.y
					                      if_z r3.z
					                        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                      else 
					                        mov r7.x, r4.y
					                      endif 
					                      if_z r3.w
					                        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                      endif 
					                      mad r4.z, -r2.y, l(0.500000), r7.x
					                      movc r4.y, r3.z, r7.x, r4.z
					                      mad r2.y, -r2.y, l(0.500000), r4.x
					                      movc r4.x, r3.w, r4.x, r2.y
					                      ge r2.yz, |r4.yyxy|, r2.zzzz
					                      mad r3.z, -r2.x, l(8.000000), r5.x
					                      movc r5.x, r2.y, r5.x, r3.z
					                      mad r3.z, -r3.y, l(8.000000), r5.z
					                      movc r5.z, r2.y, r5.z, r3.z
					                      mad r2.x, r2.x, l(8.000000), r6.x
					                      movc r6.x, r2.z, r6.x, r2.x
					                      mad r2.x, r3.y, l(8.000000), r6.z
					                      movc r6.z, r2.z, r6.z, r2.x
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					  add r2.xz, r0.xxyx, -r5.xxzx
					  movc r2.x, r0.w, r2.x, r2.z
					  add r2.yz, -r0.xxyx, r6.xxzx
					  movc r2.y, r0.w, r2.y, r2.z
					  lt r3.yz, r4.yyxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  add r2.z, r2.x, r2.y
					  ine r3.xy, r3.xxxx, r3.yzyy
					  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					  lt r3.z, r2.x, r2.y
					  min r2.x, r2.y, r2.x
					  movc r2.y, r3.z, r3.x, r3.y
					  mul r0.z, r0.z, r0.z
					  mad r2.x, r2.x, -r2.z, l(0.500000)
					  mul r0.z, r0.z, cb0[7].x
					  and r2.x, r2.x, r2.y
					  max r0.z, r0.z, r2.x
					  mad r2.xy, r0.zzzz, r2.wwww, r0.xyxx
					  movc r3.x, r0.w, r0.x, r2.x
					  movc r3.y, r0.w, r2.y, r0.y
					  sample_l r1.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					endif 
					mov o0.xyz, r1.xyzx
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "DITHERING" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DitheringCoords;
					//   sampler2D _DitheringTex;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _MainTex_TexelSize;
					//   float3 _QualitySettings;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex_ST        c1       1
					//   _DitheringCoords   c2       1
					//   _QualitySettings   c3       1
					//   _MainTex           s0       1
					//   _DitheringTex      s1       1
					//
					
					    ps_3_0
					    def c4, 0.0833333358, 0.5, -2, 3
					    def c5, 0.25, 1.5, 4, 8
					    def c6, 0.00392156886, 0, 0, 0
					    def c7, 0, 1, -1, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v0, c1, c1.zwzw
					    mov r0.z, c7.x
					    texldl r1, r0.xyzz, s0
					    mov r2.xyz, c7
					    mad r3.xyz, c0.yxyw, r2.yyxw, r0.yxyw
					    mov r0.w, r3.x
					    texldl r4, r0.xwzz, s0
					    mul r3, r3.yzyy, c7.yyxx
					    texldl r3, r3, s0
					    mad r3.xzw, c0.yyxy, r2.zyzx, r0.yyxy
					    mov r5.xzw, r0.xyzz
					    mov r5.y, r3.x
					    texldl r6, r5, s0
					    mul r7, r3.zwzz, c7.yyxx
					    texldl r7, r7, s0
					    max r0.z, r4.y, r1.y
					    min r0.w, r1.y, r4.y
					    max r2.w, r3.y, r0.z
					    min r4.x, r0.w, r3.y
					    max r0.z, r6.y, r7.y
					    min r0.w, r7.y, r6.y
					    max r3.x, r0.z, r2.w
					    min r2.w, r4.x, r0.w
					    mul r0.z, r3.x, c3.y
					    add r0.w, -r2.w, r3.x
					    max r2.w, c3.z, r0.z
					    if_lt r0.w, r2.w
					    else
					      add r8.xy, r0, -c0
					      mov r8.zw, c7.x
					      texldl r8, r8, s0
					      add r9.xy, r0, c0
					      mov r9.zw, c7.x
					      texldl r9, r9, s0
					      mad r10, c0.xyxy, r2.yzzy, r0.xyxy
					      mul r11, r10.xyxx, c7.yyxx
					      texldl r11, r11, s0
					      mul r10, r10.zwxx, c7.yyxx
					      texldl r10, r10, s0
					      add r0.z, r4.y, r6.y
					      add r2.y, r3.y, r7.y
					      rcp r0.w, r0.w
					      add r2.z, r0.z, r2.y
					      mad r0.z, r1.y, c7.w, r0.z
					      mad r2.y, r1.y, c7.w, r2.y
					      add r2.w, r9.y, r11.y
					      add r3.x, r8.y, r11.y
					      mad r3.z, r3.y, c7.w, r2.w
					      mad r3.x, r6.y, c7.w, r3.x
					      add r3.w, r8.y, r10.y
					      add r4.x, r9.y, r10.y
					      mad r0.z, r0_abs.z, -c7.w, r3_abs.z
					      mad r2.y, r2_abs.y, -c7.w, r3_abs.x
					      mad r3.x, r7.y, c7.w, r3.w
					      mad r3.z, r4.y, c7.w, r4.x
					      add r0.z, r0.z, r3_abs.x
					      add r2.y, r2.y, r3_abs.z
					      add r2.w, r2.w, r3.w
					      add r0.z, r0.z, -r2.y
					      mad r2.y, r2.z, -c7.w, r2.w
					      cmp r2.z, r0.z, r6.y, r7.y
					      cmp r2.w, r0.z, r4.y, r3.y
					      cmp r3.x, r0.z, c0.y, c0.x
					      mad r2.y, r2.y, c4.x, -r1.y
					      add r3.yz, -r1.y, r2.xzww
					      add r2.zw, r1.y, r2
					      add r3.w, -r3_abs.z, r3_abs.y
					      max r4.x, r3_abs.y, r3_abs.z
					      cmp r3.x, r3.w, -r3.x, r3.x
					      mul_sat r0.w, r0.w, r2_abs.y
					      cmp r2.y, r0.z, c0.x, r2.x
					      cmp r2.x, r0.z, r2.x, c0.y
					      mad r3.yz, r3.x, c4.y, r0.xxyw
					      cmp r3.y, r0.z, r5.x, r3.y
					      cmp r3.z, r0.z, r3.z, r0.y
					      add r6.xy, -r2.yxzw, r3.yzzw
					      add r7.xy, r2.yxzw, r3.yzzw
					      mad r3.y, r0.w, c4.z, c4.w
					      mov r6.zw, c7.x
					      texldl r8, r6, s0
					      mul r0.w, r0.w, r0.w
					      mov r7.zw, c7.x
					      texldl r9, r7, s0
					      cmp r2.z, r3.w, r2.z, r2.w
					      mul r2.w, r4.x, c5.x
					      mad r3.z, r2.z, -c4.y, r1.y
					      mul r0.w, r0.w, r3.y
					      mad r3.y, r2.z, -c4.y, r8.y
					      mad r3.w, r2.z, -c4.y, r9.y
					      mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					      add r4.w, -r2.y, r6.x
					      cmp r8.x, r4.y, r6.x, r4.w
					      add r4.w, -r2.x, r6.y
					      cmp r8.y, r4.y, r6.y, r4.w
					      cmp r5.yz, r4, c7.x, c7.y
					      add r4.w, r5.z, r5.y
					      add r5.y, r2.y, r7.x
					      cmp r6.x, r4.z, r7.x, r5.y
					      add r5.y, r2.x, r7.y
					      cmp r6.y, r4.z, r7.y, r5.y
					      if_lt -r4.w, c7.x
					        if_ge r3_abs.y, r2.w
					        else
					          mov r8.zw, c7.x
					          texldl r7, r8, s0
					          mov r3.y, r7.y
					        endif
					        if_ge r3_abs.w, r2.w
					        else
					          mov r6.zw, c7.x
					          texldl r7, r6, s0
					          mov r3.w, r7.y
					        endif
					        mad r4.w, r2.z, -c4.y, r3.y
					        cmp r3.y, r4.y, r3.y, r4.w
					        mad r4.y, r2.z, -c4.y, r3.w
					        cmp r3.w, r4.z, r3.w, r4.y
					        mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					        add r4.w, -r2.y, r8.x
					        cmp r8.x, r4.y, r8.x, r4.w
					        add r4.w, -r2.x, r8.y
					        cmp r8.y, r4.y, r8.y, r4.w
					        cmp r5.yz, r4, c7.x, c7.y
					        add r4.w, r5.z, r5.y
					        add r5.y, r2.y, r6.x
					        cmp r6.x, r4.z, r6.x, r5.y
					        add r5.y, r2.x, r6.y
					        cmp r6.y, r4.z, r6.y, r5.y
					        if_lt -r4.w, c7.x
					          if_ge r3_abs.y, r2.w
					          else
					            mov r8.zw, c7.x
					            texldl r7, r8, s0
					            mov r3.y, r7.y
					          endif
					          if_ge r3_abs.w, r2.w
					          else
					            mov r6.zw, c7.x
					            texldl r7, r6, s0
					            mov r3.w, r7.y
					          endif
					          mad r4.w, r2.z, -c4.y, r3.y
					          cmp r3.y, r4.y, r3.y, r4.w
					          mad r4.y, r2.z, -c4.y, r3.w
					          cmp r3.w, r4.z, r3.w, r4.y
					          mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					          add r4.w, -r2.y, r8.x
					          cmp r8.x, r4.y, r8.x, r4.w
					          add r4.w, -r2.x, r8.y
					          cmp r8.y, r4.y, r8.y, r4.w
					          cmp r5.yz, r4, c7.x, c7.y
					          add r4.w, r5.z, r5.y
					          add r5.y, r2.y, r6.x
					          cmp r6.x, r4.z, r6.x, r5.y
					          add r5.y, r2.x, r6.y
					          cmp r6.y, r4.z, r6.y, r5.y
					          if_lt -r4.w, c7.x
					            if_ge r3_abs.y, r2.w
					            else
					              mov r8.zw, c7.x
					              texldl r7, r8, s0
					              mov r3.y, r7.y
					            endif
					            if_ge r3_abs.w, r2.w
					            else
					              mov r6.zw, c7.x
					              texldl r7, r6, s0
					              mov r3.w, r7.y
					            endif
					            mad r4.w, r2.z, -c4.y, r3.y
					            cmp r3.y, r4.y, r3.y, r4.w
					            mad r4.y, r2.z, -c4.y, r3.w
					            cmp r3.w, r4.z, r3.w, r4.y
					            mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					            add r4.w, -r2.y, r8.x
					            cmp r8.x, r4.y, r8.x, r4.w
					            add r4.w, -r2.x, r8.y
					            cmp r8.y, r4.y, r8.y, r4.w
					            cmp r5.yz, r4, c7.x, c7.y
					            add r4.w, r5.z, r5.y
					            add r5.y, r2.y, r6.x
					            cmp r6.x, r4.z, r6.x, r5.y
					            add r5.y, r2.x, r6.y
					            cmp r6.y, r4.z, r6.y, r5.y
					            if_lt -r4.w, c7.x
					              if_ge r3_abs.y, r2.w
					              else
					                mov r8.zw, c7.x
					                texldl r7, r8, s0
					                mov r3.y, r7.y
					              endif
					              if_ge r3_abs.w, r2.w
					              else
					                mov r6.zw, c7.x
					                texldl r7, r6, s0
					                mov r3.w, r7.y
					              endif
					              mad r4.w, r2.z, -c4.y, r3.y
					              cmp r3.y, r4.y, r3.y, r4.w
					              mad r4.y, r2.z, -c4.y, r3.w
					              cmp r3.w, r4.z, r3.w, r4.y
					              mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					              mad r4.w, r2.y, -c5.y, r8.x
					              cmp r8.x, r4.y, r8.x, r4.w
					              mad r4.w, r2.x, -c5.y, r8.y
					              cmp r8.y, r4.y, r8.y, r4.w
					              cmp r5.yz, r4, c7.x, c7.y
					              add r4.w, r5.z, r5.y
					              mad r5.y, r2.y, c5.y, r6.x
					              cmp r6.x, r4.z, r6.x, r5.y
					              mad r5.y, r2.x, c5.y, r6.y
					              cmp r6.y, r4.z, r6.y, r5.y
					              if_lt -r4.w, c7.x
					                if_ge r3_abs.y, r2.w
					                else
					                  mov r8.zw, c7.x
					                  texldl r7, r8, s0
					                  mov r3.y, r7.y
					                endif
					                if_ge r3_abs.w, r2.w
					                else
					                  mov r6.zw, c7.x
					                  texldl r7, r6, s0
					                  mov r3.w, r7.y
					                endif
					                mad r4.w, r2.z, -c4.y, r3.y
					                cmp r3.y, r4.y, r3.y, r4.w
					                mad r4.y, r2.z, -c4.y, r3.w
					                cmp r3.w, r4.z, r3.w, r4.y
					                mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					                mad r4.w, r2.y, c7.w, r8.x
					                cmp r8.x, r4.y, r8.x, r4.w
					                mad r4.w, r2.x, c7.w, r8.y
					                cmp r8.y, r4.y, r8.y, r4.w
					                cmp r5.yz, r4, c7.x, c7.y
					                add r4.w, r5.z, r5.y
					                mad r5.y, r2.y, -c7.w, r6.x
					                cmp r6.x, r4.z, r6.x, r5.y
					                mad r5.y, r2.x, -c7.w, r6.y
					                cmp r6.y, r4.z, r6.y, r5.y
					                if_lt -r4.w, c7.x
					                  if_ge r3_abs.y, r2.w
					                  else
					                    mov r8.zw, c7.x
					                    texldl r7, r8, s0
					                    mov r3.y, r7.y
					                  endif
					                  if_ge r3_abs.w, r2.w
					                  else
					                    mov r6.zw, c7.x
					                    texldl r7, r6, s0
					                    mov r3.w, r7.y
					                  endif
					                  mad r4.w, r2.z, -c4.y, r3.y
					                  cmp r3.y, r4.y, r3.y, r4.w
					                  mad r4.y, r2.z, -c4.y, r3.w
					                  cmp r3.w, r4.z, r3.w, r4.y
					                  mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					                  mad r4.w, r2.y, c7.w, r8.x
					                  cmp r8.x, r4.y, r8.x, r4.w
					                  mad r4.w, r2.x, c7.w, r8.y
					                  cmp r8.y, r4.y, r8.y, r4.w
					                  cmp r5.yz, r4, c7.x, c7.y
					                  add r4.w, r5.z, r5.y
					                  mad r5.y, r2.y, -c7.w, r6.x
					                  cmp r6.x, r4.z, r6.x, r5.y
					                  mad r5.y, r2.x, -c7.w, r6.y
					                  cmp r6.y, r4.z, r6.y, r5.y
					                  if_lt -r4.w, c7.x
					                    if_ge r3_abs.y, r2.w
					                    else
					                      mov r8.zw, c7.x
					                      texldl r7, r8, s0
					                      mov r3.y, r7.y
					                    endif
					                    if_ge r3_abs.w, r2.w
					                    else
					                      mov r6.zw, c7.x
					                      texldl r7, r6, s0
					                      mov r3.w, r7.y
					                    endif
					                    mad r4.w, r2.z, -c4.y, r3.y
					                    cmp r3.y, r4.y, r3.y, r4.w
					                    mad r4.y, r2.z, -c4.y, r3.w
					                    cmp r3.w, r4.z, r3.w, r4.y
					                    mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					                    mad r4.w, r2.y, c7.w, r8.x
					                    cmp r8.x, r4.y, r8.x, r4.w
					                    mad r4.w, r2.x, c7.w, r8.y
					                    cmp r8.y, r4.y, r8.y, r4.w
					                    cmp r5.yz, r4, c7.x, c7.y
					                    add r4.w, r5.z, r5.y
					                    mad r5.y, r2.y, -c7.w, r6.x
					                    cmp r6.x, r4.z, r6.x, r5.y
					                    mad r5.y, r2.x, -c7.w, r6.y
					                    cmp r6.y, r4.z, r6.y, r5.y
					                    if_lt -r4.w, c7.x
					                      if_ge r3_abs.y, r2.w
					                      else
					                        mov r8.zw, c7.x
					                        texldl r7, r8, s0
					                        mov r3.y, r7.y
					                      endif
					                      if_ge r3_abs.w, r2.w
					                      else
					                        mov r6.zw, c7.x
					                        texldl r7, r6, s0
					                        mov r3.w, r7.y
					                      endif
					                      mad r4.w, r2.z, -c4.y, r3.y
					                      cmp r3.y, r4.y, r3.y, r4.w
					                      mad r4.y, r2.z, -c4.y, r3.w
					                      cmp r3.w, r4.z, r3.w, r4.y
					                      mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					                      mad r4.w, r2.y, c7.w, r8.x
					                      cmp r8.x, r4.y, r8.x, r4.w
					                      mad r4.w, r2.x, c7.w, r8.y
					                      cmp r8.y, r4.y, r8.y, r4.w
					                      cmp r5.yz, r4, c7.x, c7.y
					                      add r4.w, r5.z, r5.y
					                      mad r5.y, r2.y, -c7.w, r6.x
					                      cmp r6.x, r4.z, r6.x, r5.y
					                      mad r5.y, r2.x, -c7.w, r6.y
					                      cmp r6.y, r4.z, r6.y, r5.y
					                      if_lt -r4.w, c7.x
					                        if_ge r3_abs.y, r2.w
					                        else
					                          mov r8.zw, c7.x
					                          texldl r7, r8, s0
					                          mov r3.y, r7.y
					                        endif
					                        if_ge r3_abs.w, r2.w
					                        else
					                          mov r6.zw, c7.x
					                          texldl r7, r6, s0
					                          mov r3.w, r7.y
					                        endif
					                        mad r4.w, r2.z, -c4.y, r3.y
					                        cmp r3.y, r4.y, r3.y, r4.w
					                        mad r4.y, r2.z, -c4.y, r3.w
					                        cmp r3.w, r4.z, r3.w, r4.y
					                        mad r4.yz, r4.x, -c5.x, r3_abs.xyww
					                        mad r4.w, r2.y, -c5.z, r8.x
					                        cmp r8.x, r4.y, r8.x, r4.w
					                        mad r4.w, r2.x, -c5.z, r8.y
					                        cmp r8.y, r4.y, r8.y, r4.w
					                        cmp r5.yz, r4, c7.x, c7.y
					                        add r4.w, r5.z, r5.y
					                        mad r5.y, r2.y, c5.z, r6.x
					                        cmp r6.x, r4.z, r6.x, r5.y
					                        mad r5.y, r2.x, c5.z, r6.y
					                        cmp r6.y, r4.z, r6.y, r5.y
					                        if_lt -r4.w, c7.x
					                          if_ge r3_abs.y, r2.w
					                          else
					                            mov r8.zw, c7.x
					                            texldl r7, r8, s0
					                            mov r3.y, r7.y
					                          endif
					                          if_ge r3_abs.w, r2.w
					                          else
					                            mov r6.zw, c7.x
					                            texldl r7, r6, s0
					                            mov r3.w, r7.y
					                          endif
					                          mad r2.w, r2.z, -c4.y, r3.y
					                          mad r2.z, r2.z, -c4.y, r3.w
					                          cmp r3.yw, r4.xyzz, r3, r2.xwzz
					                          mad r2.zw, r4.x, -c5.x, r3_abs.xyyw
					                          mad r4.x, r2.y, -c5.w, r8.x
					                          cmp r8.x, r2.z, r8.x, r4.x
					                          mad r4.x, r2.x, -c5.w, r8.y
					                          cmp r8.y, r2.z, r8.y, r4.x
					                          mad r2.y, r2.y, c5.w, r6.x
					                          mad r2.x, r2.x, c5.w, r6.y
					                          cmp r6.xy, r2.w, r6, r2.yxzw
					                        endif
					                      endif
					                    endif
					                  endif
					                endif
					              endif
					            endif
					          endif
					        endif
					      endif
					      add r2.x, r5.x, -r8.x
					      add r2.z, r0.y, -r8.y
					      cmp r2.x, r0.z, r2.x, r2.z
					      add r2.yz, -r0.xxyw, r6.xxyw
					      cmp r2.y, r0.z, r2.y, r2.z
					      cmp r2.zw, r3.xyyw, c7.x, c7.y
					      cmp r3.y, r3.z, -c7.x, -c7.y
					      add r2.zw, r2, r3.y
					      add r3.y, r2.x, r2.y
					      rcp r3.y, r3.y
					      add r3.z, -r2.y, r2.x
					      min r3.w, r2.y, r2.x
					      cmp r2.x, r3.z, r2_abs.w, r2_abs.z
					      mul r0.w, r0.w, r0.w
					      mad r2.y, r3.w, -r3.y, c4.y
					      mul r0.w, r0.w, c3.x
					      cmp r2.x, -r2.x, c7.x, r2.y
					      max r3.y, r2.x, r0.w
					      mad r0.xw, r3.y, r3.x, r0.xyzy
					      cmp r2.x, r0.z, r5.x, r0.x
					      cmp r2.y, r0.z, r0.w, r0.y
					      mov r2.zw, c7.x
					      texldl r1, r2, s0
					    endif
					    mad r0.xy, v0, c2, c2.zwzw
					    texld r0, r0, s1
					    mad r0.x, r0.w, -c7.w, -c7.y
					    cmp r0.y, -r0.x, c7.x, c7.y
					    cmp r0.z, r0.x, -c7.x, -c7.y
					    add r0.y, r0.z, r0.y
					    add r0.x, -r0_abs.x, c7.y
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, c7.y
					    mul r0.x, r0.x, r0.y
					    mad_pp oC0.xyz, r0.x, c6.x, r1
					    mov_pp oC0.w, c7.y
					
					// approximately 517 instruction slots used (65 texture, 452 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DITHERING" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 10
					mad r0.xy, v1.xyxx, cb0[3].xyxx, cb0[3].zwzz
					sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
					mad r2.xyzw, cb0[2].xyxy, l(0.000000, 1.000000, 1.000000, 0.000000), r0.xyxy
					sample_l r3.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r2.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
					mad r4.xyzw, cb0[2].xyxy, l(0.000000, -1.000000, -1.000000, 0.000000), r0.xyxy
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					max r0.z, r1.y, r3.y
					min r0.w, r1.y, r3.y
					max r0.z, r0.z, r2.y
					min r0.w, r0.w, r2.y
					max r2.x, r4.y, r5.y
					min r2.z, r4.y, r5.y
					max r0.z, r0.z, r2.x
					min r0.w, r0.w, r2.z
					mul r2.x, r0.z, cb0[7].y
					add r0.z, -r0.w, r0.z
					max r0.w, r2.x, cb0[7].z
					ge r0.w, r0.z, r0.w
					if_nz r0.w
					  add r2.xz, r0.xxyx, -cb0[2].xxyx
					  sample_l r6.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  add r2.xz, r0.xxyx, cb0[2].xxyx
					  sample_l r7.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  mad r8.xyzw, cb0[2].xyxy, l(1.000000, -1.000000, -1.000000, 1.000000), r0.xyxy
					  sample_l r9.xyzw, r8.xyxx, t0.xyzw, s0, l(0.000000)
					  sample_l r8.xyzw, r8.zwzz, t0.xyzw, s0, l(0.000000)
					  add r0.w, r3.y, r5.y
					  add r2.x, r2.y, r4.y
					  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					  add r2.z, r0.w, r2.x
					  mad r0.w, r1.y, l(-2.000000), r0.w
					  mad r2.x, r1.y, l(-2.000000), r2.x
					  add r2.w, r7.y, r9.y
					  add r3.x, r6.y, r9.y
					  mad r3.z, r2.y, l(-2.000000), r2.w
					  mad r3.x, r5.y, l(-2.000000), r3.x
					  add r3.w, r6.y, r8.y
					  add r4.x, r7.y, r8.y
					  mad r0.w, |r0.w|, l(2.000000), |r3.z|
					  mad r2.x, |r2.x|, l(2.000000), |r3.x|
					  mad r3.x, r4.y, l(-2.000000), r3.w
					  mad r3.z, r3.y, l(-2.000000), r4.x
					  add r0.w, r0.w, |r3.x|
					  add r2.x, r2.x, |r3.z|
					  add r2.w, r2.w, r3.w
					  ge r0.w, r0.w, r2.x
					  mad r2.x, r2.z, l(2.000000), r2.w
					  movc r2.z, r0.w, r5.y, r4.y
					  movc r2.y, r0.w, r3.y, r2.y
					  movc r2.w, r0.w, cb0[2].y, cb0[2].x
					  mad r2.x, r2.x, l(0.083333), -r1.y
					  add r3.xy, -r1.yyyy, r2.zyzz
					  add r2.yz, r1.yyyy, r2.yyzy
					  ge r3.z, |r3.x|, |r3.y|
					  max r3.x, |r3.y|, |r3.x|
					  movc r2.w, r3.z, -r2.w, r2.w
					  mul_sat r0.z, r0.z, |r2.x|
					  and r2.x, r0.w, cb0[2].x
					  movc r3.y, r0.w, l(0), cb0[2].y
					  mad r4.xy, r2.wwww, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
					  movc r3.w, r0.w, r0.x, r4.x
					  movc r4.x, r0.w, r4.y, r0.y
					  add r5.x, -r2.x, r3.w
					  add r5.y, -r3.y, r4.x
					  add r6.x, r2.x, r3.w
					  add r6.y, r3.y, r4.x
					  mad r3.w, r0.z, l(-2.000000), l(3.000000)
					  sample_l r4.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)
					  mul r0.z, r0.z, r0.z
					  sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, l(0.000000)
					  movc r2.y, r3.z, r2.z, r2.y
					  mul r2.z, r3.x, l(0.250000)
					  mad r3.x, -r2.y, l(0.500000), r1.y
					  mul r0.z, r0.z, r3.w
					  lt r3.x, r3.x, l(0.000000)
					  mad r4.y, -r2.y, l(0.500000), r4.y
					  mad r4.x, -r2.y, l(0.500000), r7.y
					  ge r3.zw, |r4.yyyx|, r2.zzzz
					  add r5.z, -r2.x, r5.x
					  movc r5.x, r3.z, r5.x, r5.z
					  add r5.w, -r3.y, r5.y
					  movc r5.z, r3.z, r5.y, r5.w
					  not r5.yw, r3.zzzw
					  or r5.y, r5.w, r5.y
					  add r5.w, r2.x, r6.x
					  movc r6.x, r3.w, r6.x, r5.w
					  add r5.w, r3.y, r6.y
					  movc r6.z, r3.w, r6.y, r5.w
					  if_nz r5.y
					    if_z r3.z
					      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					    else 
					      mov r7.x, r4.y
					    endif 
					    if_z r3.w
					      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					    endif 
					    mad r5.y, -r2.y, l(0.500000), r7.x
					    movc r4.y, r3.z, r7.x, r5.y
					    mad r3.z, -r2.y, l(0.500000), r4.x
					    movc r4.x, r3.w, r4.x, r3.z
					    ge r3.zw, |r4.yyyx|, r2.zzzz
					    add r5.y, -r2.x, r5.x
					    movc r5.x, r3.z, r5.x, r5.y
					    add r5.y, -r3.y, r5.z
					    movc r5.z, r3.z, r5.z, r5.y
					    not r5.yw, r3.zzzw
					    or r5.y, r5.w, r5.y
					    add r5.w, r2.x, r6.x
					    movc r6.x, r3.w, r6.x, r5.w
					    add r5.w, r3.y, r6.z
					    movc r6.z, r3.w, r6.z, r5.w
					    if_nz r5.y
					      if_z r3.z
					        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					      else 
					        mov r7.x, r4.y
					      endif 
					      if_z r3.w
					        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					      endif 
					      mad r5.y, -r2.y, l(0.500000), r7.x
					      movc r4.y, r3.z, r7.x, r5.y
					      mad r3.z, -r2.y, l(0.500000), r4.x
					      movc r4.x, r3.w, r4.x, r3.z
					      ge r3.zw, |r4.yyyx|, r2.zzzz
					      add r5.y, -r2.x, r5.x
					      movc r5.x, r3.z, r5.x, r5.y
					      add r5.y, -r3.y, r5.z
					      movc r5.z, r3.z, r5.z, r5.y
					      not r5.yw, r3.zzzw
					      or r5.y, r5.w, r5.y
					      add r5.w, r2.x, r6.x
					      movc r6.x, r3.w, r6.x, r5.w
					      add r5.w, r3.y, r6.z
					      movc r6.z, r3.w, r6.z, r5.w
					      if_nz r5.y
					        if_z r3.z
					          sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					        else 
					          mov r7.x, r4.y
					        endif 
					        if_z r3.w
					          sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					        endif 
					        mad r5.y, -r2.y, l(0.500000), r7.x
					        movc r4.y, r3.z, r7.x, r5.y
					        mad r3.z, -r2.y, l(0.500000), r4.x
					        movc r4.x, r3.w, r4.x, r3.z
					        ge r3.zw, |r4.yyyx|, r2.zzzz
					        add r5.y, -r2.x, r5.x
					        movc r5.x, r3.z, r5.x, r5.y
					        add r5.y, -r3.y, r5.z
					        movc r5.z, r3.z, r5.z, r5.y
					        not r5.yw, r3.zzzw
					        or r5.y, r5.w, r5.y
					        add r5.w, r2.x, r6.x
					        movc r6.x, r3.w, r6.x, r5.w
					        add r5.w, r3.y, r6.z
					        movc r6.z, r3.w, r6.z, r5.w
					        if_nz r5.y
					          if_z r3.z
					            sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					          else 
					            mov r7.x, r4.y
					          endif 
					          if_z r3.w
					            sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					          endif 
					          mad r5.y, -r2.y, l(0.500000), r7.x
					          movc r4.y, r3.z, r7.x, r5.y
					          mad r3.z, -r2.y, l(0.500000), r4.x
					          movc r4.x, r3.w, r4.x, r3.z
					          ge r3.zw, |r4.yyyx|, r2.zzzz
					          mad r5.y, -r2.x, l(1.500000), r5.x
					          movc r5.x, r3.z, r5.x, r5.y
					          mad r5.y, -r3.y, l(1.500000), r5.z
					          movc r5.z, r3.z, r5.z, r5.y
					          not r5.yw, r3.zzzw
					          or r5.y, r5.w, r5.y
					          mad r5.w, r2.x, l(1.500000), r6.x
					          movc r6.x, r3.w, r6.x, r5.w
					          mad r5.w, r3.y, l(1.500000), r6.z
					          movc r6.z, r3.w, r6.z, r5.w
					          if_nz r5.y
					            if_z r3.z
					              sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					            else 
					              mov r7.x, r4.y
					            endif 
					            if_z r3.w
					              sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					            endif 
					            mad r5.y, -r2.y, l(0.500000), r7.x
					            movc r4.y, r3.z, r7.x, r5.y
					            mad r3.z, -r2.y, l(0.500000), r4.x
					            movc r4.x, r3.w, r4.x, r3.z
					            ge r3.zw, |r4.yyyx|, r2.zzzz
					            mad r5.y, -r2.x, l(2.000000), r5.x
					            movc r5.x, r3.z, r5.x, r5.y
					            mad r5.y, -r3.y, l(2.000000), r5.z
					            movc r5.z, r3.z, r5.z, r5.y
					            not r5.yw, r3.zzzw
					            or r5.y, r5.w, r5.y
					            mad r5.w, r2.x, l(2.000000), r6.x
					            movc r6.x, r3.w, r6.x, r5.w
					            mad r5.w, r3.y, l(2.000000), r6.z
					            movc r6.z, r3.w, r6.z, r5.w
					            if_nz r5.y
					              if_z r3.z
					                sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					              else 
					                mov r7.x, r4.y
					              endif 
					              if_z r3.w
					                sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					              endif 
					              mad r5.y, -r2.y, l(0.500000), r7.x
					              movc r4.y, r3.z, r7.x, r5.y
					              mad r3.z, -r2.y, l(0.500000), r4.x
					              movc r4.x, r3.w, r4.x, r3.z
					              ge r3.zw, |r4.yyyx|, r2.zzzz
					              mad r5.y, -r2.x, l(2.000000), r5.x
					              movc r5.x, r3.z, r5.x, r5.y
					              mad r5.y, -r3.y, l(2.000000), r5.z
					              movc r5.z, r3.z, r5.z, r5.y
					              not r5.yw, r3.zzzw
					              or r5.y, r5.w, r5.y
					              mad r5.w, r2.x, l(2.000000), r6.x
					              movc r6.x, r3.w, r6.x, r5.w
					              mad r5.w, r3.y, l(2.000000), r6.z
					              movc r6.z, r3.w, r6.z, r5.w
					              if_nz r5.y
					                if_z r3.z
					                  sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                else 
					                  mov r7.x, r4.y
					                endif 
					                if_z r3.w
					                  sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                endif 
					                mad r5.y, -r2.y, l(0.500000), r7.x
					                movc r4.y, r3.z, r7.x, r5.y
					                mad r3.z, -r2.y, l(0.500000), r4.x
					                movc r4.x, r3.w, r4.x, r3.z
					                ge r3.zw, |r4.yyyx|, r2.zzzz
					                mad r5.y, -r2.x, l(2.000000), r5.x
					                movc r5.x, r3.z, r5.x, r5.y
					                mad r5.y, -r3.y, l(2.000000), r5.z
					                movc r5.z, r3.z, r5.z, r5.y
					                not r5.yw, r3.zzzw
					                or r5.y, r5.w, r5.y
					                mad r5.w, r2.x, l(2.000000), r6.x
					                movc r6.x, r3.w, r6.x, r5.w
					                mad r5.w, r3.y, l(2.000000), r6.z
					                movc r6.z, r3.w, r6.z, r5.w
					                if_nz r5.y
					                  if_z r3.z
					                    sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                  else 
					                    mov r7.x, r4.y
					                  endif 
					                  if_z r3.w
					                    sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                  endif 
					                  mad r5.y, -r2.y, l(0.500000), r7.x
					                  movc r4.y, r3.z, r7.x, r5.y
					                  mad r3.z, -r2.y, l(0.500000), r4.x
					                  movc r4.x, r3.w, r4.x, r3.z
					                  ge r3.zw, |r4.yyyx|, r2.zzzz
					                  mad r5.y, -r2.x, l(2.000000), r5.x
					                  movc r5.x, r3.z, r5.x, r5.y
					                  mad r5.y, -r3.y, l(2.000000), r5.z
					                  movc r5.z, r3.z, r5.z, r5.y
					                  not r5.yw, r3.zzzw
					                  or r5.y, r5.w, r5.y
					                  mad r5.w, r2.x, l(2.000000), r6.x
					                  movc r6.x, r3.w, r6.x, r5.w
					                  mad r5.w, r3.y, l(2.000000), r6.z
					                  movc r6.z, r3.w, r6.z, r5.w
					                  if_nz r5.y
					                    if_z r3.z
					                      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                    else 
					                      mov r7.x, r4.y
					                    endif 
					                    if_z r3.w
					                      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                    endif 
					                    mad r5.y, -r2.y, l(0.500000), r7.x
					                    movc r4.y, r3.z, r7.x, r5.y
					                    mad r3.z, -r2.y, l(0.500000), r4.x
					                    movc r4.x, r3.w, r4.x, r3.z
					                    ge r3.zw, |r4.yyyx|, r2.zzzz
					                    mad r5.y, -r2.x, l(4.000000), r5.x
					                    movc r5.x, r3.z, r5.x, r5.y
					                    mad r5.y, -r3.y, l(4.000000), r5.z
					                    movc r5.z, r3.z, r5.z, r5.y
					                    not r5.yw, r3.zzzw
					                    or r5.y, r5.w, r5.y
					                    mad r5.w, r2.x, l(4.000000), r6.x
					                    movc r6.x, r3.w, r6.x, r5.w
					                    mad r5.w, r3.y, l(4.000000), r6.z
					                    movc r6.z, r3.w, r6.z, r5.w
					                    if_nz r5.y
					                      if_z r3.z
					                        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                      else 
					                        mov r7.x, r4.y
					                      endif 
					                      if_z r3.w
					                        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                      endif 
					                      mad r4.z, -r2.y, l(0.500000), r7.x
					                      movc r4.y, r3.z, r7.x, r4.z
					                      mad r2.y, -r2.y, l(0.500000), r4.x
					                      movc r4.x, r3.w, r4.x, r2.y
					                      ge r2.yz, |r4.yyxy|, r2.zzzz
					                      mad r3.z, -r2.x, l(8.000000), r5.x
					                      movc r5.x, r2.y, r5.x, r3.z
					                      mad r3.z, -r3.y, l(8.000000), r5.z
					                      movc r5.z, r2.y, r5.z, r3.z
					                      mad r2.x, r2.x, l(8.000000), r6.x
					                      movc r6.x, r2.z, r6.x, r2.x
					                      mad r2.x, r3.y, l(8.000000), r6.z
					                      movc r6.z, r2.z, r6.z, r2.x
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					  add r2.xz, r0.xxyx, -r5.xxzx
					  movc r2.x, r0.w, r2.x, r2.z
					  add r2.yz, -r0.xxyx, r6.xxzx
					  movc r2.y, r0.w, r2.y, r2.z
					  lt r3.yz, r4.yyxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  add r2.z, r2.x, r2.y
					  ine r3.xy, r3.xxxx, r3.yzyy
					  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					  lt r3.z, r2.x, r2.y
					  min r2.x, r2.y, r2.x
					  movc r2.y, r3.z, r3.x, r3.y
					  mul r0.z, r0.z, r0.z
					  mad r2.x, r2.x, -r2.z, l(0.500000)
					  mul r0.z, r0.z, cb0[7].x
					  and r2.x, r2.x, r2.y
					  max r0.z, r0.z, r2.x
					  mad r2.xy, r0.zzzz, r2.wwww, r0.xyxx
					  movc r3.x, r0.w, r0.x, r2.x
					  movc r3.y, r0.w, r2.y, r0.y
					  sample_l r1.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					endif 
					mad r0.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
					sample r0.xyzw, r0.xyxx, t1.xyzw, s1
					mad r0.x, r0.w, l(2.000000), l(-1.000000)
					lt r0.y, l(0.000000), r0.x
					lt r0.z, r0.x, l(0.000000)
					iadd r0.y, -r0.y, r0.z
					itof r0.y, r0.y
					add r0.x, -|r0.x|, l(1.000000)
					sqrt r0.x, r0.x
					add r0.x, -r0.x, l(1.000000)
					mul r0.x, r0.x, r0.y
					mad o0.xyz, r0.xxxx, l(0.003922, 0.003922, 0.003922, 0.000000), r1.xyzx
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "GRAIN" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _GrainTex;
					//   float2 _Grain_Params1;
					//   float4 _Grain_Params2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _MainTex_TexelSize;
					//   float3 _QualitySettings;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex_ST        c1       1
					//   _Grain_Params1     c2       1
					//   _Grain_Params2     c3       1
					//   _QualitySettings   c4       1
					//   _MainTex           s0       1
					//   _GrainTex          s1       1
					//
					
					    ps_3_0
					    def c5, 0.0833333358, 0.5, -2, 3
					    def c6, 0.25, 1.5, 4, 8
					    def c7, 0.212599993, 0.715200007, 0.0722000003, 0
					    def c8, 0, 1, -1, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v0, c1, c1.zwzw
					    mov r0.z, c8.x
					    texldl r1, r0.xyzz, s0
					    mov r2.xyz, c8
					    mad r3.xyz, c0.yxyw, r2.yyxw, r0.yxyw
					    mov r0.w, r3.x
					    texldl r4, r0.xwzz, s0
					    mul r3, r3.yzyy, c8.yyxx
					    texldl r3, r3, s0
					    mad r3.xzw, c0.yyxy, r2.zyzx, r0.yyxy
					    mov r5.xzw, r0.xyzz
					    mov r5.y, r3.x
					    texldl r6, r5, s0
					    mul r7, r3.zwzz, c8.yyxx
					    texldl r7, r7, s0
					    max r0.z, r4.y, r1.y
					    min r0.w, r1.y, r4.y
					    max r2.w, r3.y, r0.z
					    min r4.x, r0.w, r3.y
					    max r0.z, r6.y, r7.y
					    min r0.w, r7.y, r6.y
					    max r3.x, r0.z, r2.w
					    min r2.w, r4.x, r0.w
					    mul r0.z, r3.x, c4.y
					    add r0.w, -r2.w, r3.x
					    max r2.w, c4.z, r0.z
					    if_lt r0.w, r2.w
					    else
					      add r8.xy, r0, -c0
					      mov r8.zw, c8.x
					      texldl r8, r8, s0
					      add r9.xy, r0, c0
					      mov r9.zw, c8.x
					      texldl r9, r9, s0
					      mad r10, c0.xyxy, r2.yzzy, r0.xyxy
					      mul r11, r10.xyxx, c8.yyxx
					      texldl r11, r11, s0
					      mul r10, r10.zwxx, c8.yyxx
					      texldl r10, r10, s0
					      add r0.z, r4.y, r6.y
					      add r2.z, r3.y, r7.y
					      rcp r0.w, r0.w
					      add r2.w, r0.z, r2.z
					      mad r0.z, r1.y, c8.w, r0.z
					      mad r2.z, r1.y, c8.w, r2.z
					      add r3.x, r9.y, r11.y
					      add r3.z, r8.y, r11.y
					      mad r3.w, r3.y, c8.w, r3.x
					      mad r3.z, r6.y, c8.w, r3.z
					      add r4.x, r8.y, r10.y
					      add r4.z, r9.y, r10.y
					      mad r0.z, r0_abs.z, -c8.w, r3_abs.w
					      mad r2.z, r2_abs.z, -c8.w, r3_abs.z
					      mad r3.z, r7.y, c8.w, r4.x
					      mad r3.w, r4.y, c8.w, r4.z
					      add r0.z, r0.z, r3_abs.z
					      add r2.z, r2.z, r3_abs.w
					      add r3.x, r3.x, r4.x
					      add r0.z, r0.z, -r2.z
					      mad r2.z, r2.w, -c8.w, r3.x
					      cmp r2.w, r0.z, r6.y, r7.y
					      cmp r3.x, r0.z, r4.y, r3.y
					      cmp r3.y, r0.z, c0.y, c0.x
					      mad r2.z, r2.z, c5.x, -r1.y
					      add r3.z, -r1.y, r2.w
					      add r3.w, -r1.y, r3.x
					      add r2.w, r1.y, r2.w
					      add r3.x, r1.y, r3.x
					      add r4.x, -r3_abs.w, r3_abs.z
					      max r4.y, r3_abs.z, r3_abs.w
					      cmp r3.y, r4.x, -r3.y, r3.y
					      mul_sat r0.w, r0.w, r2_abs.z
					      cmp r2.z, r0.z, c0.x, r2.x
					      cmp r2.x, r0.z, r2.x, c0.y
					      mad r3.zw, r3.y, c5.y, r0.xyxy
					      cmp r3.z, r0.z, r5.x, r3.z
					      cmp r3.w, r0.z, r3.w, r0.y
					      add r6.xy, -r2.zxzw, r3.zwzw
					      add r7.xy, r2.zxzw, r3.zwzw
					      mad r3.z, r0.w, c5.z, c5.w
					      mov r6.zw, c8.x
					      texldl r8, r6, s0
					      mul r0.w, r0.w, r0.w
					      mov r7.zw, c8.x
					      texldl r9, r7, s0
					      cmp r2.w, r4.x, r2.w, r3.x
					      mul r3.x, r4.y, c6.x
					      mad r3.w, r2.w, -c5.y, r1.y
					      mul r0.w, r0.w, r3.z
					      mad r4.x, r2.w, -c5.y, r8.y
					      mad r4.z, r2.w, -c5.y, r9.y
					      mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					      add r3.z, -r2.z, r6.x
					      cmp r8.x, r5.y, r6.x, r3.z
					      add r3.z, -r2.x, r6.y
					      cmp r8.y, r5.y, r6.y, r3.z
					      cmp r6.xy, r5.yzzw, c8.x, c8.y
					      add r3.z, r6.y, r6.x
					      add r4.w, r2.z, r7.x
					      cmp r6.x, r5.z, r7.x, r4.w
					      add r4.w, r2.x, r7.y
					      cmp r6.y, r5.z, r7.y, r4.w
					      if_lt -r3.z, c8.x
					        if_ge r4_abs.x, r3.x
					        else
					          mov r8.zw, c8.x
					          texldl r7, r8, s0
					          mov r4.x, r7.y
					        endif
					        if_ge r4_abs.z, r3.x
					        else
					          mov r6.zw, c8.x
					          texldl r7, r6, s0
					          mov r4.z, r7.y
					        endif
					        mad r3.z, r2.w, -c5.y, r4.x
					        cmp r4.x, r5.y, r4.x, r3.z
					        mad r3.z, r2.w, -c5.y, r4.z
					        cmp r4.z, r5.z, r4.z, r3.z
					        mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					        add r3.z, -r2.z, r8.x
					        cmp r8.x, r5.y, r8.x, r3.z
					        add r3.z, -r2.x, r8.y
					        cmp r8.y, r5.y, r8.y, r3.z
					        cmp r7.xy, r5.yzzw, c8.x, c8.y
					        add r3.z, r7.y, r7.x
					        add r4.w, r2.z, r6.x
					        cmp r6.x, r5.z, r6.x, r4.w
					        add r4.w, r2.x, r6.y
					        cmp r6.y, r5.z, r6.y, r4.w
					        if_lt -r3.z, c8.x
					          if_ge r4_abs.x, r3.x
					          else
					            mov r8.zw, c8.x
					            texldl r7, r8, s0
					            mov r4.x, r7.y
					          endif
					          if_ge r4_abs.z, r3.x
					          else
					            mov r6.zw, c8.x
					            texldl r7, r6, s0
					            mov r4.z, r7.y
					          endif
					          mad r3.z, r2.w, -c5.y, r4.x
					          cmp r4.x, r5.y, r4.x, r3.z
					          mad r3.z, r2.w, -c5.y, r4.z
					          cmp r4.z, r5.z, r4.z, r3.z
					          mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					          add r3.z, -r2.z, r8.x
					          cmp r8.x, r5.y, r8.x, r3.z
					          add r3.z, -r2.x, r8.y
					          cmp r8.y, r5.y, r8.y, r3.z
					          cmp r7.xy, r5.yzzw, c8.x, c8.y
					          add r3.z, r7.y, r7.x
					          add r4.w, r2.z, r6.x
					          cmp r6.x, r5.z, r6.x, r4.w
					          add r4.w, r2.x, r6.y
					          cmp r6.y, r5.z, r6.y, r4.w
					          if_lt -r3.z, c8.x
					            if_ge r4_abs.x, r3.x
					            else
					              mov r8.zw, c8.x
					              texldl r7, r8, s0
					              mov r4.x, r7.y
					            endif
					            if_ge r4_abs.z, r3.x
					            else
					              mov r6.zw, c8.x
					              texldl r7, r6, s0
					              mov r4.z, r7.y
					            endif
					            mad r3.z, r2.w, -c5.y, r4.x
					            cmp r4.x, r5.y, r4.x, r3.z
					            mad r3.z, r2.w, -c5.y, r4.z
					            cmp r4.z, r5.z, r4.z, r3.z
					            mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					            add r3.z, -r2.z, r8.x
					            cmp r8.x, r5.y, r8.x, r3.z
					            add r3.z, -r2.x, r8.y
					            cmp r8.y, r5.y, r8.y, r3.z
					            cmp r7.xy, r5.yzzw, c8.x, c8.y
					            add r3.z, r7.y, r7.x
					            add r4.w, r2.z, r6.x
					            cmp r6.x, r5.z, r6.x, r4.w
					            add r4.w, r2.x, r6.y
					            cmp r6.y, r5.z, r6.y, r4.w
					            if_lt -r3.z, c8.x
					              if_ge r4_abs.x, r3.x
					              else
					                mov r8.zw, c8.x
					                texldl r7, r8, s0
					                mov r4.x, r7.y
					              endif
					              if_ge r4_abs.z, r3.x
					              else
					                mov r6.zw, c8.x
					                texldl r7, r6, s0
					                mov r4.z, r7.y
					              endif
					              mad r3.z, r2.w, -c5.y, r4.x
					              cmp r4.x, r5.y, r4.x, r3.z
					              mad r3.z, r2.w, -c5.y, r4.z
					              cmp r4.z, r5.z, r4.z, r3.z
					              mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					              mad r3.z, r2.z, -c6.y, r8.x
					              cmp r8.x, r5.y, r8.x, r3.z
					              mad r3.z, r2.x, -c6.y, r8.y
					              cmp r8.y, r5.y, r8.y, r3.z
					              cmp r7.xy, r5.yzzw, c8.x, c8.y
					              add r3.z, r7.y, r7.x
					              mad r4.w, r2.z, c6.y, r6.x
					              cmp r6.x, r5.z, r6.x, r4.w
					              mad r4.w, r2.x, c6.y, r6.y
					              cmp r6.y, r5.z, r6.y, r4.w
					              if_lt -r3.z, c8.x
					                if_ge r4_abs.x, r3.x
					                else
					                  mov r8.zw, c8.x
					                  texldl r7, r8, s0
					                  mov r4.x, r7.y
					                endif
					                if_ge r4_abs.z, r3.x
					                else
					                  mov r6.zw, c8.x
					                  texldl r7, r6, s0
					                  mov r4.z, r7.y
					                endif
					                mad r3.z, r2.w, -c5.y, r4.x
					                cmp r4.x, r5.y, r4.x, r3.z
					                mad r3.z, r2.w, -c5.y, r4.z
					                cmp r4.z, r5.z, r4.z, r3.z
					                mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					                mad r3.z, r2.z, c8.w, r8.x
					                cmp r8.x, r5.y, r8.x, r3.z
					                mad r3.z, r2.x, c8.w, r8.y
					                cmp r8.y, r5.y, r8.y, r3.z
					                cmp r7.xy, r5.yzzw, c8.x, c8.y
					                add r3.z, r7.y, r7.x
					                mad r4.w, r2.z, -c8.w, r6.x
					                cmp r6.x, r5.z, r6.x, r4.w
					                mad r4.w, r2.x, -c8.w, r6.y
					                cmp r6.y, r5.z, r6.y, r4.w
					                if_lt -r3.z, c8.x
					                  if_ge r4_abs.x, r3.x
					                  else
					                    mov r8.zw, c8.x
					                    texldl r7, r8, s0
					                    mov r4.x, r7.y
					                  endif
					                  if_ge r4_abs.z, r3.x
					                  else
					                    mov r6.zw, c8.x
					                    texldl r7, r6, s0
					                    mov r4.z, r7.y
					                  endif
					                  mad r3.z, r2.w, -c5.y, r4.x
					                  cmp r4.x, r5.y, r4.x, r3.z
					                  mad r3.z, r2.w, -c5.y, r4.z
					                  cmp r4.z, r5.z, r4.z, r3.z
					                  mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					                  mad r3.z, r2.z, c8.w, r8.x
					                  cmp r8.x, r5.y, r8.x, r3.z
					                  mad r3.z, r2.x, c8.w, r8.y
					                  cmp r8.y, r5.y, r8.y, r3.z
					                  cmp r7.xy, r5.yzzw, c8.x, c8.y
					                  add r3.z, r7.y, r7.x
					                  mad r4.w, r2.z, -c8.w, r6.x
					                  cmp r6.x, r5.z, r6.x, r4.w
					                  mad r4.w, r2.x, -c8.w, r6.y
					                  cmp r6.y, r5.z, r6.y, r4.w
					                  if_lt -r3.z, c8.x
					                    if_ge r4_abs.x, r3.x
					                    else
					                      mov r8.zw, c8.x
					                      texldl r7, r8, s0
					                      mov r4.x, r7.y
					                    endif
					                    if_ge r4_abs.z, r3.x
					                    else
					                      mov r6.zw, c8.x
					                      texldl r7, r6, s0
					                      mov r4.z, r7.y
					                    endif
					                    mad r3.z, r2.w, -c5.y, r4.x
					                    cmp r4.x, r5.y, r4.x, r3.z
					                    mad r3.z, r2.w, -c5.y, r4.z
					                    cmp r4.z, r5.z, r4.z, r3.z
					                    mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					                    mad r3.z, r2.z, c8.w, r8.x
					                    cmp r8.x, r5.y, r8.x, r3.z
					                    mad r3.z, r2.x, c8.w, r8.y
					                    cmp r8.y, r5.y, r8.y, r3.z
					                    cmp r7.xy, r5.yzzw, c8.x, c8.y
					                    add r3.z, r7.y, r7.x
					                    mad r4.w, r2.z, -c8.w, r6.x
					                    cmp r6.x, r5.z, r6.x, r4.w
					                    mad r4.w, r2.x, -c8.w, r6.y
					                    cmp r6.y, r5.z, r6.y, r4.w
					                    if_lt -r3.z, c8.x
					                      if_ge r4_abs.x, r3.x
					                      else
					                        mov r8.zw, c8.x
					                        texldl r7, r8, s0
					                        mov r4.x, r7.y
					                      endif
					                      if_ge r4_abs.z, r3.x
					                      else
					                        mov r6.zw, c8.x
					                        texldl r7, r6, s0
					                        mov r4.z, r7.y
					                      endif
					                      mad r3.z, r2.w, -c5.y, r4.x
					                      cmp r4.x, r5.y, r4.x, r3.z
					                      mad r3.z, r2.w, -c5.y, r4.z
					                      cmp r4.z, r5.z, r4.z, r3.z
					                      mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					                      mad r3.z, r2.z, c8.w, r8.x
					                      cmp r8.x, r5.y, r8.x, r3.z
					                      mad r3.z, r2.x, c8.w, r8.y
					                      cmp r8.y, r5.y, r8.y, r3.z
					                      cmp r7.xy, r5.yzzw, c8.x, c8.y
					                      add r3.z, r7.y, r7.x
					                      mad r4.w, r2.z, -c8.w, r6.x
					                      cmp r6.x, r5.z, r6.x, r4.w
					                      mad r4.w, r2.x, -c8.w, r6.y
					                      cmp r6.y, r5.z, r6.y, r4.w
					                      if_lt -r3.z, c8.x
					                        if_ge r4_abs.x, r3.x
					                        else
					                          mov r8.zw, c8.x
					                          texldl r7, r8, s0
					                          mov r4.x, r7.y
					                        endif
					                        if_ge r4_abs.z, r3.x
					                        else
					                          mov r6.zw, c8.x
					                          texldl r7, r6, s0
					                          mov r4.z, r7.y
					                        endif
					                        mad r3.z, r2.w, -c5.y, r4.x
					                        cmp r4.x, r5.y, r4.x, r3.z
					                        mad r3.z, r2.w, -c5.y, r4.z
					                        cmp r4.z, r5.z, r4.z, r3.z
					                        mad r5.yz, r4.y, -c6.x, r4_abs.xxzw
					                        mad r3.z, r2.z, -c6.z, r8.x
					                        cmp r8.x, r5.y, r8.x, r3.z
					                        mad r3.z, r2.x, -c6.z, r8.y
					                        cmp r8.y, r5.y, r8.y, r3.z
					                        cmp r7.xy, r5.yzzw, c8.x, c8.y
					                        add r3.z, r7.y, r7.x
					                        mad r4.w, r2.z, c6.z, r6.x
					                        cmp r6.x, r5.z, r6.x, r4.w
					                        mad r4.w, r2.x, c6.z, r6.y
					                        cmp r6.y, r5.z, r6.y, r4.w
					                        if_lt -r3.z, c8.x
					                          if_ge r4_abs.x, r3.x
					                          else
					                            mov r8.zw, c8.x
					                            texldl r7, r8, s0
					                            mov r4.x, r7.y
					                          endif
					                          if_ge r4_abs.z, r3.x
					                          else
					                            mov r6.zw, c8.x
					                            texldl r7, r6, s0
					                            mov r4.z, r7.y
					                          endif
					                          mad r3.x, r2.w, -c5.y, r4.x
					                          cmp r4.x, r5.y, r4.x, r3.x
					                          mad r2.w, r2.w, -c5.y, r4.z
					                          cmp r4.z, r5.z, r4.z, r2.w
					                          mad r3.xz, r4.y, -c6.x, r4_abs
					                          mad r2.w, r2.z, -c6.w, r8.x
					                          cmp r8.x, r3.x, r8.x, r2.w
					                          mad r2.w, r2.x, -c6.w, r8.y
					                          cmp r8.y, r3.x, r8.y, r2.w
					                          mad r2.z, r2.z, c6.w, r6.x
					                          mad r2.x, r2.x, c6.w, r6.y
					                          cmp r6.xy, r3.z, r6, r2.zxzw
					                        endif
					                      endif
					                    endif
					                  endif
					                endif
					              endif
					            endif
					          endif
					        endif
					      endif
					      add r2.x, r5.x, -r8.x
					      add r2.w, r0.y, -r8.y
					      cmp r2.x, r0.z, r2.x, r2.w
					      add r2.zw, -r0.xyxy, r6.xyxy
					      cmp r2.z, r0.z, r2.z, r2.w
					      cmp r3.xz, r4, c8.x, c8.y
					      cmp r2.w, r3.w, -c8.x, -c8.y
					      add r3.xz, r2.w, r3
					      add r2.w, r2.x, r2.z
					      rcp r2.w, r2.w
					      add r3.w, -r2.z, r2.x
					      min r4.x, r2.z, r2.x
					      cmp r2.x, r3.w, r3_abs.z, r3_abs.x
					      mul r0.w, r0.w, r0.w
					      mad r2.z, r4.x, -r2.w, c5.y
					      mul r0.w, r0.w, c4.x
					      cmp r2.x, -r2.x, c8.x, r2.z
					      max r3.x, r2.x, r0.w
					      mad r0.xw, r3.x, r3.y, r0.xyzy
					      cmp r3.x, r0.z, r5.x, r0.x
					      cmp r3.y, r0.z, r0.w, r0.y
					      mov r3.zw, c8.x
					      texldl r1, r3, s0
					    endif
					    mad r0.xy, v0, c3, c3.zwzw
					    texld r0, r0, s1
					    dp3_pp r0.w, r1, c7
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    mad r0.w, c2.x, -r0.w, r2.y
					    mul r0.xyz, r0, r1
					    mul r0.xyz, r0, c2.y
					    mad_pp oC0.xyz, r0, r0.w, r1
					    mov_pp oC0.w, c8.y
					
					// approximately 517 instruction slots used (65 texture, 452 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "GRAIN" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 10
					mad r0.xy, v1.xyxx, cb0[3].xyxx, cb0[3].zwzz
					sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
					mad r2.xyzw, cb0[2].xyxy, l(0.000000, 1.000000, 1.000000, 0.000000), r0.xyxy
					sample_l r3.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r2.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
					mad r4.xyzw, cb0[2].xyxy, l(0.000000, -1.000000, -1.000000, 0.000000), r0.xyxy
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					max r0.z, r1.y, r3.y
					min r0.w, r1.y, r3.y
					max r0.z, r0.z, r2.y
					min r0.w, r0.w, r2.y
					max r2.x, r4.y, r5.y
					min r2.z, r4.y, r5.y
					max r0.z, r0.z, r2.x
					min r0.w, r0.w, r2.z
					mul r2.x, r0.z, cb0[7].y
					add r0.z, -r0.w, r0.z
					max r0.w, r2.x, cb0[7].z
					ge r0.w, r0.z, r0.w
					if_nz r0.w
					  add r2.xz, r0.xxyx, -cb0[2].xxyx
					  sample_l r6.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  add r2.xz, r0.xxyx, cb0[2].xxyx
					  sample_l r7.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  mad r8.xyzw, cb0[2].xyxy, l(1.000000, -1.000000, -1.000000, 1.000000), r0.xyxy
					  sample_l r9.xyzw, r8.xyxx, t0.xyzw, s0, l(0.000000)
					  sample_l r8.xyzw, r8.zwzz, t0.xyzw, s0, l(0.000000)
					  add r0.w, r3.y, r5.y
					  add r2.x, r2.y, r4.y
					  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					  add r2.z, r0.w, r2.x
					  mad r0.w, r1.y, l(-2.000000), r0.w
					  mad r2.x, r1.y, l(-2.000000), r2.x
					  add r2.w, r7.y, r9.y
					  add r3.x, r6.y, r9.y
					  mad r3.z, r2.y, l(-2.000000), r2.w
					  mad r3.x, r5.y, l(-2.000000), r3.x
					  add r3.w, r6.y, r8.y
					  add r4.x, r7.y, r8.y
					  mad r0.w, |r0.w|, l(2.000000), |r3.z|
					  mad r2.x, |r2.x|, l(2.000000), |r3.x|
					  mad r3.x, r4.y, l(-2.000000), r3.w
					  mad r3.z, r3.y, l(-2.000000), r4.x
					  add r0.w, r0.w, |r3.x|
					  add r2.x, r2.x, |r3.z|
					  add r2.w, r2.w, r3.w
					  ge r0.w, r0.w, r2.x
					  mad r2.x, r2.z, l(2.000000), r2.w
					  movc r2.z, r0.w, r5.y, r4.y
					  movc r2.y, r0.w, r3.y, r2.y
					  movc r2.w, r0.w, cb0[2].y, cb0[2].x
					  mad r2.x, r2.x, l(0.083333), -r1.y
					  add r3.xy, -r1.yyyy, r2.zyzz
					  add r2.yz, r1.yyyy, r2.yyzy
					  ge r3.z, |r3.x|, |r3.y|
					  max r3.x, |r3.y|, |r3.x|
					  movc r2.w, r3.z, -r2.w, r2.w
					  mul_sat r0.z, r0.z, |r2.x|
					  and r2.x, r0.w, cb0[2].x
					  movc r3.y, r0.w, l(0), cb0[2].y
					  mad r4.xy, r2.wwww, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
					  movc r3.w, r0.w, r0.x, r4.x
					  movc r4.x, r0.w, r4.y, r0.y
					  add r5.x, -r2.x, r3.w
					  add r5.y, -r3.y, r4.x
					  add r6.x, r2.x, r3.w
					  add r6.y, r3.y, r4.x
					  mad r3.w, r0.z, l(-2.000000), l(3.000000)
					  sample_l r4.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)
					  mul r0.z, r0.z, r0.z
					  sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, l(0.000000)
					  movc r2.y, r3.z, r2.z, r2.y
					  mul r2.z, r3.x, l(0.250000)
					  mad r3.x, -r2.y, l(0.500000), r1.y
					  mul r0.z, r0.z, r3.w
					  lt r3.x, r3.x, l(0.000000)
					  mad r4.y, -r2.y, l(0.500000), r4.y
					  mad r4.x, -r2.y, l(0.500000), r7.y
					  ge r3.zw, |r4.yyyx|, r2.zzzz
					  add r5.z, -r2.x, r5.x
					  movc r5.x, r3.z, r5.x, r5.z
					  add r5.w, -r3.y, r5.y
					  movc r5.z, r3.z, r5.y, r5.w
					  not r5.yw, r3.zzzw
					  or r5.y, r5.w, r5.y
					  add r5.w, r2.x, r6.x
					  movc r6.x, r3.w, r6.x, r5.w
					  add r5.w, r3.y, r6.y
					  movc r6.z, r3.w, r6.y, r5.w
					  if_nz r5.y
					    if_z r3.z
					      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					    else 
					      mov r7.x, r4.y
					    endif 
					    if_z r3.w
					      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					    endif 
					    mad r5.y, -r2.y, l(0.500000), r7.x
					    movc r4.y, r3.z, r7.x, r5.y
					    mad r3.z, -r2.y, l(0.500000), r4.x
					    movc r4.x, r3.w, r4.x, r3.z
					    ge r3.zw, |r4.yyyx|, r2.zzzz
					    add r5.y, -r2.x, r5.x
					    movc r5.x, r3.z, r5.x, r5.y
					    add r5.y, -r3.y, r5.z
					    movc r5.z, r3.z, r5.z, r5.y
					    not r5.yw, r3.zzzw
					    or r5.y, r5.w, r5.y
					    add r5.w, r2.x, r6.x
					    movc r6.x, r3.w, r6.x, r5.w
					    add r5.w, r3.y, r6.z
					    movc r6.z, r3.w, r6.z, r5.w
					    if_nz r5.y
					      if_z r3.z
					        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					      else 
					        mov r7.x, r4.y
					      endif 
					      if_z r3.w
					        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					      endif 
					      mad r5.y, -r2.y, l(0.500000), r7.x
					      movc r4.y, r3.z, r7.x, r5.y
					      mad r3.z, -r2.y, l(0.500000), r4.x
					      movc r4.x, r3.w, r4.x, r3.z
					      ge r3.zw, |r4.yyyx|, r2.zzzz
					      add r5.y, -r2.x, r5.x
					      movc r5.x, r3.z, r5.x, r5.y
					      add r5.y, -r3.y, r5.z
					      movc r5.z, r3.z, r5.z, r5.y
					      not r5.yw, r3.zzzw
					      or r5.y, r5.w, r5.y
					      add r5.w, r2.x, r6.x
					      movc r6.x, r3.w, r6.x, r5.w
					      add r5.w, r3.y, r6.z
					      movc r6.z, r3.w, r6.z, r5.w
					      if_nz r5.y
					        if_z r3.z
					          sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					        else 
					          mov r7.x, r4.y
					        endif 
					        if_z r3.w
					          sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					        endif 
					        mad r5.y, -r2.y, l(0.500000), r7.x
					        movc r4.y, r3.z, r7.x, r5.y
					        mad r3.z, -r2.y, l(0.500000), r4.x
					        movc r4.x, r3.w, r4.x, r3.z
					        ge r3.zw, |r4.yyyx|, r2.zzzz
					        add r5.y, -r2.x, r5.x
					        movc r5.x, r3.z, r5.x, r5.y
					        add r5.y, -r3.y, r5.z
					        movc r5.z, r3.z, r5.z, r5.y
					        not r5.yw, r3.zzzw
					        or r5.y, r5.w, r5.y
					        add r5.w, r2.x, r6.x
					        movc r6.x, r3.w, r6.x, r5.w
					        add r5.w, r3.y, r6.z
					        movc r6.z, r3.w, r6.z, r5.w
					        if_nz r5.y
					          if_z r3.z
					            sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					          else 
					            mov r7.x, r4.y
					          endif 
					          if_z r3.w
					            sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					          endif 
					          mad r5.y, -r2.y, l(0.500000), r7.x
					          movc r4.y, r3.z, r7.x, r5.y
					          mad r3.z, -r2.y, l(0.500000), r4.x
					          movc r4.x, r3.w, r4.x, r3.z
					          ge r3.zw, |r4.yyyx|, r2.zzzz
					          mad r5.y, -r2.x, l(1.500000), r5.x
					          movc r5.x, r3.z, r5.x, r5.y
					          mad r5.y, -r3.y, l(1.500000), r5.z
					          movc r5.z, r3.z, r5.z, r5.y
					          not r5.yw, r3.zzzw
					          or r5.y, r5.w, r5.y
					          mad r5.w, r2.x, l(1.500000), r6.x
					          movc r6.x, r3.w, r6.x, r5.w
					          mad r5.w, r3.y, l(1.500000), r6.z
					          movc r6.z, r3.w, r6.z, r5.w
					          if_nz r5.y
					            if_z r3.z
					              sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					            else 
					              mov r7.x, r4.y
					            endif 
					            if_z r3.w
					              sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					            endif 
					            mad r5.y, -r2.y, l(0.500000), r7.x
					            movc r4.y, r3.z, r7.x, r5.y
					            mad r3.z, -r2.y, l(0.500000), r4.x
					            movc r4.x, r3.w, r4.x, r3.z
					            ge r3.zw, |r4.yyyx|, r2.zzzz
					            mad r5.y, -r2.x, l(2.000000), r5.x
					            movc r5.x, r3.z, r5.x, r5.y
					            mad r5.y, -r3.y, l(2.000000), r5.z
					            movc r5.z, r3.z, r5.z, r5.y
					            not r5.yw, r3.zzzw
					            or r5.y, r5.w, r5.y
					            mad r5.w, r2.x, l(2.000000), r6.x
					            movc r6.x, r3.w, r6.x, r5.w
					            mad r5.w, r3.y, l(2.000000), r6.z
					            movc r6.z, r3.w, r6.z, r5.w
					            if_nz r5.y
					              if_z r3.z
					                sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					              else 
					                mov r7.x, r4.y
					              endif 
					              if_z r3.w
					                sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					              endif 
					              mad r5.y, -r2.y, l(0.500000), r7.x
					              movc r4.y, r3.z, r7.x, r5.y
					              mad r3.z, -r2.y, l(0.500000), r4.x
					              movc r4.x, r3.w, r4.x, r3.z
					              ge r3.zw, |r4.yyyx|, r2.zzzz
					              mad r5.y, -r2.x, l(2.000000), r5.x
					              movc r5.x, r3.z, r5.x, r5.y
					              mad r5.y, -r3.y, l(2.000000), r5.z
					              movc r5.z, r3.z, r5.z, r5.y
					              not r5.yw, r3.zzzw
					              or r5.y, r5.w, r5.y
					              mad r5.w, r2.x, l(2.000000), r6.x
					              movc r6.x, r3.w, r6.x, r5.w
					              mad r5.w, r3.y, l(2.000000), r6.z
					              movc r6.z, r3.w, r6.z, r5.w
					              if_nz r5.y
					                if_z r3.z
					                  sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                else 
					                  mov r7.x, r4.y
					                endif 
					                if_z r3.w
					                  sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                endif 
					                mad r5.y, -r2.y, l(0.500000), r7.x
					                movc r4.y, r3.z, r7.x, r5.y
					                mad r3.z, -r2.y, l(0.500000), r4.x
					                movc r4.x, r3.w, r4.x, r3.z
					                ge r3.zw, |r4.yyyx|, r2.zzzz
					                mad r5.y, -r2.x, l(2.000000), r5.x
					                movc r5.x, r3.z, r5.x, r5.y
					                mad r5.y, -r3.y, l(2.000000), r5.z
					                movc r5.z, r3.z, r5.z, r5.y
					                not r5.yw, r3.zzzw
					                or r5.y, r5.w, r5.y
					                mad r5.w, r2.x, l(2.000000), r6.x
					                movc r6.x, r3.w, r6.x, r5.w
					                mad r5.w, r3.y, l(2.000000), r6.z
					                movc r6.z, r3.w, r6.z, r5.w
					                if_nz r5.y
					                  if_z r3.z
					                    sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                  else 
					                    mov r7.x, r4.y
					                  endif 
					                  if_z r3.w
					                    sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                  endif 
					                  mad r5.y, -r2.y, l(0.500000), r7.x
					                  movc r4.y, r3.z, r7.x, r5.y
					                  mad r3.z, -r2.y, l(0.500000), r4.x
					                  movc r4.x, r3.w, r4.x, r3.z
					                  ge r3.zw, |r4.yyyx|, r2.zzzz
					                  mad r5.y, -r2.x, l(2.000000), r5.x
					                  movc r5.x, r3.z, r5.x, r5.y
					                  mad r5.y, -r3.y, l(2.000000), r5.z
					                  movc r5.z, r3.z, r5.z, r5.y
					                  not r5.yw, r3.zzzw
					                  or r5.y, r5.w, r5.y
					                  mad r5.w, r2.x, l(2.000000), r6.x
					                  movc r6.x, r3.w, r6.x, r5.w
					                  mad r5.w, r3.y, l(2.000000), r6.z
					                  movc r6.z, r3.w, r6.z, r5.w
					                  if_nz r5.y
					                    if_z r3.z
					                      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                    else 
					                      mov r7.x, r4.y
					                    endif 
					                    if_z r3.w
					                      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                    endif 
					                    mad r5.y, -r2.y, l(0.500000), r7.x
					                    movc r4.y, r3.z, r7.x, r5.y
					                    mad r3.z, -r2.y, l(0.500000), r4.x
					                    movc r4.x, r3.w, r4.x, r3.z
					                    ge r3.zw, |r4.yyyx|, r2.zzzz
					                    mad r5.y, -r2.x, l(4.000000), r5.x
					                    movc r5.x, r3.z, r5.x, r5.y
					                    mad r5.y, -r3.y, l(4.000000), r5.z
					                    movc r5.z, r3.z, r5.z, r5.y
					                    not r5.yw, r3.zzzw
					                    or r5.y, r5.w, r5.y
					                    mad r5.w, r2.x, l(4.000000), r6.x
					                    movc r6.x, r3.w, r6.x, r5.w
					                    mad r5.w, r3.y, l(4.000000), r6.z
					                    movc r6.z, r3.w, r6.z, r5.w
					                    if_nz r5.y
					                      if_z r3.z
					                        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                      else 
					                        mov r7.x, r4.y
					                      endif 
					                      if_z r3.w
					                        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                      endif 
					                      mad r4.z, -r2.y, l(0.500000), r7.x
					                      movc r4.y, r3.z, r7.x, r4.z
					                      mad r2.y, -r2.y, l(0.500000), r4.x
					                      movc r4.x, r3.w, r4.x, r2.y
					                      ge r2.yz, |r4.yyxy|, r2.zzzz
					                      mad r3.z, -r2.x, l(8.000000), r5.x
					                      movc r5.x, r2.y, r5.x, r3.z
					                      mad r3.z, -r3.y, l(8.000000), r5.z
					                      movc r5.z, r2.y, r5.z, r3.z
					                      mad r2.x, r2.x, l(8.000000), r6.x
					                      movc r6.x, r2.z, r6.x, r2.x
					                      mad r2.x, r3.y, l(8.000000), r6.z
					                      movc r6.z, r2.z, r6.z, r2.x
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					  add r2.xz, r0.xxyx, -r5.xxzx
					  movc r2.x, r0.w, r2.x, r2.z
					  add r2.yz, -r0.xxyx, r6.xxzx
					  movc r2.y, r0.w, r2.y, r2.z
					  lt r3.yz, r4.yyxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  add r2.z, r2.x, r2.y
					  ine r3.xy, r3.xxxx, r3.yzyy
					  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					  lt r3.z, r2.x, r2.y
					  min r2.x, r2.y, r2.x
					  movc r2.y, r3.z, r3.x, r3.y
					  mul r0.z, r0.z, r0.z
					  mad r2.x, r2.x, -r2.z, l(0.500000)
					  mul r0.z, r0.z, cb0[7].x
					  and r2.x, r2.x, r2.y
					  max r0.z, r0.z, r2.x
					  mad r2.xy, r0.zzzz, r2.wwww, r0.xyxx
					  movc r3.x, r0.w, r0.x, r2.x
					  movc r3.y, r0.w, r2.y, r0.y
					  sample_l r1.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					endif 
					mad r0.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
					sample r0.xyzw, r0.xyxx, t1.xyzw, s1
					dp3 r0.w, r1.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
					sqrt r0.w, r0.w
					mad r0.w, cb0[4].x, -r0.w, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xyzx
					mul r0.xyz, r0.xyzx, cb0[4].yyyy
					mad o0.xyz, r0.xyzx, r0.wwww, r1.xyzx
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d9 " {
					Keywords { "GRAIN" "DITHERING" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DitheringCoords;
					//   sampler2D _DitheringTex;
					//   sampler2D _GrainTex;
					//   float2 _Grain_Params1;
					//   float4 _Grain_Params2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float4 _MainTex_TexelSize;
					//   float3 _QualitySettings;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex_ST        c1       1
					//   _Grain_Params1     c2       1
					//   _Grain_Params2     c3       1
					//   _DitheringCoords   c4       1
					//   _QualitySettings   c5       1
					//   _MainTex           s0       1
					//   _GrainTex          s1       1
					//   _DitheringTex      s2       1
					//
					
					    ps_3_0
					    def c6, 0.0833333358, 0.5, -2, 3
					    def c7, 0.25, 1.5, 4, 8
					    def c8, 0.212599993, 0.715200007, 0.0722000003, 0.00392156886
					    def c9, 0, 1, -1, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v0, c1, c1.zwzw
					    mov r0.z, c9.x
					    texldl r1, r0.xyzz, s0
					    mov r2.xyz, c9
					    mad r3.xyz, c0.yxyw, r2.yyxw, r0.yxyw
					    mov r0.w, r3.x
					    texldl r4, r0.xwzz, s0
					    mul r3, r3.yzyy, c9.yyxx
					    texldl r3, r3, s0
					    mad r3.xzw, c0.yyxy, r2.zyzx, r0.yyxy
					    mov r5.xzw, r0.xyzz
					    mov r5.y, r3.x
					    texldl r6, r5, s0
					    mul r7, r3.zwzz, c9.yyxx
					    texldl r7, r7, s0
					    max r0.z, r4.y, r1.y
					    min r0.w, r1.y, r4.y
					    max r2.w, r3.y, r0.z
					    min r4.x, r0.w, r3.y
					    max r0.z, r6.y, r7.y
					    min r0.w, r7.y, r6.y
					    max r3.x, r0.z, r2.w
					    min r2.w, r4.x, r0.w
					    mul r0.z, r3.x, c5.y
					    add r0.w, -r2.w, r3.x
					    max r2.w, c5.z, r0.z
					    if_lt r0.w, r2.w
					    else
					      add r8.xy, r0, -c0
					      mov r8.zw, c9.x
					      texldl r8, r8, s0
					      add r9.xy, r0, c0
					      mov r9.zw, c9.x
					      texldl r9, r9, s0
					      mad r10, c0.xyxy, r2.yzzy, r0.xyxy
					      mul r11, r10.xyxx, c9.yyxx
					      texldl r11, r11, s0
					      mul r10, r10.zwxx, c9.yyxx
					      texldl r10, r10, s0
					      add r0.z, r4.y, r6.y
					      add r2.z, r3.y, r7.y
					      rcp r0.w, r0.w
					      add r2.w, r0.z, r2.z
					      mad r0.z, r1.y, c9.w, r0.z
					      mad r2.z, r1.y, c9.w, r2.z
					      add r3.x, r9.y, r11.y
					      add r3.z, r8.y, r11.y
					      mad r3.w, r3.y, c9.w, r3.x
					      mad r3.z, r6.y, c9.w, r3.z
					      add r4.x, r8.y, r10.y
					      add r4.z, r9.y, r10.y
					      mad r0.z, r0_abs.z, -c9.w, r3_abs.w
					      mad r2.z, r2_abs.z, -c9.w, r3_abs.z
					      mad r3.z, r7.y, c9.w, r4.x
					      mad r3.w, r4.y, c9.w, r4.z
					      add r0.z, r0.z, r3_abs.z
					      add r2.z, r2.z, r3_abs.w
					      add r3.x, r3.x, r4.x
					      add r0.z, r0.z, -r2.z
					      mad r2.z, r2.w, -c9.w, r3.x
					      cmp r2.w, r0.z, r6.y, r7.y
					      cmp r3.x, r0.z, r4.y, r3.y
					      cmp r3.y, r0.z, c0.y, c0.x
					      mad r2.z, r2.z, c6.x, -r1.y
					      add r3.z, -r1.y, r2.w
					      add r3.w, -r1.y, r3.x
					      add r2.w, r1.y, r2.w
					      add r3.x, r1.y, r3.x
					      add r4.x, -r3_abs.w, r3_abs.z
					      max r4.y, r3_abs.z, r3_abs.w
					      cmp r3.y, r4.x, -r3.y, r3.y
					      mul_sat r0.w, r0.w, r2_abs.z
					      cmp r2.z, r0.z, c0.x, r2.x
					      cmp r2.x, r0.z, r2.x, c0.y
					      mad r3.zw, r3.y, c6.y, r0.xyxy
					      cmp r3.z, r0.z, r5.x, r3.z
					      cmp r3.w, r0.z, r3.w, r0.y
					      add r6.xy, -r2.zxzw, r3.zwzw
					      add r7.xy, r2.zxzw, r3.zwzw
					      mad r3.z, r0.w, c6.z, c6.w
					      mov r6.zw, c9.x
					      texldl r8, r6, s0
					      mul r0.w, r0.w, r0.w
					      mov r7.zw, c9.x
					      texldl r9, r7, s0
					      cmp r2.w, r4.x, r2.w, r3.x
					      mul r3.x, r4.y, c7.x
					      mad r3.w, r2.w, -c6.y, r1.y
					      mul r0.w, r0.w, r3.z
					      mad r4.x, r2.w, -c6.y, r8.y
					      mad r4.z, r2.w, -c6.y, r9.y
					      mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					      add r3.z, -r2.z, r6.x
					      cmp r8.x, r5.y, r6.x, r3.z
					      add r3.z, -r2.x, r6.y
					      cmp r8.y, r5.y, r6.y, r3.z
					      cmp r6.xy, r5.yzzw, c9.x, c9.y
					      add r3.z, r6.y, r6.x
					      add r4.w, r2.z, r7.x
					      cmp r6.x, r5.z, r7.x, r4.w
					      add r4.w, r2.x, r7.y
					      cmp r6.y, r5.z, r7.y, r4.w
					      if_lt -r3.z, c9.x
					        if_ge r4_abs.x, r3.x
					        else
					          mov r8.zw, c9.x
					          texldl r7, r8, s0
					          mov r4.x, r7.y
					        endif
					        if_ge r4_abs.z, r3.x
					        else
					          mov r6.zw, c9.x
					          texldl r7, r6, s0
					          mov r4.z, r7.y
					        endif
					        mad r3.z, r2.w, -c6.y, r4.x
					        cmp r4.x, r5.y, r4.x, r3.z
					        mad r3.z, r2.w, -c6.y, r4.z
					        cmp r4.z, r5.z, r4.z, r3.z
					        mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					        add r3.z, -r2.z, r8.x
					        cmp r8.x, r5.y, r8.x, r3.z
					        add r3.z, -r2.x, r8.y
					        cmp r8.y, r5.y, r8.y, r3.z
					        cmp r7.xy, r5.yzzw, c9.x, c9.y
					        add r3.z, r7.y, r7.x
					        add r4.w, r2.z, r6.x
					        cmp r6.x, r5.z, r6.x, r4.w
					        add r4.w, r2.x, r6.y
					        cmp r6.y, r5.z, r6.y, r4.w
					        if_lt -r3.z, c9.x
					          if_ge r4_abs.x, r3.x
					          else
					            mov r8.zw, c9.x
					            texldl r7, r8, s0
					            mov r4.x, r7.y
					          endif
					          if_ge r4_abs.z, r3.x
					          else
					            mov r6.zw, c9.x
					            texldl r7, r6, s0
					            mov r4.z, r7.y
					          endif
					          mad r3.z, r2.w, -c6.y, r4.x
					          cmp r4.x, r5.y, r4.x, r3.z
					          mad r3.z, r2.w, -c6.y, r4.z
					          cmp r4.z, r5.z, r4.z, r3.z
					          mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					          add r3.z, -r2.z, r8.x
					          cmp r8.x, r5.y, r8.x, r3.z
					          add r3.z, -r2.x, r8.y
					          cmp r8.y, r5.y, r8.y, r3.z
					          cmp r7.xy, r5.yzzw, c9.x, c9.y
					          add r3.z, r7.y, r7.x
					          add r4.w, r2.z, r6.x
					          cmp r6.x, r5.z, r6.x, r4.w
					          add r4.w, r2.x, r6.y
					          cmp r6.y, r5.z, r6.y, r4.w
					          if_lt -r3.z, c9.x
					            if_ge r4_abs.x, r3.x
					            else
					              mov r8.zw, c9.x
					              texldl r7, r8, s0
					              mov r4.x, r7.y
					            endif
					            if_ge r4_abs.z, r3.x
					            else
					              mov r6.zw, c9.x
					              texldl r7, r6, s0
					              mov r4.z, r7.y
					            endif
					            mad r3.z, r2.w, -c6.y, r4.x
					            cmp r4.x, r5.y, r4.x, r3.z
					            mad r3.z, r2.w, -c6.y, r4.z
					            cmp r4.z, r5.z, r4.z, r3.z
					            mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					            add r3.z, -r2.z, r8.x
					            cmp r8.x, r5.y, r8.x, r3.z
					            add r3.z, -r2.x, r8.y
					            cmp r8.y, r5.y, r8.y, r3.z
					            cmp r7.xy, r5.yzzw, c9.x, c9.y
					            add r3.z, r7.y, r7.x
					            add r4.w, r2.z, r6.x
					            cmp r6.x, r5.z, r6.x, r4.w
					            add r4.w, r2.x, r6.y
					            cmp r6.y, r5.z, r6.y, r4.w
					            if_lt -r3.z, c9.x
					              if_ge r4_abs.x, r3.x
					              else
					                mov r8.zw, c9.x
					                texldl r7, r8, s0
					                mov r4.x, r7.y
					              endif
					              if_ge r4_abs.z, r3.x
					              else
					                mov r6.zw, c9.x
					                texldl r7, r6, s0
					                mov r4.z, r7.y
					              endif
					              mad r3.z, r2.w, -c6.y, r4.x
					              cmp r4.x, r5.y, r4.x, r3.z
					              mad r3.z, r2.w, -c6.y, r4.z
					              cmp r4.z, r5.z, r4.z, r3.z
					              mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					              mad r3.z, r2.z, -c7.y, r8.x
					              cmp r8.x, r5.y, r8.x, r3.z
					              mad r3.z, r2.x, -c7.y, r8.y
					              cmp r8.y, r5.y, r8.y, r3.z
					              cmp r7.xy, r5.yzzw, c9.x, c9.y
					              add r3.z, r7.y, r7.x
					              mad r4.w, r2.z, c7.y, r6.x
					              cmp r6.x, r5.z, r6.x, r4.w
					              mad r4.w, r2.x, c7.y, r6.y
					              cmp r6.y, r5.z, r6.y, r4.w
					              if_lt -r3.z, c9.x
					                if_ge r4_abs.x, r3.x
					                else
					                  mov r8.zw, c9.x
					                  texldl r7, r8, s0
					                  mov r4.x, r7.y
					                endif
					                if_ge r4_abs.z, r3.x
					                else
					                  mov r6.zw, c9.x
					                  texldl r7, r6, s0
					                  mov r4.z, r7.y
					                endif
					                mad r3.z, r2.w, -c6.y, r4.x
					                cmp r4.x, r5.y, r4.x, r3.z
					                mad r3.z, r2.w, -c6.y, r4.z
					                cmp r4.z, r5.z, r4.z, r3.z
					                mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					                mad r3.z, r2.z, c9.w, r8.x
					                cmp r8.x, r5.y, r8.x, r3.z
					                mad r3.z, r2.x, c9.w, r8.y
					                cmp r8.y, r5.y, r8.y, r3.z
					                cmp r7.xy, r5.yzzw, c9.x, c9.y
					                add r3.z, r7.y, r7.x
					                mad r4.w, r2.z, -c9.w, r6.x
					                cmp r6.x, r5.z, r6.x, r4.w
					                mad r4.w, r2.x, -c9.w, r6.y
					                cmp r6.y, r5.z, r6.y, r4.w
					                if_lt -r3.z, c9.x
					                  if_ge r4_abs.x, r3.x
					                  else
					                    mov r8.zw, c9.x
					                    texldl r7, r8, s0
					                    mov r4.x, r7.y
					                  endif
					                  if_ge r4_abs.z, r3.x
					                  else
					                    mov r6.zw, c9.x
					                    texldl r7, r6, s0
					                    mov r4.z, r7.y
					                  endif
					                  mad r3.z, r2.w, -c6.y, r4.x
					                  cmp r4.x, r5.y, r4.x, r3.z
					                  mad r3.z, r2.w, -c6.y, r4.z
					                  cmp r4.z, r5.z, r4.z, r3.z
					                  mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					                  mad r3.z, r2.z, c9.w, r8.x
					                  cmp r8.x, r5.y, r8.x, r3.z
					                  mad r3.z, r2.x, c9.w, r8.y
					                  cmp r8.y, r5.y, r8.y, r3.z
					                  cmp r7.xy, r5.yzzw, c9.x, c9.y
					                  add r3.z, r7.y, r7.x
					                  mad r4.w, r2.z, -c9.w, r6.x
					                  cmp r6.x, r5.z, r6.x, r4.w
					                  mad r4.w, r2.x, -c9.w, r6.y
					                  cmp r6.y, r5.z, r6.y, r4.w
					                  if_lt -r3.z, c9.x
					                    if_ge r4_abs.x, r3.x
					                    else
					                      mov r8.zw, c9.x
					                      texldl r7, r8, s0
					                      mov r4.x, r7.y
					                    endif
					                    if_ge r4_abs.z, r3.x
					                    else
					                      mov r6.zw, c9.x
					                      texldl r7, r6, s0
					                      mov r4.z, r7.y
					                    endif
					                    mad r3.z, r2.w, -c6.y, r4.x
					                    cmp r4.x, r5.y, r4.x, r3.z
					                    mad r3.z, r2.w, -c6.y, r4.z
					                    cmp r4.z, r5.z, r4.z, r3.z
					                    mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					                    mad r3.z, r2.z, c9.w, r8.x
					                    cmp r8.x, r5.y, r8.x, r3.z
					                    mad r3.z, r2.x, c9.w, r8.y
					                    cmp r8.y, r5.y, r8.y, r3.z
					                    cmp r7.xy, r5.yzzw, c9.x, c9.y
					                    add r3.z, r7.y, r7.x
					                    mad r4.w, r2.z, -c9.w, r6.x
					                    cmp r6.x, r5.z, r6.x, r4.w
					                    mad r4.w, r2.x, -c9.w, r6.y
					                    cmp r6.y, r5.z, r6.y, r4.w
					                    if_lt -r3.z, c9.x
					                      if_ge r4_abs.x, r3.x
					                      else
					                        mov r8.zw, c9.x
					                        texldl r7, r8, s0
					                        mov r4.x, r7.y
					                      endif
					                      if_ge r4_abs.z, r3.x
					                      else
					                        mov r6.zw, c9.x
					                        texldl r7, r6, s0
					                        mov r4.z, r7.y
					                      endif
					                      mad r3.z, r2.w, -c6.y, r4.x
					                      cmp r4.x, r5.y, r4.x, r3.z
					                      mad r3.z, r2.w, -c6.y, r4.z
					                      cmp r4.z, r5.z, r4.z, r3.z
					                      mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					                      mad r3.z, r2.z, c9.w, r8.x
					                      cmp r8.x, r5.y, r8.x, r3.z
					                      mad r3.z, r2.x, c9.w, r8.y
					                      cmp r8.y, r5.y, r8.y, r3.z
					                      cmp r7.xy, r5.yzzw, c9.x, c9.y
					                      add r3.z, r7.y, r7.x
					                      mad r4.w, r2.z, -c9.w, r6.x
					                      cmp r6.x, r5.z, r6.x, r4.w
					                      mad r4.w, r2.x, -c9.w, r6.y
					                      cmp r6.y, r5.z, r6.y, r4.w
					                      if_lt -r3.z, c9.x
					                        if_ge r4_abs.x, r3.x
					                        else
					                          mov r8.zw, c9.x
					                          texldl r7, r8, s0
					                          mov r4.x, r7.y
					                        endif
					                        if_ge r4_abs.z, r3.x
					                        else
					                          mov r6.zw, c9.x
					                          texldl r7, r6, s0
					                          mov r4.z, r7.y
					                        endif
					                        mad r3.z, r2.w, -c6.y, r4.x
					                        cmp r4.x, r5.y, r4.x, r3.z
					                        mad r3.z, r2.w, -c6.y, r4.z
					                        cmp r4.z, r5.z, r4.z, r3.z
					                        mad r5.yz, r4.y, -c7.x, r4_abs.xxzw
					                        mad r3.z, r2.z, -c7.z, r8.x
					                        cmp r8.x, r5.y, r8.x, r3.z
					                        mad r3.z, r2.x, -c7.z, r8.y
					                        cmp r8.y, r5.y, r8.y, r3.z
					                        cmp r7.xy, r5.yzzw, c9.x, c9.y
					                        add r3.z, r7.y, r7.x
					                        mad r4.w, r2.z, c7.z, r6.x
					                        cmp r6.x, r5.z, r6.x, r4.w
					                        mad r4.w, r2.x, c7.z, r6.y
					                        cmp r6.y, r5.z, r6.y, r4.w
					                        if_lt -r3.z, c9.x
					                          if_ge r4_abs.x, r3.x
					                          else
					                            mov r8.zw, c9.x
					                            texldl r7, r8, s0
					                            mov r4.x, r7.y
					                          endif
					                          if_ge r4_abs.z, r3.x
					                          else
					                            mov r6.zw, c9.x
					                            texldl r7, r6, s0
					                            mov r4.z, r7.y
					                          endif
					                          mad r3.x, r2.w, -c6.y, r4.x
					                          cmp r4.x, r5.y, r4.x, r3.x
					                          mad r2.w, r2.w, -c6.y, r4.z
					                          cmp r4.z, r5.z, r4.z, r2.w
					                          mad r3.xz, r4.y, -c7.x, r4_abs
					                          mad r2.w, r2.z, -c7.w, r8.x
					                          cmp r8.x, r3.x, r8.x, r2.w
					                          mad r2.w, r2.x, -c7.w, r8.y
					                          cmp r8.y, r3.x, r8.y, r2.w
					                          mad r2.z, r2.z, c7.w, r6.x
					                          mad r2.x, r2.x, c7.w, r6.y
					                          cmp r6.xy, r3.z, r6, r2.zxzw
					                        endif
					                      endif
					                    endif
					                  endif
					                endif
					              endif
					            endif
					          endif
					        endif
					      endif
					      add r2.x, r5.x, -r8.x
					      add r2.w, r0.y, -r8.y
					      cmp r2.x, r0.z, r2.x, r2.w
					      add r2.zw, -r0.xyxy, r6.xyxy
					      cmp r2.z, r0.z, r2.z, r2.w
					      cmp r3.xz, r4, c9.x, c9.y
					      cmp r2.w, r3.w, -c9.x, -c9.y
					      add r3.xz, r2.w, r3
					      add r2.w, r2.x, r2.z
					      rcp r2.w, r2.w
					      add r3.w, -r2.z, r2.x
					      min r4.x, r2.z, r2.x
					      cmp r2.x, r3.w, r3_abs.z, r3_abs.x
					      mul r0.w, r0.w, r0.w
					      mad r2.z, r4.x, -r2.w, c6.y
					      mul r0.w, r0.w, c5.x
					      cmp r2.x, -r2.x, c9.x, r2.z
					      max r3.x, r2.x, r0.w
					      mad r0.xw, r3.x, r3.y, r0.xyzy
					      cmp r3.x, r0.z, r5.x, r0.x
					      cmp r3.y, r0.z, r0.w, r0.y
					      mov r3.zw, c9.x
					      texldl r1, r3, s0
					    endif
					    mad r0.xy, v0, c3, c3.zwzw
					    texld r0, r0, s1
					    dp3_pp r0.w, r1, c8
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.w, r0.w
					    mad r0.w, c2.x, -r0.w, r2.y
					    mul r0.xyz, r0, r1
					    mul r0.xyz, r0, c2.y
					    mad_pp r0.xyz, r0, r0.w, r1
					    mad r1.xy, v0, c4, c4.zwzw
					    texld r1, r1, s2
					    mad r0.w, r1.w, -c9.w, -c9.y
					    cmp r1.x, -r0.w, c9.x, c9.y
					    cmp r1.y, r0.w, -c9.x, -c9.y
					    add r1.x, r1.y, r1.x
					    add r0.w, -r0_abs.w, c9.y
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r0.w, -r0.w, c9.y
					    mul r0.w, r0.w, r1.x
					    mad_pp oC0.xyz, r0.w, c8.w, r0
					    mov_pp oC0.w, c9.y
					
					// approximately 529 instruction slots used (66 texture, 463 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "GRAIN" "DITHERING" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 10
					mad r0.xy, v1.xyxx, cb0[3].xyxx, cb0[3].zwzz
					sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
					mad r2.xyzw, cb0[2].xyxy, l(0.000000, 1.000000, 1.000000, 0.000000), r0.xyxy
					sample_l r3.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r2.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
					mad r4.xyzw, cb0[2].xyxy, l(0.000000, -1.000000, -1.000000, 0.000000), r0.xyxy
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					max r0.z, r1.y, r3.y
					min r0.w, r1.y, r3.y
					max r0.z, r0.z, r2.y
					min r0.w, r0.w, r2.y
					max r2.x, r4.y, r5.y
					min r2.z, r4.y, r5.y
					max r0.z, r0.z, r2.x
					min r0.w, r0.w, r2.z
					mul r2.x, r0.z, cb0[7].y
					add r0.z, -r0.w, r0.z
					max r0.w, r2.x, cb0[7].z
					ge r0.w, r0.z, r0.w
					if_nz r0.w
					  add r2.xz, r0.xxyx, -cb0[2].xxyx
					  sample_l r6.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  add r2.xz, r0.xxyx, cb0[2].xxyx
					  sample_l r7.xyzw, r2.xzxx, t0.xyzw, s0, l(0.000000)
					  mad r8.xyzw, cb0[2].xyxy, l(1.000000, -1.000000, -1.000000, 1.000000), r0.xyxy
					  sample_l r9.xyzw, r8.xyxx, t0.xyzw, s0, l(0.000000)
					  sample_l r8.xyzw, r8.zwzz, t0.xyzw, s0, l(0.000000)
					  add r0.w, r3.y, r5.y
					  add r2.x, r2.y, r4.y
					  div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					  add r2.z, r0.w, r2.x
					  mad r0.w, r1.y, l(-2.000000), r0.w
					  mad r2.x, r1.y, l(-2.000000), r2.x
					  add r2.w, r7.y, r9.y
					  add r3.x, r6.y, r9.y
					  mad r3.z, r2.y, l(-2.000000), r2.w
					  mad r3.x, r5.y, l(-2.000000), r3.x
					  add r3.w, r6.y, r8.y
					  add r4.x, r7.y, r8.y
					  mad r0.w, |r0.w|, l(2.000000), |r3.z|
					  mad r2.x, |r2.x|, l(2.000000), |r3.x|
					  mad r3.x, r4.y, l(-2.000000), r3.w
					  mad r3.z, r3.y, l(-2.000000), r4.x
					  add r0.w, r0.w, |r3.x|
					  add r2.x, r2.x, |r3.z|
					  add r2.w, r2.w, r3.w
					  ge r0.w, r0.w, r2.x
					  mad r2.x, r2.z, l(2.000000), r2.w
					  movc r2.z, r0.w, r5.y, r4.y
					  movc r2.y, r0.w, r3.y, r2.y
					  movc r2.w, r0.w, cb0[2].y, cb0[2].x
					  mad r2.x, r2.x, l(0.083333), -r1.y
					  add r3.xy, -r1.yyyy, r2.zyzz
					  add r2.yz, r1.yyyy, r2.yyzy
					  ge r3.z, |r3.x|, |r3.y|
					  max r3.x, |r3.y|, |r3.x|
					  movc r2.w, r3.z, -r2.w, r2.w
					  mul_sat r0.z, r0.z, |r2.x|
					  and r2.x, r0.w, cb0[2].x
					  movc r3.y, r0.w, l(0), cb0[2].y
					  mad r4.xy, r2.wwww, l(0.500000, 0.500000, 0.000000, 0.000000), r0.xyxx
					  movc r3.w, r0.w, r0.x, r4.x
					  movc r4.x, r0.w, r4.y, r0.y
					  add r5.x, -r2.x, r3.w
					  add r5.y, -r3.y, r4.x
					  add r6.x, r2.x, r3.w
					  add r6.y, r3.y, r4.x
					  mad r3.w, r0.z, l(-2.000000), l(3.000000)
					  sample_l r4.xyzw, r5.xyxx, t0.xyzw, s0, l(0.000000)
					  mul r0.z, r0.z, r0.z
					  sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, l(0.000000)
					  movc r2.y, r3.z, r2.z, r2.y
					  mul r2.z, r3.x, l(0.250000)
					  mad r3.x, -r2.y, l(0.500000), r1.y
					  mul r0.z, r0.z, r3.w
					  lt r3.x, r3.x, l(0.000000)
					  mad r4.y, -r2.y, l(0.500000), r4.y
					  mad r4.x, -r2.y, l(0.500000), r7.y
					  ge r3.zw, |r4.yyyx|, r2.zzzz
					  add r5.z, -r2.x, r5.x
					  movc r5.x, r3.z, r5.x, r5.z
					  add r5.w, -r3.y, r5.y
					  movc r5.z, r3.z, r5.y, r5.w
					  not r5.yw, r3.zzzw
					  or r5.y, r5.w, r5.y
					  add r5.w, r2.x, r6.x
					  movc r6.x, r3.w, r6.x, r5.w
					  add r5.w, r3.y, r6.y
					  movc r6.z, r3.w, r6.y, r5.w
					  if_nz r5.y
					    if_z r3.z
					      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					    else 
					      mov r7.x, r4.y
					    endif 
					    if_z r3.w
					      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					    endif 
					    mad r5.y, -r2.y, l(0.500000), r7.x
					    movc r4.y, r3.z, r7.x, r5.y
					    mad r3.z, -r2.y, l(0.500000), r4.x
					    movc r4.x, r3.w, r4.x, r3.z
					    ge r3.zw, |r4.yyyx|, r2.zzzz
					    add r5.y, -r2.x, r5.x
					    movc r5.x, r3.z, r5.x, r5.y
					    add r5.y, -r3.y, r5.z
					    movc r5.z, r3.z, r5.z, r5.y
					    not r5.yw, r3.zzzw
					    or r5.y, r5.w, r5.y
					    add r5.w, r2.x, r6.x
					    movc r6.x, r3.w, r6.x, r5.w
					    add r5.w, r3.y, r6.z
					    movc r6.z, r3.w, r6.z, r5.w
					    if_nz r5.y
					      if_z r3.z
					        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					      else 
					        mov r7.x, r4.y
					      endif 
					      if_z r3.w
					        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					      endif 
					      mad r5.y, -r2.y, l(0.500000), r7.x
					      movc r4.y, r3.z, r7.x, r5.y
					      mad r3.z, -r2.y, l(0.500000), r4.x
					      movc r4.x, r3.w, r4.x, r3.z
					      ge r3.zw, |r4.yyyx|, r2.zzzz
					      add r5.y, -r2.x, r5.x
					      movc r5.x, r3.z, r5.x, r5.y
					      add r5.y, -r3.y, r5.z
					      movc r5.z, r3.z, r5.z, r5.y
					      not r5.yw, r3.zzzw
					      or r5.y, r5.w, r5.y
					      add r5.w, r2.x, r6.x
					      movc r6.x, r3.w, r6.x, r5.w
					      add r5.w, r3.y, r6.z
					      movc r6.z, r3.w, r6.z, r5.w
					      if_nz r5.y
					        if_z r3.z
					          sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					        else 
					          mov r7.x, r4.y
					        endif 
					        if_z r3.w
					          sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					        endif 
					        mad r5.y, -r2.y, l(0.500000), r7.x
					        movc r4.y, r3.z, r7.x, r5.y
					        mad r3.z, -r2.y, l(0.500000), r4.x
					        movc r4.x, r3.w, r4.x, r3.z
					        ge r3.zw, |r4.yyyx|, r2.zzzz
					        add r5.y, -r2.x, r5.x
					        movc r5.x, r3.z, r5.x, r5.y
					        add r5.y, -r3.y, r5.z
					        movc r5.z, r3.z, r5.z, r5.y
					        not r5.yw, r3.zzzw
					        or r5.y, r5.w, r5.y
					        add r5.w, r2.x, r6.x
					        movc r6.x, r3.w, r6.x, r5.w
					        add r5.w, r3.y, r6.z
					        movc r6.z, r3.w, r6.z, r5.w
					        if_nz r5.y
					          if_z r3.z
					            sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					          else 
					            mov r7.x, r4.y
					          endif 
					          if_z r3.w
					            sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					          endif 
					          mad r5.y, -r2.y, l(0.500000), r7.x
					          movc r4.y, r3.z, r7.x, r5.y
					          mad r3.z, -r2.y, l(0.500000), r4.x
					          movc r4.x, r3.w, r4.x, r3.z
					          ge r3.zw, |r4.yyyx|, r2.zzzz
					          mad r5.y, -r2.x, l(1.500000), r5.x
					          movc r5.x, r3.z, r5.x, r5.y
					          mad r5.y, -r3.y, l(1.500000), r5.z
					          movc r5.z, r3.z, r5.z, r5.y
					          not r5.yw, r3.zzzw
					          or r5.y, r5.w, r5.y
					          mad r5.w, r2.x, l(1.500000), r6.x
					          movc r6.x, r3.w, r6.x, r5.w
					          mad r5.w, r3.y, l(1.500000), r6.z
					          movc r6.z, r3.w, r6.z, r5.w
					          if_nz r5.y
					            if_z r3.z
					              sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					            else 
					              mov r7.x, r4.y
					            endif 
					            if_z r3.w
					              sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					            endif 
					            mad r5.y, -r2.y, l(0.500000), r7.x
					            movc r4.y, r3.z, r7.x, r5.y
					            mad r3.z, -r2.y, l(0.500000), r4.x
					            movc r4.x, r3.w, r4.x, r3.z
					            ge r3.zw, |r4.yyyx|, r2.zzzz
					            mad r5.y, -r2.x, l(2.000000), r5.x
					            movc r5.x, r3.z, r5.x, r5.y
					            mad r5.y, -r3.y, l(2.000000), r5.z
					            movc r5.z, r3.z, r5.z, r5.y
					            not r5.yw, r3.zzzw
					            or r5.y, r5.w, r5.y
					            mad r5.w, r2.x, l(2.000000), r6.x
					            movc r6.x, r3.w, r6.x, r5.w
					            mad r5.w, r3.y, l(2.000000), r6.z
					            movc r6.z, r3.w, r6.z, r5.w
					            if_nz r5.y
					              if_z r3.z
					                sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					              else 
					                mov r7.x, r4.y
					              endif 
					              if_z r3.w
					                sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					              endif 
					              mad r5.y, -r2.y, l(0.500000), r7.x
					              movc r4.y, r3.z, r7.x, r5.y
					              mad r3.z, -r2.y, l(0.500000), r4.x
					              movc r4.x, r3.w, r4.x, r3.z
					              ge r3.zw, |r4.yyyx|, r2.zzzz
					              mad r5.y, -r2.x, l(2.000000), r5.x
					              movc r5.x, r3.z, r5.x, r5.y
					              mad r5.y, -r3.y, l(2.000000), r5.z
					              movc r5.z, r3.z, r5.z, r5.y
					              not r5.yw, r3.zzzw
					              or r5.y, r5.w, r5.y
					              mad r5.w, r2.x, l(2.000000), r6.x
					              movc r6.x, r3.w, r6.x, r5.w
					              mad r5.w, r3.y, l(2.000000), r6.z
					              movc r6.z, r3.w, r6.z, r5.w
					              if_nz r5.y
					                if_z r3.z
					                  sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                else 
					                  mov r7.x, r4.y
					                endif 
					                if_z r3.w
					                  sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                endif 
					                mad r5.y, -r2.y, l(0.500000), r7.x
					                movc r4.y, r3.z, r7.x, r5.y
					                mad r3.z, -r2.y, l(0.500000), r4.x
					                movc r4.x, r3.w, r4.x, r3.z
					                ge r3.zw, |r4.yyyx|, r2.zzzz
					                mad r5.y, -r2.x, l(2.000000), r5.x
					                movc r5.x, r3.z, r5.x, r5.y
					                mad r5.y, -r3.y, l(2.000000), r5.z
					                movc r5.z, r3.z, r5.z, r5.y
					                not r5.yw, r3.zzzw
					                or r5.y, r5.w, r5.y
					                mad r5.w, r2.x, l(2.000000), r6.x
					                movc r6.x, r3.w, r6.x, r5.w
					                mad r5.w, r3.y, l(2.000000), r6.z
					                movc r6.z, r3.w, r6.z, r5.w
					                if_nz r5.y
					                  if_z r3.z
					                    sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                  else 
					                    mov r7.x, r4.y
					                  endif 
					                  if_z r3.w
					                    sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                  endif 
					                  mad r5.y, -r2.y, l(0.500000), r7.x
					                  movc r4.y, r3.z, r7.x, r5.y
					                  mad r3.z, -r2.y, l(0.500000), r4.x
					                  movc r4.x, r3.w, r4.x, r3.z
					                  ge r3.zw, |r4.yyyx|, r2.zzzz
					                  mad r5.y, -r2.x, l(2.000000), r5.x
					                  movc r5.x, r3.z, r5.x, r5.y
					                  mad r5.y, -r3.y, l(2.000000), r5.z
					                  movc r5.z, r3.z, r5.z, r5.y
					                  not r5.yw, r3.zzzw
					                  or r5.y, r5.w, r5.y
					                  mad r5.w, r2.x, l(2.000000), r6.x
					                  movc r6.x, r3.w, r6.x, r5.w
					                  mad r5.w, r3.y, l(2.000000), r6.z
					                  movc r6.z, r3.w, r6.z, r5.w
					                  if_nz r5.y
					                    if_z r3.z
					                      sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                    else 
					                      mov r7.x, r4.y
					                    endif 
					                    if_z r3.w
					                      sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                    endif 
					                    mad r5.y, -r2.y, l(0.500000), r7.x
					                    movc r4.y, r3.z, r7.x, r5.y
					                    mad r3.z, -r2.y, l(0.500000), r4.x
					                    movc r4.x, r3.w, r4.x, r3.z
					                    ge r3.zw, |r4.yyyx|, r2.zzzz
					                    mad r5.y, -r2.x, l(4.000000), r5.x
					                    movc r5.x, r3.z, r5.x, r5.y
					                    mad r5.y, -r3.y, l(4.000000), r5.z
					                    movc r5.z, r3.z, r5.z, r5.y
					                    not r5.yw, r3.zzzw
					                    or r5.y, r5.w, r5.y
					                    mad r5.w, r2.x, l(4.000000), r6.x
					                    movc r6.x, r3.w, r6.x, r5.w
					                    mad r5.w, r3.y, l(4.000000), r6.z
					                    movc r6.z, r3.w, r6.z, r5.w
					                    if_nz r5.y
					                      if_z r3.z
					                        sample_l r7.xyzw, r5.xzxx, t0.yxzw, s0, l(0.000000)
					                      else 
					                        mov r7.x, r4.y
					                      endif 
					                      if_z r3.w
					                        sample_l r4.xyzw, r6.xzxx, t0.yxzw, s0, l(0.000000)
					                      endif 
					                      mad r4.z, -r2.y, l(0.500000), r7.x
					                      movc r4.y, r3.z, r7.x, r4.z
					                      mad r2.y, -r2.y, l(0.500000), r4.x
					                      movc r4.x, r3.w, r4.x, r2.y
					                      ge r2.yz, |r4.yyxy|, r2.zzzz
					                      mad r3.z, -r2.x, l(8.000000), r5.x
					                      movc r5.x, r2.y, r5.x, r3.z
					                      mad r3.z, -r3.y, l(8.000000), r5.z
					                      movc r5.z, r2.y, r5.z, r3.z
					                      mad r2.x, r2.x, l(8.000000), r6.x
					                      movc r6.x, r2.z, r6.x, r2.x
					                      mad r2.x, r3.y, l(8.000000), r6.z
					                      movc r6.z, r2.z, r6.z, r2.x
					                    endif 
					                  endif 
					                endif 
					              endif 
					            endif 
					          endif 
					        endif 
					      endif 
					    endif 
					  endif 
					  add r2.xz, r0.xxyx, -r5.xxzx
					  movc r2.x, r0.w, r2.x, r2.z
					  add r2.yz, -r0.xxyx, r6.xxzx
					  movc r2.y, r0.w, r2.y, r2.z
					  lt r3.yz, r4.yyxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  add r2.z, r2.x, r2.y
					  ine r3.xy, r3.xxxx, r3.yzyy
					  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					  lt r3.z, r2.x, r2.y
					  min r2.x, r2.y, r2.x
					  movc r2.y, r3.z, r3.x, r3.y
					  mul r0.z, r0.z, r0.z
					  mad r2.x, r2.x, -r2.z, l(0.500000)
					  mul r0.z, r0.z, cb0[7].x
					  and r2.x, r2.x, r2.y
					  max r0.z, r0.z, r2.x
					  mad r2.xy, r0.zzzz, r2.wwww, r0.xyxx
					  movc r3.x, r0.w, r0.x, r2.x
					  movc r3.y, r0.w, r2.y, r0.y
					  sample_l r1.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					endif 
					mad r0.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
					sample r0.xyzw, r0.xyxx, t1.xyzw, s1
					dp3 r0.w, r1.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
					sqrt r0.w, r0.w
					mad r0.w, cb0[4].x, -r0.w, l(1.000000)
					mul r0.xyz, r0.xyzx, r1.xyzx
					mul r0.xyz, r0.xyzx, cb0[4].yyyy
					mad r0.xyz, r0.xyzx, r0.wwww, r1.xyzx
					mad r1.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
					sample r1.xyzw, r1.xyxx, t2.xyzw, s2
					mad r0.w, r1.w, l(2.000000), l(-1.000000)
					lt r1.x, l(0.000000), r0.w
					lt r1.y, r0.w, l(0.000000)
					iadd r1.x, -r1.x, r1.y
					itof r1.x, r1.x
					add r0.w, -|r0.w|, l(1.000000)
					sqrt r0.w, r0.w
					add r0.w, -r0.w, l(1.000000)
					mul r0.w, r0.w, r1.x
					mad o0.xyz, r0.wwww, l(0.003922, 0.003922, 0.003922, 0.000000), r0.xyzx
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}