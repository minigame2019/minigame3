Shader "Hidden/Post FX/Screen Space Reflection" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 19485
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _AllowBackwardsRays;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture1;
					//   sampler2D _CameraGBufferTexture2;
					//   row_major float4x4 _CameraToWorldMatrix;
					//   float _FadeDistance;
					//   float _FresnelFade;
					//   float _FresnelFadePower;
					//   float _LayerThickness;
					//   float4 _MainTex_TexelSize;
					//   float _MaxRayTraceDistance;
					//   int _MaxSteps;
					//   float4 _ProjInfo;
					//   row_major float4x4 _ProjectToPixelMatrix;
					//   float _RayStepSize;
					//   float _ScreenEdgeFading;
					//   float2 _ScreenSize;
					//   int _TraceBehindObjects;
					//   int _TreatBackfaceHitAsMiss;
					//   row_major float4x4 _WorldToCameraMatrix;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   _ProjectToPixelMatrix   c0       4
					//   _WorldToCameraMatrix    c4       3
					//   _CameraToWorldMatrix    c7       3
					//   _ZBufferParams          c10      1
					//   _MainTex_TexelSize      c11      1
					//   _ProjInfo               c12      1
					//   _ScreenSize             c13      1
					//   _RayStepSize            c14      1
					//   _MaxRayTraceDistance    c15      1
					//   _LayerThickness         c16      1
					//   _FresnelFade            c17      1
					//   _FresnelFadePower       c18      1
					//   _TreatBackfaceHitAsMiss c19      1
					//   _AllowBackwardsRays     c20      1
					//   _ScreenEdgeFading       c21      1
					//   _MaxSteps               c22      1
					//   _FadeDistance           c23      1
					//   _TraceBehindObjects     c24      1
					//   _CameraDepthTexture     s0       1
					//   _CameraGBufferTexture1  s1       1
					//   _CameraGBufferTexture2  s2       1
					//
					
					    ps_3_0
					    def c25, 0.00999999978, 0.00100000005, -0.00999999978, 100000
					    def c26, -0.5, -9.99999975e-005, 0, 0.5
					    def c27, 100, 0, 1, -2
					    def c28, 0.100000001, 0.00100000005, 0.200000003, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s0
					    mad r0.x, c10.z, r0.x, c10.w
					    rcp r0.x, r0.x
					    mov r1.z, -r0.x
					    texld r2, v0, s1
					    add r0.y, r1.z, c27.x
					    cmp r0.y, r0.y, c27.y, c27.z
					    cmp r0.z, -r2_abs.w, c27.z, c27.y
					    add r0.y, r0.z, r0.y
					    if_lt -r0.y, c27.y
					      mov oC0, c27.y
					    else
					      mul r0.yz, c11.xzww, v0.xxyw
					      mad r0.yz, r0, c12.xxyw, c12.xzww
					      mul r1.xy, r1.z, r0.yzzw
					      texld r2, v0, s2
					      mad r0.yzw, r2.xxyz, -c27.w, -c27.z
					      dp3 r2.x, c4, r0.yzww
					      dp3 r2.y, c5, r0.yzww
					      dp3 r2.z, c6, r0.yzww
					      nrm r3.xyz, r1
					      dp3 r0.y, r2, -r3
					      add r0.y, r0.y, r0.y
					      mad r0.yzw, r2.xxyz, r0.y, r3.xxyz
					      nrm r4.xyz, r0.yzww
					      abs r0.y, c20.x
					      cmp r0.z, -r4.z, c27.y, c27.z
					      cmp r0.y, -r0.y, r0.z, c27.y
					      if_ne r0.y, -r0.y
					        mov oC0, c27.y
					      else
					        frc r0.y, c14.x
					        add r0.z, -r0.y, c14.x
					        cmp r0.y, -r0.y, c27.y, c27.z
					        mov r5.yz, c27
					        cmp r0.y, c14.x, r5.y, r0.y
					        add r0.y, r0.y, r0.z
					        mul r0.x, r0.x, c25.x
					        max r1.w, r0.x, c25.y
					        mad r2.xyz, r2, r1.w, r1
					        add r0.x, -r5.z, c24.x
					        rcp r6.x, c13.x
					        rcp r6.y, c13.y
					        mad r0.z, r4.z, c15.x, r2.z
					        add r0.z, -r0.z, c25.z
					        add r5.xw, -r2.z, c25.zyzw
					        rcp r0.w, r4.z
					        mul r0.w, r0.w, r5.x
					        cmp r0.z, r0.z, c15.x, r0.w
					        mad r7.xyz, r4, r0.z, r2
					        mov r2.w, c27.z
					        dp4 r8.x, c0, r2
					        dp4 r8.y, c1, r2
					        dp4 r0.z, c3, r2
					        mov r7.w, c27.z
					        dp4 r9.x, c0, r7
					        dp4 r9.y, c1, r7
					        dp4 r0.w, c3, r7
					        rcp r0.z, r0.z
					        rcp r0.w, r0.w
					        mul r6.zw, r0.z, r8.xyxy
					        mul r8.zw, r0.w, r9.xyxy
					        mul r10.xyz, r0.z, r2
					        mul r7.xyz, r0.w, r7
					        mov r5.x, c26.x
					        add r9.zw, r5.x, c13.xyyx
					        mad r11.xy, r9.yxzw, -r0.w, r9.zwzw
					        cmp r11.zw, r11.xyxy, c27.y, c27.z
					        mad r12.xy, r9.yxzw, r0.w, c26.x
					        cmp r12.xy, r12, c27.y, c27.z
					        add r11.zw, r11, r12.xyxy
					        cmp r9.zw, r11.xyxy, c26.x, -r9
					        mad r9.zw, r9.xyyx, r0.w, r9
					        mad r9.xy, r9.yxzw, r0.w, -r6.wzzw
					        rcp r1.w, r9.x
					        mul r1.w, r1.w, r9.z
					        cmp r1.w, -r11.z, c27.y, r1.w
					        rcp r2.w, r9.y
					        mul r2.w, r2.w, r9.w
					        max r3.w, r1.w, r2.w
					        cmp r1.w, -r11.w, r1.w, r3.w
					        mad r9.xy, r8, r0.z, -r8.zwzw
					        mad r8.zw, r1.w, r9.xyxy, r8
					        lrp r2.w, r1.w, r0.z, r0.w
					        mad r9.xyz, r2, r0.z, -r7
					        mad r7.xyz, r1.w, r9, r7
					        mad r9.xy, r8, r0.z, -r8.zwzw
					        dp2add r0.w, r9, r9, c26.y
					        mad r9.xy, r8, r0.z, c25.x
					        cmp r9.xy, r0.w, r8.zwzw, r9
					        mad r9.zw, r8.xyxy, -r0.z, r9.xyxy
					        add r0.w, -r9_abs.w, r9_abs.z
					        cmp r6.zw, r0.w, r6, r6.xywz
					        cmp r8.xyz, r0.w, r9.xzww, r9.ywzw
					        cmp r1.w, -r8.y, c27.y, c27.z
					        cmp r3.w, r8.y, -c27.y, -c27.z
					        add r9.x, r1.w, r3.w
					        rcp r1.w, r8.y
					        mul r1.w, r1.w, r9.x
					        mul r9.y, r8.z, r1.w
					        mad r7.xyz, r2, -r0.z, r7
					        mul r7.xyz, r1.w, r7
					        add r2.x, -r0.z, r2.w
					        mul r1.w, r1.w, r2.x
					        mul r2.xyw, r0.y, r7.xyzz
					        mul r3.w, r0.y, r1.w
					        mov r4.w, c25.w
					        add r4.w, r4.w, -c16.x
					        add r4.w, r2.z, -r4.w
					        cmp r5.x, r5.w, c27.z, c27.y
					        cmp r4.w, r4.w, r5.x, c27.y
					        mov r11.zw, c27.y
					        mov r7.x, r10.z
					        mov r7.y, r0.z
					        mov r5.xw, -c27.z
					        mov r12.xy, r6.zwzw
					        mov r7.w, c27.y
					        mov r13.x, r2.z
					        mov r8.yz, r4.w
					        rep i0
					          mul r8.w, r9.x, r12.x
					          mad r8.w, r8.x, r9.x, -r8.w
					          add r9.z, r7.w, -c22.x
					          cmp r9.w, -r8.z, -c27.z, -c27.y
					          cmp r9.z, r9.z, c27.y, r9.w
					          cmp r8.w, r8.w, r9.z, c27.y
					          cmp r8.w, r8.w, c27.z, c27.y
					          break_ne r8.w, -r8.w
					          mad r8.w, r2.w, c26.w, r7.x
					          mad r9.z, r3.w, c26.w, r7.y
					          rcp r9.z, r9.z
					          mul r13.y, r8.w, r9.z
					          mad r8.w, r8.w, r9.z, -r13.x
					          cmp r9.zw, r8.w, r13.xyxy, r13.xyyx
					          cmp r5.xw, r0.w, r12.xyzy, r12.yyzx
					          mul r11.xy, r6, r5.xwzw
					          texldl r14, r11, s0
					          mad r8.w, c10.z, r14.x, c10.w
					          rcp r8.w, r8.w
					          add r9.z, -r9.z, -r8.w
					          cmp r9.z, r9.z, c27.z, c27.y
					          add r8.w, -r8.w, -c16.x
					          add r8.w, -r8.w, r9.w
					          cmp r8.y, r8.w, r9.z, c27.y
					          cmp r8.z, -r0_abs.x, r8.y, r9.z
					          mad r12.xy, r9, r0.y, r12
					          mad r7.x, r7.z, r0.y, r7.x
					          mad r7.y, r1.w, r0.y, r7.y
					          add r7.w, r7.w, c27.z
					          mov r13.x, r13.y
					        endrep
					        mad r9.z, r7.z, -r0.y, r7.x
					        mad r0.x, r1.w, -r0.y, r7.y
					        mad r9.xy, r2, r7.w, r10
					        rcp r0.x, r0.x
					        mul r2.xy, r6, r5.xwzw
					        mad r0.xyz, r9, r0.x, -r1
					        dp3 r0.x, r0, r4
					        if_ne r8.y, -r8.y
					          add r0.y, r7.w, r7.w
					          rcp r0.z, c22.x
					          mad r0.y, r0.y, r0.z, -c27.z
					          add_pp r0.z, -r0.y, c27.z
					          cmp_pp r0.y, r0.y, r0.z, c27.z
					          mul_pp r0.y, r0.y, r0.y
					          add r0.z, -r0.x, c15.x
					          rcp r0.w, c23.x
					          mul_sat r0.z, r0.w, r0.z
					          mul r0.y, r0.z, r0.y
					          dp3 r0.z, r4, r3
					          pow r1.x, r0_abs.z, c18.x
					          add r0.z, r5.z, -c17.x
					          add r0.w, -r1.x, c27.z
					          mad r0.z, r0.z, r0.w, r1.x
					          max r1.x, r0.z, c27.y
					          mul r0.y, r0.y, r1.x
					          if_lt -c19.x, r5.y
					            mov r2.zw, c27.y
					            texldl r1, r2, s2
					            mad r1.xyz, r1, -c27.w, -c27.z
					            dp3 r3.x, c7, r4
					            dp3 r3.y, c8, r4
					            dp3 r3.z, c9, r4
					            dp3 r0.z, r1, r3
					            cmp r0.y, -r0.z, r0.y, c27.y
					          endif
					        else
					          mov r0.y, c27.y
					        endif
					        mad r0.zw, r5.xyxw, -r6.xyxy, c27.z
					        min r1.x, r0.w, r0.z
					        min r0.z, r2.x, r1.x
					        mov r1.xy, c28
					        mad r0.w, c21.x, r1.x, r1.y
					        rcp r0.w, r0.w
					        mul r0.z, r0.w, r0.z
					        min r1.x, r0.z, c27.z
					        max r0.z, r1.x, c27.y
					        pow r1.x, r0.z, c28.z
					        mul r0.z, r1.x, r1.x
					        mul oC0.w, r0.y, r0.z
					        mov oC0.xy, r2
					        mov oC0.z, r0.x
					      endif
					    endif
					
					// approximately 229 instruction slots used (7 texture, 222 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[27], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 13
					sample r0.xyzw, v1.zwzz, t0.xyzw, s0
					mad r0.x, cb1[7].z, r0.x, cb1[7].w
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mov r1.z, -r0.x
					sample r2.xyzw, v1.zwzz, t1.xyzw, s1
					lt r0.y, r1.z, l(-100.000000)
					eq r0.z, r2.w, l(0.000000)
					or r0.y, r0.z, r0.y
					if_z r0.y
					  mul r0.yz, v1.zzwz, cb0[4].zzwz
					  mad r0.yz, r0.yyzy, cb0[6].xxyx, cb0[6].zzwz
					  mul r1.xy, r1.zzzz, r0.yzyy
					  sample r2.xyzw, v1.zwzz, t2.xyzw, s2
					  mad r0.yzw, r2.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					  mul r2.xyz, r0.zzzz, cb0[8].xyzx
					  mad r2.xyz, cb0[7].xyzx, r0.yyyy, r2.xyzx
					  mad r0.yzw, cb0[9].xxyz, r0.wwww, r2.xxyz
					  dp3 r1.w, r1.xyzx, r1.xyzx
					  rsq r1.w, r1.w
					  mul r2.xyz, r1.wwww, r1.xyzx
					  dp3 r1.w, r0.yzwy, -r2.xyzx
					  add r1.w, r1.w, r1.w
					  mad r3.xyz, r0.yzwy, r1.wwww, r2.xyzx
					  dp3 r1.w, r3.xyzx, r3.xyzx
					  rsq r1.w, r1.w
					  mul r3.xyz, r1.wwww, r3.xyzx
					  ieq r1.w, cb0[24].x, l(0)
					  lt r2.w, l(0.000000), r3.z
					  and r1.w, r1.w, r2.w
					  if_z r1.w
					    mul r0.x, r0.x, l(0.010000)
					    max r0.x, r0.x, l(0.001000)
					    mad r0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
					    ieq r0.w, cb0[26].z, l(1)
					    div r4.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[19].xyxx
					    mad r1.w, r3.z, cb0[22].y, r0.z
					    lt r1.w, l(-0.010000), r1.w
					    add r2.w, -r0.z, l(-0.010000)
					    div r2.w, r2.w, r3.z
					    movc r1.w, r1.w, r2.w, cb0[22].y
					    mad r5.xyz, r3.xyzx, r1.wwww, r0.xyzx
					    mul r6.xyz, r0.yyyy, cb0[16].xywx
					    mad r6.xyz, cb0[15].xywx, r0.xxxx, r6.xyzx
					    mad r6.xyz, cb0[17].xywx, r0.zzzz, r6.xyzx
					    add r6.xyz, r6.xyzx, cb0[18].xywx
					    mul r7.xyz, r5.yyyy, cb0[16].xywx
					    mad r7.xyz, cb0[15].xywx, r5.xxxx, r7.xyzx
					    mad r7.xyz, cb0[17].xywx, r5.zzzz, r7.xyzx
					    add r7.xyz, r7.xyzx, cb0[18].xywx
					    div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.z
					    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.z
					    mul r4.zw, r1.wwww, r6.yyyx
					    mul r6.zw, r2.wwww, r7.xxxy
					    mul r8.xyz, r0.xyzx, r1.wwww
					    mul r5.xyz, r2.wwww, r5.xyzx
					    add r7.zw, cb0[19].yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
					    lt r9.xy, r7.zwzz, r6.wzww
					    lt r9.zw, r6.wwwz, l(0.000000, 0.000000, 0.500000, 0.500000)
					    or r9.zw, r9.zzzw, r9.xxxy
					    movc r7.zw, r9.xxxy, -r7.zzzw, l(0,0,-0.500000,-0.500000)
					    mad r7.zw, r7.yyyx, r2.wwww, r7.zzzw
					    mad r7.xy, r7.yxyy, r2.wwww, -r4.zwzz
					    div r7.xy, r7.zwzz, r7.xyxx
					    and r3.w, r7.x, r9.z
					    max r5.w, r7.y, r3.w
					    movc r3.w, r9.w, r5.w, r3.w
					    mad r7.xy, r6.xyxx, r1.wwww, -r6.zwzz
					    mad r6.zw, r3.wwww, r7.xxxy, r6.zzzw
					    add r5.w, r1.w, -r2.w
					    mad r2.w, r3.w, r5.w, r2.w
					    mad r7.xyz, r0.xyzx, r1.wwww, -r5.xyzx
					    mad r5.xyz, r3.wwww, r7.xyzx, r5.xyzx
					    mad r7.xy, r6.xyxx, r1.wwww, -r6.zwzz
					    dp2 r3.w, r7.xyxx, r7.xyxx
					    lt r3.w, r3.w, l(0.000100)
					    mad r7.xy, r6.xyxx, r1.wwww, l(0.010000, 0.010000, 0.000000, 0.000000)
					    movc r7.xy, r3.wwww, r7.xyxx, r6.zwzz
					    mad r7.zw, -r6.xxxy, r1.wwww, r7.xxxy
					    lt r3.w, |r7.z|, |r7.w|
					    movc r4.zw, r3.wwww, r4.zzzw, r4.wwwz
					    movc r6.xyz, r3.wwww, r7.ywzy, r7.xzwx
					    lt r5.w, l(0.000000), r6.y
					    lt r6.w, r6.y, l(0.000000)
					    iadd r5.w, -r5.w, r6.w
					    itof r7.x, r5.w
					    div r5.w, r7.x, r6.y
					    mul r7.y, r6.z, r5.w
					    mad r5.xyz, -r0.xyzx, r1.wwww, r5.xyzx
					    mul r5.xyz, r5.wwww, r5.xyzx
					    add r0.x, -r1.w, r2.w
					    mul r0.x, r5.w, r0.x
					    round_z r0.y, cb0[22].x
					    mul r5.xyw, r0.yyyy, r5.xyxz
					    mul r2.w, r0.y, r0.x
					    mul r6.x, r6.x, r7.x
					    add r6.y, -cb0[22].z, l(100000.000000)
					    ge r6.y, r0.z, r6.y
					    ge r6.z, l(100000.000000), r0.z
					    and r6.y, r6.z, r6.y
					    mov r9.x, r8.z
					    mov r9.y, r1.w
					    mov r6.zw, l(0,0,-1.000000,-1.000000)
					    mov r10.xy, r4.zwzz
					    mov r7.z, l(0)
					    mov r7.w, r6.y
					    mov r11.y, r0.z
					    mov r8.w, r6.y
					    loop 
					      mul r9.z, r7.x, r10.x
					      ge r9.z, r6.x, r9.z
					      ilt r9.w, r7.z, cb0[25].x
					      and r9.z, r9.w, r9.z
					      not r9.w, r8.w
					      and r9.z, r9.w, r9.z
					      breakc_z r9.z
					      mad r9.z, r5.w, l(0.500000), r9.x
					      mad r9.w, r2.w, l(0.500000), r9.y
					      div r11.x, r9.z, r9.w
					      lt r9.z, r11.x, r11.y
					      movc r9.zw, r9.zzzz, r11.xxxy, r11.yyyx
					      movc r6.zw, r3.wwww, r10.yyyx, r10.xxxy
					      mul r10.zw, r4.xxxy, r6.zzzw
					      sample_l r12.xyzw, r10.zwzz, t0.xyzw, s0, l(0.000000)
					      mad r10.z, cb1[7].z, r12.x, cb1[7].w
					      div r10.z, l(1.000000, 1.000000, 1.000000, 1.000000), r10.z
					      ge r9.z, -r10.z, r9.z
					      add r10.z, -r10.z, -cb0[22].z
					      ge r9.w, r9.w, r10.z
					      and r7.w, r9.w, r9.z
					      movc r8.w, r0.w, r7.w, r9.z
					      mad r10.xy, r7.xyxx, r0.yyyy, r10.xyxx
					      mad r9.x, r5.z, r0.y, r9.x
					      mad r9.y, r0.x, r0.y, r9.y
					      iadd r7.z, r7.z, l(1)
					      mov r11.y, r11.x
					    endloop 
					    mad r4.z, -r5.z, r0.y, r9.x
					    mad r0.x, -r0.x, r0.y, r9.y
					    itof r0.y, r7.z
					    mad r4.xy, r5.xyxx, r0.yyyy, r8.xyxx
					    div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					    div r5.xy, r6.zwzz, cb0[19].xyxx
					    mad r0.xzw, r4.xxyz, r0.xxxx, -r1.xxyz
					    dp3 r5.z, r0.xzwx, r3.xyzx
					    if_nz r7.w
					      add r0.x, r0.y, r0.y
					      itof r0.y, cb0[25].x
					      div r0.x, r0.x, r0.y
					      add r0.x, r0.x, l(-1.000000)
					      max r0.x, r0.x, l(0.000000)
					      add r0.x, -r0.x, l(1.000000)
					      mul r0.x, r0.x, r0.x
					      add r0.y, -r5.z, cb0[22].y
					      div_sat r0.y, r0.y, cb0[26].y
					      mul r0.x, r0.y, r0.x
					      dp3 r0.y, r3.xyzx, r2.xyzx
					      log r0.y, |r0.y|
					      mul r0.y, r0.y, cb0[23].x
					      exp r0.y, r0.y
					      add r0.z, -cb0[22].w, l(1.000000)
					      add r0.w, -r0.y, l(1.000000)
					      mad r0.y, r0.z, r0.w, r0.y
					      max r0.y, r0.y, l(0.000000)
					      mul r0.x, r0.y, r0.x
					      ilt r0.y, l(0), cb0[23].w
					      if_nz r0.y
					        sample_l r1.xyzw, r5.xyxx, t2.xyzw, s2, l(0.000000)
					        mad r0.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					        mul r1.xyz, r3.yyyy, cb0[12].xyzx
					        mad r1.xyz, cb0[11].xyzx, r3.xxxx, r1.xyzx
					        mad r1.xyz, cb0[13].xyzx, r3.zzzz, r1.xyzx
					        dp3 r0.y, r0.yzwy, r1.xyzx
					        lt r0.y, l(0.000000), r0.y
					        movc r0.x, r0.y, l(0), r0.x
					      endif 
					    else 
					      mov r0.x, l(0)
					    endif 
					    add r0.yz, -r5.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
					    min r0.y, r0.z, r0.y
					    min r0.z, r5.x, r5.x
					    min r0.y, r0.z, r0.y
					    mad r0.z, cb0[24].w, l(0.100000), l(0.001000)
					    div_sat r0.y, r0.y, r0.z
					    log r0.y, r0.y
					    mul r0.y, r0.y, l(0.200000)
					    exp r0.y, r0.y
					    mul r0.y, r0.y, r0.y
					    mul o0.w, r0.x, r0.y
					    mov o0.xyz, r5.xyzx
					  else 
					    mov o0.xyzw, l(0,0,0,0)
					  endif 
					else 
					  mov o0.xyzw, l(0,0,0,0)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 99556
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _AdditiveReflection;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture0;
					//   sampler2D _CameraGBufferTexture1;
					//   sampler2D _CameraGBufferTexture2;
					//   sampler2D _CameraReflectionsTexture;
					//   row_major float4x4 _CameraToWorldMatrix;
					//   sampler2D _FinalReflectionTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float4 _ProjInfo;
					//   float _SSRMultiplier;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _CameraToWorldMatrix      c0       3
					//   _ZBufferParams            c3       1
					//   _MainTex_TexelSize        c4       1
					//   _ProjInfo                 c5       1
					//   _AdditiveReflection       c6       1
					//   _SSRMultiplier            c7       1
					//   _MainTex                  s0       1
					//   _CameraDepthTexture       s1       1
					//   _CameraGBufferTexture0    s2       1
					//   _CameraGBufferTexture1    s3       1
					//   _CameraGBufferTexture2    s4       1
					//   _CameraReflectionsTexture s5       1
					//   _FinalReflectionTexture   s6       1
					//
					
					    ps_3_0
					    def c8, 1, 2, -1, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    mul r0.xy, c4.zwzw, v1
					    mad r0.xy, r0, c5, c5.zwzw
					    texld r1, v1, s1
					    mad r0.z, c3.z, r1.x, c3.w
					    rcp r0.z, r0.z
					    mov r1.z, -r0.z
					    mul r1.xy, r0, r1.z
					    nrm r0.xyz, r1
					    dp3_pp r1.x, c0, r0
					    dp3_pp r1.y, c1, r0
					    dp3_pp r1.z, c2, r0
					    texld r0, v1, s4
					    mad_pp r0.xyz, r0, c8.y, c8.z
					    dp3_pp r0.x, r0, -r1
					    add_pp r0.x, -r0_abs.x, c8.x
					    mul_pp r0.y, r0.x, r0.x
					    mul_pp r0.y, r0.y, r0.y
					    mul_pp r0.x, r0.x, r0.y
					    texld r1, v1, s3
					    max_pp r0.y, r1.x, r1.y
					    max_pp r2.x, r0.y, r1.z
					    add_pp r0.y, -r2.x, c8.x
					    add_pp r0.y, -r0.y, c8.x
					    add_sat_pp r0.y, r0.y, r1.w
					    lrp_pp r2.xyz, r0.x, r0.y, r1
					    add_pp r0.x, -r1.w, c8.x
					    mul_pp r0.x, r0.x, r0.x
					    mad_pp r0.x, r0.x, r0.x, c8.x
					    rcp_pp r0.x, r0.x
					    texld r1, v1, s6
					    mul_pp r0.xyz, r0.x, r1
					    mov_sat r0.w, r1.w
					    mul_pp r0.xyz, r2, r0
					    mul r1.xyz, r0, c7.x
					    mul r1.xyz, r0.w, r1
					    texld r2, v1, s5
					    mul r3.xyz, r2, c8.x
					    mad r0.xyz, r0, c7.x, -r3
					    mad r0.xyz, r0.w, r0, r2
					    abs r0.w, c6.x
					    cmp r0.xyz, -r0.w, r0, r1
					    texld r1, v1, s2
					    mul r1.xyz, r0, r1.w
					    mov r1.w, c8.w
					    texld r3, v0, s0
					    mad r2, r2.xyzx, -c8.xxxw, r3
					    max r4, r2, c8.w
					    cmp r0, -r0.w, r4, r3
					    add oC0, r1, r0
					
					// approximately 51 instruction slots used (7 texture, 44 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[27], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 3
					mul r0.xy, v1.zwzz, cb0[4].zwzz
					mad r0.xy, r0.xyxx, cb0[6].xyxx, cb0[6].zwzz
					sample r1.xyzw, v1.zwzz, t0.xyzw, s1
					mad r0.z, cb1[7].z, r1.x, cb1[7].w
					div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					mov r1.z, -r0.z
					mul r1.xy, r0.xyxx, r1.zzzz
					dp3 r0.x, r1.xyzx, r1.xyzx
					rsq r0.x, r0.x
					mul r0.xyz, r0.xxxx, r1.xyzx
					mul r1.xyz, r0.yyyy, cb0[12].xyzx
					mad r0.xyw, cb0[11].xyxz, r0.xxxx, r1.xyxz
					mad r0.xyz, cb0[13].xyzx, r0.zzzz, r0.xywx
					sample r1.xyzw, v1.zwzz, t5.xyzw, s4
					mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3 r0.x, r1.xyzx, -r0.xyzx
					add r0.x, -|r0.x|, l(1.000000)
					mul r0.y, r0.x, r0.x
					mul r0.y, r0.y, r0.y
					mul r0.x, r0.x, r0.y
					sample r1.xyzw, v1.zwzz, t2.xyzw, s3
					max r0.y, r1.y, r1.x
					max r0.y, r1.z, r0.y
					add r0.y, -r0.y, l(1.000000)
					add r0.y, -r0.y, l(1.000000)
					add_sat r0.y, r0.y, r1.w
					add r0.yzw, -r1.xxyz, r0.yyyy
					mad r0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
					add r0.w, -r1.w, l(1.000000)
					mul r0.w, r0.w, r0.w
					mad r0.w, r0.w, r0.w, l(1.000000)
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r1.xyzw, v1.zwzz, t3.wxyz, s6
					mul r1.yzw, r0.wwww, r1.yyzw
					mov_sat r1.x, r1.x
					mul r0.xyz, r0.xyzx, r1.yzwy
					mul r1.yzw, r0.xxyz, cb0[26].xxxx
					mul r1.yzw, r1.xxxx, r1.yyzw
					sample r2.xyzw, v1.zwzz, t6.xyzw, s5
					mad r0.xyz, r0.xyzx, cb0[26].xxxx, -r2.xyzx
					mad r0.xyz, r1.xxxx, r0.xyzx, r2.xyzx
					movc r0.xyz, cb0[24].zzzz, r1.yzwy, r0.xyzx
					sample r1.xyzw, v1.zwzz, t4.xyzw, s2
					mul r0.xyz, r0.xyzx, r1.wwww
					mov r2.w, l(0)
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					add r2.xyzw, -r2.xyzw, r1.xyzw
					max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					movc r1.xyzw, cb0[24].zzzz, r1.xyzw, r2.xyzw
					mov r0.w, l(0)
					add o0.xyzw, r0.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 191603
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Axis;
					//   int _HighlightSuppression;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _NormalAndRoughnessTexture;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _MainTex_TexelSize         c0       1
					//   _HighlightSuppression      c1       1
					//   _Axis                      c2       1
					//   _MainTex                   s0       1
					//   _NormalAndRoughnessTexture s1       1
					//
					
					    ps_3_0
					    def c3, 0.109999999, 0.150000006, 0.224999994, 0.00999999978
					    def c4, 0.0524999984, 0.075000003, -4, -2
					    def c5, 0.111111112, 1, 0, 0
					    def c6, 4, 6, 1.41421354, 0.111111112
					    def c7, 2, -1, -8, -6
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c2
					    mul r0.xy, r0, c0
					    mad r1, r0.xyxy, c7.zzww, v0.xyxy
					    texld r2, r1.zwzw, s0
					    add r3.xyz, r2, -c7.y
					    rcp r0.z, r3.x
					    mul r4.x, r0.z, r2.x
					    rcp r0.z, r3.y
					    rcp r0.w, r3.z
					    mul r4.yz, r0.xzww, r2
					    abs r0.z, c1.x
					    cmp r2.xyz, -r0.z, r2, r4
					    mul r0.w, r2.w, c4.y
					    texld r3, r1.zwzw, s1
					    mad r3.xyz, r3, c7.x, c7.y
					    texld r4, v0, s1
					    mad r4.xyz, r4, c7.x, c7.y
					    dp3_sat r1.z, r4, r3
					    mul r0.w, r0.w, r1.z
					    mul r3, r0.w, r2
					    texld r5, r1, s0
					    texld r1, r1, s1
					    mad r1.xyz, r1, c7.x, c7.y
					    dp3_sat r1.x, r4, r1
					    add r1.yzw, r5.xxyz, -c7.y
					    rcp r1.y, r1.y
					    mul r6.x, r1.y, r5.x
					    rcp r1.y, r1.z
					    rcp r1.z, r1.w
					    mul r6.yz, r1, r5
					    cmp r5.xyz, -r0.z, r5, r6
					    mul r1.y, r5.w, c4.x
					    mul r1.z, r1.x, r1.y
					    mad r0.w, r1.y, r1.x, r0.w
					    mad r1, r5, r1.z, r3
					    add r2.xyz, r2, r5
					    mad r3, r0.xyxy, c4.zzww, v0.xyxy
					    texld r5, r3, s0
					    add r6.xyz, r5, -c7.y
					    rcp r2.w, r6.x
					    mul r7.x, r2.w, r5.x
					    rcp r2.w, r6.y
					    rcp r4.w, r6.z
					    mul r7.z, r4.w, r5.z
					    mul r7.y, r2.w, r5.y
					    cmp r5.xyz, -r0.z, r5, r7
					    texld r6, r3, s1
					    mad r6.xyz, r6, c7.x, c7.y
					    dp3_sat r2.w, r4, r6
					    mul r3.x, r5.w, c3.x
					    mul r3.y, r2.w, r3.x
					    mad r0.w, r3.x, r2.w, r0.w
					    mad r1, r5, r3.y, r1
					    add r2.xyz, r2, r5
					    texld r5, r3.zwzw, s0
					    texld r3, r3.zwzw, s1
					    mad r3.xyz, r3, c7.x, c7.y
					    dp3_sat r2.w, r4, r3
					    add r3.xyz, r5, -c7.y
					    rcp r3.x, r3.x
					    mul r6.x, r3.x, r5.x
					    rcp r3.x, r3.y
					    rcp r3.y, r3.z
					    mul r6.yz, r3.xxyw, r5
					    cmp r5.xyz, -r0.z, r5, r6
					    mul r3.x, r5.w, c3.y
					    mul r3.y, r2.w, r3.x
					    mad r0.w, r3.x, r2.w, r0.w
					    mad r1, r5, r3.y, r1
					    add r2.xyz, r2, r5
					    texld r3, v0, s0
					    add r5.xyz, r3, -c7.y
					    rcp r2.w, r5.x
					    mul r6.x, r2.w, r3.x
					    rcp r2.w, r5.y
					    rcp r4.w, r5.z
					    mul r6.z, r3.z, r4.w
					    mul r6.y, r2.w, r3.y
					    cmp r3.xyz, -r0.z, r3, r6
					    mul r2.w, r3.w, c3.z
					    dp3_sat r4.w, r4, r4
					    mul r5.x, r2.w, r4.w
					    mad r0.w, r2.w, r4.w, r0.w
					    mad r1, r3, r5.x, r1
					    add r2.xyz, r2, r3
					    mad r3.xy, r0, c7.x, v0
					    texld r5, r3, s0
					    texld r3, r3, s1
					    mad r3.xyz, r3, c7.x, c7.y
					    dp3_sat r2.w, r4, r3
					    add r3.xyz, r5, -c7.y
					    rcp r3.x, r3.x
					    mul r6.x, r3.x, r5.x
					    rcp r3.x, r3.y
					    rcp r3.y, r3.z
					    mul r6.yz, r3.xxyw, r5
					    cmp r5.xyz, -r0.z, r5, r6
					    mul r3.x, r5.w, c3.y
					    mul r3.y, r2.w, r3.x
					    mad r0.w, r3.x, r2.w, r0.w
					    mad r1, r5, r3.y, r1
					    add r2.xyz, r2, r5
					    mad r3, r0.xyxy, c6.xxyy, v0.xyxy
					    mad r0.xy, r0, -c7.z, v0
					    texld r5, r3, s0
					    add r6.xyz, r5, -c7.y
					    rcp r2.w, r6.x
					    mul r7.x, r2.w, r5.x
					    rcp r2.w, r6.y
					    rcp r4.w, r6.z
					    mul r7.z, r4.w, r5.z
					    mul r7.y, r2.w, r5.y
					    cmp r5.xyz, -r0.z, r5, r7
					    texld r6, r3, s1
					    mad r6.xyz, r6, c7.x, c7.y
					    dp3_sat r2.w, r4, r6
					    mul r3.x, r5.w, c3.x
					    mul r3.y, r2.w, r3.x
					    mad r0.w, r3.x, r2.w, r0.w
					    mad r1, r5, r3.y, r1
					    add r2.xyz, r2, r5
					    texld r5, r3.zwzw, s0
					    texld r3, r3.zwzw, s1
					    mad r3.xyz, r3, c7.x, c7.y
					    dp3_sat r2.w, r4, r3
					    add r3.xyz, r5, -c7.y
					    rcp r3.x, r3.x
					    mul r6.x, r3.x, r5.x
					    rcp r3.x, r3.y
					    rcp r3.y, r3.z
					    mul r6.yz, r3.xxyw, r5
					    cmp r5.xyz, -r0.z, r5, r6
					    mul r3.x, r5.w, c4.y
					    mul r3.y, r2.w, r3.x
					    mad r0.w, r3.x, r2.w, r0.w
					    mad r1, r5, r3.y, r1
					    add r2.xyz, r2, r5
					    texld r3, r0, s0
					    texld r5, r0, s1
					    mad r5.xyz, r5, c7.x, c7.y
					    dp3_sat r0.x, r4, r5
					    add r4.xyz, r3, -c7.y
					    rcp r0.y, r4.x
					    mul r5.x, r0.y, r3.x
					    rcp r0.y, r4.y
					    rcp r2.w, r4.z
					    mul r5.z, r2.w, r3.z
					    mul r5.y, r0.y, r3.y
					    cmp r3.xyz, -r0.z, r3, r5
					    mul r0.y, r3.w, c4.x
					    mul r2.w, r0.x, r0.y
					    mad r0.x, r0.y, r0.x, r0.w
					    mad r1, r3, r2.w, r1
					    add r2.xyz, r2, r3
					    rcp r0.y, r0.x
					    add r0.x, -r0.x, c3.w
					    mad r3.xyz, r1, -r0.y, -c7.y
					    rcp r0.w, r3.x
					    mul r1.xyz, r0.y, r1
					    mul r4.x, r0.w, r1.x
					    rcp r0.w, r3.y
					    rcp r2.w, r3.z
					    mul r4.z, r1.z, r2.w
					    mul r4.y, r0.w, r1.y
					    cmp r3.xyz, -r0.z, r1, r4
					    rsq r0.w, r0.y
					    add r0.y, r0.y, -c7.x
					    rcp r0.w, r0.w
					    cmp r0.y, r0.y, r0.w, c6.z
					    mul r0.y, r0.y, r1.w
					    min r3.w, r0.y, -c7.y
					    mad r1.xyz, r2, -c5.x, c5.y
					    mul r2.xyz, r2, c6.w
					    rcp r0.y, r1.x
					    mul r4.x, r0.y, r2.x
					    rcp r0.y, r1.y
					    rcp r0.w, r1.z
					    mul r4.yz, r0.xyww, r2
					    cmp r1.xyz, -r0.z, r2, r4
					    mov r1.w, c5.z
					    cmp oC0, r0.x, r1, r3
					
					// approximately 181 instruction slots used (18 texture, 163 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[34], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 14
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					mul r1.xy, cb0[4].xyxx, cb0[33].xyxx
					mad r2.xyzw, r1.xyxy, l(-8.000000, -8.000000, -6.000000, -6.000000), v1.zwzw
					sample r3.xyzw, r2.xyxx, t1.xyzw, s0
					mul r0.w, r3.w, l(0.052500)
					sample r4.xyzw, r2.xyxx, t0.xyzw, s1
					mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r1.z, r0.xyzx, r4.xyzx
					mul r1.w, r0.w, r1.z
					add r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r4.xyz, r3.xyzx, r4.xyzx
					movc r3.xyz, cb0[27].xxxx, r4.xyzx, r3.xyzx
					sample r4.xyzw, r2.zwzz, t1.xyzw, s0
					mul r2.x, r4.w, l(0.075000)
					sample r5.xyzw, r2.zwzz, t0.xyzw, s1
					mad r2.yzw, r5.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r2.yzwy
					mul r2.x, r2.y, r2.x
					mad r0.w, r0.w, r1.z, r2.x
					add r2.yzw, r4.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
					div r2.yzw, r4.xxyz, r2.yyzw
					movc r4.xyz, cb0[27].xxxx, r2.yzwy, r4.xyzx
					mad r5.xyzw, r1.xyxy, l(-4.000000, -4.000000, -2.000000, -2.000000), v1.zwzw
					sample r6.xyzw, r5.xyxx, t1.xyzw, s0
					mul r1.z, r6.w, l(0.110000)
					sample r7.xyzw, r5.xyxx, t0.xyzw, s1
					mad r2.yzw, r7.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r2.yzwy
					mul r2.z, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r7.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r7.xyz, r6.xyzx, r7.xyzx
					movc r6.xyz, cb0[27].xxxx, r7.xyzx, r6.xyzx
					sample r7.xyzw, r5.zwzz, t1.xyzw, s0
					mul r1.z, r7.w, l(0.150000)
					sample r5.xyzw, r5.zwzz, t0.xyzw, s1
					mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r5.xyzx
					mul r2.w, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r5.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r5.xyz, r7.xyzx, r5.xyzx
					movc r7.xyz, cb0[27].xxxx, r5.xyzx, r7.xyzx
					sample r5.xyzw, v1.zwzz, t1.xyzw, s0
					mul r1.z, r5.w, l(0.225000)
					dp3 r2.y, r0.xyzx, r0.xyzx
					min r2.y, r2.y, l(1.000000)
					mul r8.x, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r8.yzw, r5.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
					div r8.yzw, r5.xxyz, r8.yyzw
					movc r5.xyz, cb0[27].xxxx, r8.yzwy, r5.xyzx
					mad r8.yz, r1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), v1.zzwz
					sample r9.xyzw, r8.yzyy, t1.xyzw, s0
					mul r1.z, r9.w, l(0.150000)
					sample r10.xyzw, r8.yzyy, t0.xyzw, s1
					mad r8.yzw, r10.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r8.yzwy
					mul r8.y, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r10.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r10.xyz, r9.xyzx, r10.xyzx
					movc r9.xyz, cb0[27].xxxx, r10.xyzx, r9.xyzx
					mad r10.xyzw, r1.xyxy, l(4.000000, 4.000000, 6.000000, 6.000000), v1.zwzw
					sample r11.xyzw, r10.xyxx, t1.xyzw, s0
					mul r1.z, r11.w, l(0.110000)
					sample r12.xyzw, r10.xyxx, t0.xyzw, s1
					mad r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r12.xyzx
					mul r8.z, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r12.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r12.xyz, r11.xyzx, r12.xyzx
					movc r11.xyz, cb0[27].xxxx, r12.xyzx, r11.xyzx
					sample r12.xyzw, r10.zwzz, t1.xyzw, s0
					mul r1.z, r12.w, l(0.075000)
					sample r10.xyzw, r10.zwzz, t0.xyzw, s1
					mad r10.xyz, r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r10.xyzx
					mul r8.w, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r10.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r10.xyz, r12.xyzx, r10.xyzx
					movc r12.xyz, cb0[27].xxxx, r10.xyzx, r12.xyzx
					mad r1.xy, r1.xyxx, l(8.000000, 8.000000, 0.000000, 0.000000), v1.zwzz
					sample r10.xyzw, r1.xyxx, t1.xyzw, s0
					mul r1.z, r10.w, l(0.052500)
					sample r13.xyzw, r1.xyxx, t0.xyzw, s1
					mad r13.xyz, r13.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r0.x, r0.xyzx, r13.xyzx
					mul r0.y, r0.x, r1.z
					mad r0.x, r1.z, r0.x, r0.w
					add r1.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r1.xyz, r10.xyzx, r1.xyzx
					movc r10.xyz, cb0[27].xxxx, r1.xyzx, r10.xyzx
					lt r0.z, l(0.010000), r0.x
					if_nz r0.z
					  mul r13.xyzw, r2.xxxx, r4.xyzw
					  mad r1.xyzw, r3.xyzw, r1.wwww, r13.xyzw
					  mad r1.xyzw, r6.xyzw, r2.zzzz, r1.xyzw
					  mad r1.xyzw, r7.xyzw, r2.wwww, r1.xyzw
					  mad r1.xyzw, r5.xyzw, r8.xxxx, r1.xyzw
					  mad r1.xyzw, r9.xyzw, r8.yyyy, r1.xyzw
					  mad r1.xyzw, r11.xyzw, r8.zzzz, r1.xyzw
					  mad r1.xyzw, r12.xyzw, r8.wwww, r1.xyzw
					  mad r1.xyzw, r10.xyzw, r0.yyyy, r1.xyzw
					  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					  max r0.y, r0.x, l(2.000000)
					  sqrt r0.y, r0.y
					  mul r0.y, r0.y, r1.w
					  min o0.w, r0.y, l(1.000000)
					  mul r0.yzw, r0.xxxx, r1.xxyz
					  mad r1.xyz, -r1.xyzx, r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r1.xyz, r0.yzwy, r1.xyzx
					  movc o0.xyz, cb0[27].xxxx, r1.xyzx, r0.yzwy
					  ret 
					else 
					  add r0.xyz, r3.xyzx, r4.xyzx
					  add r0.xyz, r6.xyzx, r0.xyzx
					  add r0.xyz, r7.xyzx, r0.xyzx
					  add r0.xyz, r5.xyzx, r0.xyzx
					  add r0.xyz, r9.xyzx, r0.xyzx
					  add r0.xyz, r11.xyzx, r0.xyzx
					  add r0.xyz, r12.xyzx, r0.xyzx
					  add r0.xyz, r10.xyzx, r0.xyzx
					  mul r1.xyz, r0.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
					  mad r0.xyz, -r0.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r0.xyz, r1.xyzx, r0.xyzx
					  movc o0.xyz, cb0[27].xxxx, r0.xyzx, r1.xyzx
					  mov o0.w, l(0)
					  ret 
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 230005
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _BilateralUpsampling;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture1;
					//   sampler2D _CameraGBufferTexture2;
					//   int _HalfResolution;
					//   sampler2D _HitPointTexture;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _NormalAndRoughnessTexture;
					//   float _PixelsPerMeterAtOneMeter;
					//   float4 _ProjInfo;
					//   float2 _ReflectionBufferSize;
					//   sampler2D _ReflectionTexture0;
					//   sampler2D _ReflectionTexture1;
					//   sampler2D _ReflectionTexture2;
					//   sampler2D _ReflectionTexture3;
					//   sampler2D _ReflectionTexture4;
					//   float _ScreenEdgeFading;
					//   row_major float4x4 _WorldToCameraMatrix;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldToCameraMatrix       c0       3
					//   _ZBufferParams             c3       1
					//   _MainTex_TexelSize         c4       1
					//   _ProjInfo                  c5       1
					//   _ReflectionBufferSize      c6       1
					//   _HalfResolution            c7       1
					//   _ScreenEdgeFading          c8       1
					//   _BilateralUpsampling       c9       1
					//   _PixelsPerMeterAtOneMeter  c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraGBufferTexture1     s1       1
					//   _CameraGBufferTexture2     s2       1
					//   _HitPointTexture           s3       1
					//   _NormalAndRoughnessTexture s4       1
					//   _ReflectionTexture0        s5       1
					//   _ReflectionTexture1        s6       1
					//   _ReflectionTexture2        s7       1
					//   _ReflectionTexture3        s8       1
					//   _ReflectionTexture4        s9       1
					//
					
					    ps_3_0
					    def c11, 0.5, 15, 0.0625, 4
					    def c12, 1, 2, -1, 1.33333337
					    def c13, 3, 0.00100000005, 0.100000001, 0.200000003
					    def c14, 0.300000012, 0, 0, 0
					    def c15, 0, 0.5, 1.5, 1
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    texld r0, v0, s1
					    add r0.x, -r0.w, c12.x
					    texld r1, v0, s3
					    texld r2, v0, s0
					    mad r0.y, c3.z, r2.x, c3.w
					    rcp r0.y, r0.y
					    mov r2.z, -r0.y
					    mul r0.yz, c4.xzww, v0.xxyw
					    mad r0.yz, r0, c5.xxyw, c5.xzww
					    mul r2.xy, r2.z, r0.yzzw
					    texld r3, v0, s2
					    mad r0.yzw, r3.xxyz, c12.y, c12.z
					    dp3 r3.x, c0, r0.yzww
					    dp3 r3.y, c1, r0.yzww
					    dp3 r3.z, c2, r0.yzww
					    nrm r4.xyz, r2
					    dp3 r0.y, r3, -r4
					    add r0.y, r0.y, r0.y
					    mad r0.yzw, r3.xxyz, r0.y, r4.xxyz
					    dp3 r0.y, r0.yzww, r0.yzww
					    rsq r0.y, r0.y
					    mul r0.y, r0.y, r0.w
					    mad r0.y, r0.y, r1.z, r2.z
					    pow r1.x, r0.x, c12.w
					    mul r0.z, r1.z, r1.x
					    mul r0.z, r0.z, c10.x
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, r0.z
					    mov r1.xz, c12
					    add r0.z, r1.z, c7.x
					    mul r0.w, r0.y, c11.x
					    cmp r0.y, -r0_abs.z, r0.w, r0.y
					    add r0.y, r0.y, c11.y
					    mul r0.y, r0.y, c11.z
					    log r0.y, r0.y
					    min r1.y, r0.y, c11.w
					    max r0.y, r1.y, c15.x
					    frc r0.z, r0.y
					    add r0.z, r0.y, -r0.z
					    add r0.w, r0.z, c12.x
					    min r1.y, c11.w, r0.w
					    add r0.y, -r0.z, r0.y
					    if_eq c9.x, r1.x
					      exp r0.w, -r0.z
					      mul r1.xz, r0.w, c6.xyyw
					      frc r2.xy, r1.xzzw
					      add r1.xz, r1, -r2.xyyw
					      mad r2, v0.xyxy, r1.xzxz, -c11.x
					      frc r3, r2.zwzw
					      add r2, r2, -r3
					      add r2, r2, c15.yyzz
					      rcp r3.x, r1.x
					      rcp r3.y, r1.z
					      mul r4.yz, r2.xyxw, r3.xyxw
					      mul r3.xy, r2.zwzw, r3
					      if_ge -r0.z, c15.x
					        mov r4.x, c15.x
					        texldl r5, r4.zyxx, s5
					        mov r3.zw, r4.xyyx
					        texldl r6, r3.xzww, s5
					        mov r7.xzw, r4.zyxx
					        mov r7.y, r3.y
					        texldl r7, r7, s5
					        texldl r8, r3.xyww, s5
					      else
					        if_eq r0.z, c12.x
					          mov r4.w, c15.x
					          texldl r5, r4.zyww, s6
					        else
					          if_eq r0.z, c12.y
					            mul r9, r4.zyzz, c15.wwxx
					            texldl r5, r9, s7
					          else
					            if_eq r0.z, c13.x
					              mul r9, r4.zyzz, c15.wwxx
					              texldl r5, r9, s8
					            else
					              mul r9, r4.zyzz, c15.wwxx
					              texldl r5, r9, s9
					            endif
					          endif
					        endif
					        if_eq r0.z, c12.x
					          mul r9.xzw, r3.x, c15.wyxx
					          mov r9.y, r4.y
					          texldl r6, r9, s6
					        else
					          if_eq r0.z, c12.y
					            mul r9.xzw, r3.x, c15.wyxx
					            mov r9.y, r4.y
					            texldl r6, r9, s7
					          else
					            if_eq r0.z, c13.x
					              mul r9.xzw, r3.x, c15.wyxx
					              mov r9.y, r4.y
					              texldl r6, r9, s8
					            else
					              mul r9.xzw, r3.x, c15.wyxx
					              mov r9.y, r4.y
					              texldl r6, r9, s9
					            endif
					          endif
					        endif
					        if_eq r0.z, c12.x
					          mul r9.xzw, r4.z, c15.wyxx
					          mov r9.y, r3.y
					          texldl r7, r9, s6
					        else
					          if_eq r0.z, c12.y
					            mul r9.xzw, r4.z, c15.wyxx
					            mov r9.y, r3.y
					            texldl r7, r9, s7
					          else
					            if_eq r0.z, c13.x
					              mul r9.xzw, r4.z, c15.wyxx
					              mov r9.y, r3.y
					              texldl r7, r9, s8
					            else
					              mul r9.xzw, r4.z, c15.wyxx
					              mov r9.y, r3.y
					              texldl r7, r9, s9
					            endif
					          endif
					        endif
					        if_eq r0.z, c12.x
					          mul r9, r3.xyxx, c15.wwxx
					          texldl r8, r9, s6
					        else
					          if_eq r0.z, c12.y
					            mul r9, r3.xyxx, c15.wwxx
					            texldl r8, r9, s7
					          else
					            if_eq r0.z, c13.x
					              mul r9, r3.xyxx, c15.wwxx
					              texldl r8, r9, s8
					            else
					              mul r9, r3.xyxx, c15.wwxx
					              texldl r8, r9, s9
					            endif
					          endif
					        endif
					      endif
					      mad r1.xz, v0.xyyw, r1, -r2.xyyw
					      add r2.xy, -r1.zxzw, c12.x
					      mul r0.w, r2.x, r2.y
					      mul r2.xy, r1.xzzw, r2
					      mul r1.x, r1.z, r1.x
					      rcp r9.x, c6.x
					      rcp r9.y, c6.y
					      mov r10.x, c11.x
					      mad r1.zw, r4.xyzy, c6.xyxy, -r10.x
					      frc r2.zw, r1
					      add r1.zw, r1, -r2
					      add r1.zw, r1, c11.x
					      mul r11.xy, r9, r1.zwzw
					      mad r1.zw, r3.xyxy, c6.xyxy, -r10.x
					      frc r2.zw, r1
					      add r1.zw, r1, -r2
					      add r1.zw, r1, c11.x
					      mul r12.xy, r9, r1.zwzw
					      mov r4.xw, r3.xyzy
					      mad r3, r4, c6.xyxy, -r10.x
					      frc r4, r3
					      add r3, r3, -r4
					      add r3, r3, c11.x
					      mul r4.xy, r9, r3
					      mul r3.xy, r9, r3.zwzw
					      mul r13, c15.wwxx, v0.xyxx
					      texldl r13, r13, s4
					      mad r10.yzw, r13.xxyz, c12.y, c12.z
					      mov r11.zw, c15.x
					      texldl r11, r11, s4
					      mov r4.zw, c15.x
					      texldl r4, r4, s4
					      mov r3.zw, c15.x
					      texldl r3, r3, s4
					      mov r12.zw, c15.x
					      texldl r12, r12, s4
					      mad r11.xyz, r11, c12.y, c12.z
					      mad r4.xyz, r4, c12.y, c12.z
					      mad r3.xyz, r3, c12.y, c12.z
					      mad r12.xyz, r12, c12.y, c12.z
					      dp3_sat r1.z, r10.yzww, r11
					      mul r0.w, r0.w, r1.z
					      dp3_sat r1.z, r10.yzww, r4
					      dp3_sat r1.w, r10.yzww, r3
					      mul r1.zw, r1, r2.xyxy
					      dp3_sat r2.x, r10.yzww, r12
					      mul r1.x, r1.x, r2.x
					      add r2.x, -r11.w, r13.w
					      rsq r2.x, r2_abs.x
					      rcp r2.x, r2.x
					      rsq r2.x, r2.x
					      rcp r2.x, r2.x
					      add r2.x, -r2.x, c12.x
					      mul r0.w, r0.w, r2.x
					      add r2.x, -r4.w, r13.w
					      rsq r2.x, r2_abs.x
					      rcp r2.x, r2.x
					      rsq r2.x, r2.x
					      rcp r2.x, r2.x
					      add r2.x, -r2.x, c12.x
					      mul r1.z, r1.z, r2.x
					      add r2.x, -r3.w, r13.w
					      rsq r2.x, r2_abs.x
					      rcp r2.x, r2.x
					      rsq r2.x, r2.x
					      rcp r2.x, r2.x
					      add r2.x, -r2.x, c12.x
					      mul r1.w, r1.w, r2.x
					      add r2.x, -r12.w, r13.w
					      rsq r2.x, r2_abs.x
					      rcp r2.x, r2.x
					      rsq r2.x, r2.x
					      rcp r2.x, r2.x
					      add r2.x, -r2.x, c12.x
					      mul r1.x, r1.x, r2.x
					      max r2.x, r0.w, c13.y
					      max r0.w, r1.z, c13.y
					      max r2.y, r1.w, c13.y
					      max r2.z, r1.x, c13.y
					      add r1.x, r0.w, r2.x
					      add r1.x, r2.y, r1.x
					      add r1.x, r2.z, r1.x
					      rcp r1.x, r1.x
					      mul r3, r0.w, r6
					      mad r3, r5, r2.x, r3
					      mad r3, r7, r2.y, r3
					      mad r2, r8, r2.z, r3
					      mul r2, r1.x, r2
					      exp r0.w, -r1.y
					      mul r1.xz, r0.w, c6.xyyw
					      frc r3.xy, r1.xzzw
					      add r1.xz, r1, -r3.xyyw
					      mad r3, v0.xyxy, r1.xzxz, -c11.x
					      frc r4, r3.zwzw
					      add r3, r3, -r4
					      add r3, r3, c15.yyzz
					      rcp r4.x, r1.x
					      rcp r4.y, r1.z
					      mul r5.yz, r3.xyxw, r4.xyxw
					      mul r4.xy, r3.zwzw, r4
					      add r0.w, r1.y, c12.z
					      if_ge -r0.w, c15.x
					        mov r5.x, c15.x
					        texldl r6, r5.zyxx, s6
					        mov r4.zw, r5.xyyx
					        texldl r7, r4.xzww, s6
					        mov r8.xzw, r5.zyxx
					        mov r8.y, r4.y
					        texldl r8, r8, s6
					        texldl r11, r4.xyww, s6
					      else
					        if_eq r1.y, c12.y
					          mov r5.w, c15.x
					          texldl r6, r5.zyww, s7
					        else
					          if_eq r1.y, c13.x
					            mul r12, r5.zyzz, c15.wwxx
					            texldl r6, r12, s8
					          else
					            mul r12, r5.zyzz, c15.wwxx
					            texldl r6, r12, s9
					          endif
					        endif
					        if_eq r1.y, c12.y
					          mul r12.xzw, r4.x, c15.wyxx
					          mov r12.y, r5.y
					          texldl r7, r12, s7
					        else
					          if_eq r1.y, c13.x
					            mul r12.xzw, r4.x, c15.wyxx
					            mov r12.y, r5.y
					            texldl r7, r12, s8
					          else
					            mul r12.xzw, r4.x, c15.wyxx
					            mov r12.y, r5.y
					            texldl r7, r12, s9
					          endif
					        endif
					        if_eq r1.y, c12.y
					          mul r12.xzw, r5.z, c15.wyxx
					          mov r12.y, r4.y
					          texldl r8, r12, s7
					        else
					          if_eq r1.y, c13.x
					            mul r12.xzw, r5.z, c15.wyxx
					            mov r12.y, r4.y
					            texldl r8, r12, s8
					          else
					            mul r12.xzw, r5.z, c15.wyxx
					            mov r12.y, r4.y
					            texldl r8, r12, s9
					          endif
					        endif
					        if_eq r1.y, c12.y
					          mul r12, r4.xyxx, c15.wwxx
					          texldl r11, r12, s7
					        else
					          if_eq r1.y, c13.x
					            mul r12, r4.xyxx, c15.wwxx
					            texldl r11, r12, s8
					          else
					            mul r12, r4.xyxx, c15.wwxx
					            texldl r11, r12, s9
					          endif
					        endif
					      endif
					      mad r1.xz, v0.xyyw, r1, -r3.xyyw
					      add r3.xy, -r1.zxzw, c12.x
					      mul r0.w, r3.x, r3.y
					      mul r3.xy, r1.xzzw, r3
					      mul r1.x, r1.z, r1.x
					      mad r1.zw, r5.xyzy, c6.xyxy, -r10.x
					      frc r3.zw, r1
					      add r1.zw, r1, -r3
					      add r1.zw, r1, c11.x
					      mul r12.xy, r9, r1.zwzw
					      mad r1.zw, r4.xyxy, c6.xyxy, -r10.x
					      frc r3.zw, r1
					      add r1.zw, r1, -r3
					      add r1.zw, r1, c11.x
					      mul r14.xy, r9, r1.zwzw
					      mov r5.xw, r4.xyzy
					      mad r4, r5, c6.xyxy, -r10.x
					      frc r5, r4
					      add r4, r4, -r5
					      add r4, r4, c11.x
					      mul r5.xy, r9, r4
					      mul r4.xy, r9, r4.zwzw
					      mov r12.zw, c15.x
					      texldl r9, r12, s4
					      mov r5.zw, c15.x
					      texldl r5, r5, s4
					      mov r4.zw, c15.x
					      texldl r4, r4, s4
					      mov r14.zw, c15.x
					      texldl r12, r14, s4
					      mad r9.xyz, r9, c12.y, c12.z
					      mad r5.xyz, r5, c12.y, c12.z
					      mad r4.xyz, r4, c12.y, c12.z
					      mad r12.xyz, r12, c12.y, c12.z
					      dp3_sat r1.z, r10.yzww, r9
					      mul r0.w, r0.w, r1.z
					      dp3_sat r1.z, r10.yzww, r5
					      dp3_sat r1.w, r10.yzww, r4
					      mul r1.zw, r1, r3.xyxy
					      dp3_sat r3.x, r10.yzww, r12
					      mul r1.x, r1.x, r3.x
					      add r3.x, -r9.w, r13.w
					      rsq r3.x, r3_abs.x
					      rcp r3.x, r3.x
					      rsq r3.x, r3.x
					      rcp r3.x, r3.x
					      add r3.x, -r3.x, c12.x
					      mul r0.w, r0.w, r3.x
					      add r3.x, -r5.w, r13.w
					      rsq r3.x, r3_abs.x
					      rcp r3.x, r3.x
					      rsq r3.x, r3.x
					      rcp r3.x, r3.x
					      add r3.x, -r3.x, c12.x
					      mul r1.z, r1.z, r3.x
					      add r3.x, -r4.w, r13.w
					      rsq r3.x, r3_abs.x
					      rcp r3.x, r3.x
					      rsq r3.x, r3.x
					      rcp r3.x, r3.x
					      add r3.x, -r3.x, c12.x
					      mul r1.w, r1.w, r3.x
					      add r3.x, -r12.w, r13.w
					      rsq r3.x, r3_abs.x
					      rcp r3.x, r3.x
					      rsq r3.x, r3.x
					      rcp r3.x, r3.x
					      add r3.x, -r3.x, c12.x
					      mul r1.x, r1.x, r3.x
					      max r3.x, r0.w, c13.y
					      max r0.w, r1.z, c13.y
					      max r3.y, r1.w, c13.y
					      max r3.z, r1.x, c13.y
					      add r1.x, r0.w, r3.x
					      add r1.x, r3.y, r1.x
					      add r1.x, r3.z, r1.x
					      rcp r1.x, r1.x
					      mul r4, r0.w, r7
					      mad r4, r6, r3.x, r4
					      mad r4, r8, r3.y, r4
					      mad r3, r11, r3.z, r4
					      mad r3, r3, r1.x, -r2
					      mad r2, r0.y, r3.wxyz, r2.wxyz
					      mov oC0.xyz, r2.yzww
					    else
					      if_ge -r0.z, c15.x
					        mul r3, c15.wwxx, v0.xyxx
					        texldl r3, r3, s5
					        mov r0.w, r3.w
					      else
					        if_eq r0.z, c12.x
					          mul r4, c15.wwxx, v0.xyxx
					          texldl r3, r4, s6
					          mov r0.w, r3.w
					        else
					          if_eq r0.z, c12.y
					            mul r4, c15.wwxx, v0.xyxx
					            texldl r3, r4, s7
					            mov r0.w, r3.w
					          else
					            if_eq r0.z, c13.x
					              mul r4, c15.wwxx, v0.xyxx
					              texldl r3, r4, s8
					              mov r0.w, r3.w
					            else
					              mul r4, c15.wwxx, v0.xyxx
					              texldl r3, r4, s9
					              mov r0.w, r3.w
					            endif
					          endif
					        endif
					      endif
					      add r0.z, r1.y, c12.z
					      if_ge -r0.z, c15.x
					        mul r4, c15.wwxx, v0.xyxx
					        texldl r4, r4, s6
					        mov r0.z, r4.w
					      else
					        if_eq r1.y, c12.y
					          mul r5, c15.wwxx, v0.xyxx
					          texldl r4, r5, s7
					          mov r0.z, r4.w
					        else
					          if_eq r1.y, c13.x
					            mul r1, c15.wwxx, v0.xyxx
					            texldl r4, r1, s8
					            mov r0.z, r4.w
					          else
					            mul r1, c15.wwxx, v0.xyxx
					            texldl r4, r1, s9
					            mov r0.z, r4.w
					          endif
					        endif
					      endif
					      add r1.xyz, -r3, r4
					      mad oC0.xyz, r0.y, r1, r3
					      min r2.x, r0.z, r0.w
					    endif
					    min r0.y, r2.x, c12.x
					    add r0.zw, c12.x, -v0.xyxy
					    min r1.x, r0.w, r0.z
					    min r0.z, v0.x, r1.x
					    mov r1.yz, c13
					    mad r0.w, c8.x, r1.z, r1.y
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    min r1.x, r0.z, c12.x
					    max r0.z, r1.x, c15.x
					    pow r1.x, r0.z, c13.w
					    mul r0.y, r0.y, r1.x
					    mul_sat r0.x, r0.x, c14.x
					    add r0.x, -r0.x, c12.x
					    mul oC0.w, r0.x, r0.y
					
					// approximately 581 instruction slots used (112 texture, 469 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 13
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					add r0.x, -r0.w, l(1.000000)
					sample r1.xyzw, v1.zwzz, t1.xyzw, s3
					sample r2.xyzw, v1.zwzz, t2.xyzw, s0
					mad r0.y, cb1[7].z, r2.x, cb1[7].w
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mov r2.z, -r0.y
					mul r0.yz, v1.zzwz, cb0[4].zzwz
					mad r0.yz, r0.yyzy, cb0[6].xxyx, cb0[6].zzwz
					mul r2.xy, r2.zzzz, r0.yzyy
					sample r3.xyzw, v1.zwzz, t3.xyzw, s2
					mad r0.yzw, r3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					mul r1.xyw, r0.zzzz, cb0[8].xyxz
					mad r1.xyw, cb0[7].xyxz, r0.yyyy, r1.xyxw
					mad r0.yzw, cb0[9].xxyz, r0.wwww, r1.xxyw
					dp3 r1.x, r2.xyzx, r2.xyzx
					rsq r1.x, r1.x
					mul r1.xyw, r1.xxxx, r2.xyxz
					dp3 r2.x, r0.yzwy, -r1.xywx
					add r2.x, r2.x, r2.x
					mad r0.yzw, r0.yyzw, r2.xxxx, r1.xxyw
					dp3 r0.y, r0.yzwy, r0.yzwy
					rsq r0.y, r0.y
					mul r0.y, r0.y, r0.w
					mad r0.y, r0.y, r1.z, r2.z
					log r0.z, r0.x
					mul r0.z, r0.z, l(1.333333)
					exp r0.z, r0.z
					mul r0.z, r1.z, r0.z
					mul r0.z, r0.z, cb0[27].y
					div r0.y, r0.z, r0.y
					ieq r0.z, cb0[23].z, l(1)
					mul r0.w, r0.y, l(0.500000)
					movc r0.y, r0.z, r0.w, r0.y
					add r0.y, r0.y, l(15.000000)
					mul r0.y, r0.y, l(0.062500)
					log r0.y, r0.y
					min r0.y, r0.y, l(4.000000)
					max r0.y, r0.y, l(0.000000)
					ftoi r0.z, r0.y
					iadd r0.w, r0.z, l(1)
					imin r0.w, r0.w, l(4)
					round_z r1.x, r0.y
					add r0.y, r0.y, -r1.x
					ieq r1.x, cb0[25].y, l(1)
					if_nz r1.x
					  itof r1.x, -r0.z
					  exp r1.x, r1.x
					  mul r1.xyzw, r1.xxxx, cb0[19].zwzw
					  round_ni r1.xyzw, r1.xyzw
					  mad r2.xyzw, v1.zwzw, r1.zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r2.xyzw, r2.xyzw
					  add r2.xyzw, r2.xyzw, l(1.500000, 0.500000, 0.500000, 1.500000)
					  div r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyzw
					  mul r3.xyzw, r2.xyzw, r3.xyzw
					  if_z r0.z
					    sample_l r4.xyzw, r3.zyzz, t4.xyzw, s5, l(0.000000)
					    sample_l r5.xyzw, r3.xyxx, t4.xyzw, s5, l(0.000000)
					    sample_l r6.xyzw, r3.zwzz, t4.xyzw, s5, l(0.000000)
					    sample_l r7.xyzw, r3.xwxx, t4.xyzw, s5, l(0.000000)
					  else 
					    ieq r1.x, r0.z, l(1)
					    if_nz r1.x
					      sample_l r4.xyzw, r3.zyzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r4.xyzw, r3.zyzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r4.xyzw, r3.zyzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r4.xyzw, r3.zyzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r5.xyzw, r3.xyxx, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r5.xyzw, r3.xyxx, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r5.xyzw, r3.xyxx, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r5.xyzw, r3.xyxx, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r6.xyzw, r3.zwzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r6.xyzw, r3.zwzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r6.xyzw, r3.zwzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r6.xyzw, r3.zwzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r7.xyzw, r3.xwxx, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.x, r0.z, l(2)
					      if_nz r1.x
					        sample_l r7.xyzw, r3.xwxx, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.x, r0.z, l(3)
					        if_nz r1.x
					          sample_l r7.xyzw, r3.xwxx, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r7.xyzw, r3.xwxx, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					  endif 
					  mad r1.xy, v1.zwzz, r1.zwzz, -r2.zyzz
					  add r1.zw, -r1.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r2.x, r1.z, r1.w
					  mul r1.zw, r1.zzzw, r1.xxxy
					  mul r1.x, r1.y, r1.x
					  div r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[19].zwzw
					  mad r9.xyzw, r3.zyxw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r9.xyzw, r9.xyzw
					  add r9.xyzw, r9.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r9.xyzw, r8.xyzw, r9.xyzw
					  mad r3.xyzw, r3.xyzw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r3.xyzw, r3.xyzw
					  add r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r3.xyzw, r8.xyzw, r3.xyzw
					  sample_l r10.xyzw, v1.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r2.yzw, r10.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					  sample_l r11.xyzw, r9.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r12.xyzw, r3.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r3.xyzw, r3.zwzz, t9.xyzw, s4, l(0.000000)
					  sample_l r9.xyzw, r9.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r10.xyz, r11.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r11.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  dp3_sat r1.y, r2.yzwy, r10.xyzx
					  mul r1.y, r1.y, r2.x
					  dp3_sat r2.x, r2.yzwy, r11.xyzx
					  mul r1.z, r1.z, r2.x
					  dp3_sat r2.x, r2.yzwy, r3.xyzx
					  mul r1.w, r1.w, r2.x
					  dp3_sat r2.x, r2.yzwy, r9.xyzx
					  mul r1.x, r1.x, r2.x
					  add r2.x, r10.w, -r11.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.y, r1.y, r2.x
					  add r2.x, r10.w, -r12.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.z, r1.z, r2.x
					  add r2.x, -r3.w, r10.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.w, r1.w, r2.x
					  add r2.x, -r9.w, r10.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.x, r1.x, r2.x
					  max r1.xyzw, r1.xyzw, l(0.001000, 0.001000, 0.001000, 0.001000)
					  add r2.x, r1.z, r1.y
					  add r2.x, r1.w, r2.x
					  add r2.x, r1.x, r2.x
					  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
					  mul r3.xyzw, r1.zzzz, r5.xyzw
					  mad r3.xyzw, r4.xyzw, r1.yyyy, r3.xyzw
					  mad r3.xyzw, r6.xyzw, r1.wwww, r3.xyzw
					  mad r1.xyzw, r7.xyzw, r1.xxxx, r3.xyzw
					  mul r1.xyzw, r2.xxxx, r1.xyzw
					  itof r2.x, -r0.w
					  exp r2.x, r2.x
					  mul r3.xyzw, r2.xxxx, cb0[19].zwzw
					  round_ni r3.xyzw, r3.xyzw
					  mad r4.xyzw, v1.zwzw, r3.zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r4.xyzw, r4.xyzw
					  add r4.xyzw, r4.xyzw, l(1.500000, 0.500000, 0.500000, 1.500000)
					  div r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r3.xyzw
					  mul r5.xyzw, r4.xyzw, r5.xyzw
					  ieq r2.x, r0.w, l(1)
					  if_nz r2.x
					    sample_l r6.xyzw, r5.zyzz, t5.xyzw, s6, l(0.000000)
					    sample_l r7.xyzw, r5.xyxx, t5.xyzw, s6, l(0.000000)
					    sample_l r9.xyzw, r5.zwzz, t5.xyzw, s6, l(0.000000)
					    sample_l r11.xyzw, r5.xwxx, t5.xyzw, s6, l(0.000000)
					  else 
					    ieq r2.x, r0.w, l(2)
					    if_nz r2.x
					      sample_l r6.xyzw, r5.zyzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r6.xyzw, r5.zyzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r6.xyzw, r5.zyzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r7.xyzw, r5.xyxx, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r7.xyzw, r5.xyxx, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r7.xyzw, r5.xyxx, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r9.xyzw, r5.zwzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r9.xyzw, r5.zwzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r9.xyzw, r5.zwzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r11.xyzw, r5.xwxx, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r2.x, r0.w, l(3)
					      if_nz r2.x
					        sample_l r11.xyzw, r5.xwxx, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r11.xyzw, r5.xwxx, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					  endif 
					  mad r3.xy, v1.zwzz, r3.zwzz, -r4.zyzz
					  add r3.zw, -r3.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r2.x, r3.z, r3.w
					  mul r3.zw, r3.zzzw, r3.xxxy
					  mul r3.x, r3.y, r3.x
					  mad r4.xyzw, r5.zyxw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r4.xyzw, r4.xyzw
					  add r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r4.xyzw, r8.xyzw, r4.xyzw
					  mad r5.xyzw, r5.xyzw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r5.xyzw, r5.xyzw
					  add r5.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r5.xyzw, r8.xyzw, r5.xyzw
					  sample_l r8.xyzw, r4.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r12.xyzw, r5.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r5.xyzw, r5.zwzz, t9.xyzw, s4, l(0.000000)
					  sample_l r4.xyzw, r4.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r10.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  dp3_sat r3.y, r2.yzwy, r8.xyzx
					  mul r2.x, r2.x, r3.y
					  dp3_sat r3.y, r2.yzwy, r10.xyzx
					  mul r3.y, r3.y, r3.z
					  dp3_sat r3.z, r2.yzwy, r5.xyzx
					  mul r3.z, r3.z, r3.w
					  dp3_sat r2.y, r2.yzwy, r4.xyzx
					  mul r2.y, r2.y, r3.x
					  add r2.z, -r8.w, r10.w
					  sqrt r2.z, |r2.z|
					  sqrt r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  mul r2.x, r2.z, r2.x
					  add r2.z, r10.w, -r12.w
					  sqrt r2.z, |r2.z|
					  sqrt r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  add r2.w, -r5.w, r10.w
					  sqrt r2.w, |r2.w|
					  sqrt r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  mul r2.zw, r2.zzzw, r3.yyyz
					  add r3.x, -r4.w, r10.w
					  sqrt r3.x, |r3.x|
					  sqrt r3.x, r3.x
					  add r3.x, -r3.x, l(1.000000)
					  mul r2.y, r2.y, r3.x
					  max r2.xyzw, r2.xyzw, l(0.001000, 0.001000, 0.001000, 0.001000)
					  add r3.x, r2.z, r2.x
					  add r3.x, r2.w, r3.x
					  add r3.x, r2.y, r3.x
					  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					  mul r4.xyzw, r2.zzzz, r7.xyzw
					  mad r4.xyzw, r6.xyzw, r2.xxxx, r4.xyzw
					  mad r4.xyzw, r9.xyzw, r2.wwww, r4.xyzw
					  mad r2.xyzw, r11.xyzw, r2.yyyy, r4.xyzw
					  mad r2.xyzw, r2.xyzw, r3.xxxx, -r1.xyzw
					  mad r1.xyzw, r0.yyyy, r2.wxyz, r1.wxyz
					  mov o0.xyz, r1.yzwy
					else 
					  if_z r0.z
					    sample_l r2.xyzw, v1.zwzz, t4.xyzw, s5, l(0.000000)
					  else 
					    ieq r1.y, r0.z, l(1)
					    if_nz r1.y
					      sample_l r2.xyzw, v1.zwzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r2.xyzw, v1.zwzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r0.z, r0.z, l(3)
					        if_nz r0.z
					          sample_l r2.xyzw, v1.zwzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r2.xyzw, v1.zwzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					  endif 
					  ieq r0.z, r0.w, l(1)
					  if_nz r0.z
					    sample_l r3.xyzw, v1.zwzz, t5.xyzw, s6, l(0.000000)
					  else 
					    ieq r0.z, r0.w, l(2)
					    if_nz r0.z
					      sample_l r3.xyzw, v1.zwzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r0.z, r0.w, l(3)
					      if_nz r0.z
					        sample_l r3.xyzw, v1.zwzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r3.xyzw, v1.zwzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					  endif 
					  add r1.yzw, -r2.xxyz, r3.xxyz
					  mad o0.xyz, r0.yyyy, r1.yzwy, r2.xyzx
					  min r1.x, r2.w, r3.w
					endif 
					min r0.y, r1.x, l(1.000000)
					add r0.zw, -v1.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					min r0.z, r0.w, r0.z
					min r0.z, r0.z, v1.z
					mad r0.w, cb0[24].w, l(0.100000), l(0.001000)
					div_sat r0.z, r0.z, r0.w
					log r0.z, r0.z
					mul r0.z, r0.z, l(0.200000)
					exp r0.z, r0.z
					mul r0.y, r0.z, r0.y
					mul_sat r0.x, r0.x, l(0.300000)
					add r0.x, -r0.x, l(1.000000)
					mul o0.w, r0.x, r0.y
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 323620
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _LastMip;
					//   sampler2D _MainTex;
					//   float2 _ReflectionBufferSize;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _ReflectionBufferSize c0       1
					//   _LastMip              c1       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    def c2, -0.5, 0.5, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    exp r0.x, -c1.x
					    mul r0.xy, r0.x, c0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mad r0.zw, v0.xyxy, r0.xyxy, c2.x
					    frc r1.xy, r0.zwzw
					    add r0.zw, r0, -r1.xyxy
					    add r0.zw, r0, c2.y
					    rcp r1.z, r0.x
					    rcp r1.w, r0.y
					    mul r2.xy, r0.zwzw, r1.zwzw
					    mad r2.zw, r0, r1, r1
					    texld r0, r2.xwzw, s0
					    texld r1, r2.zyzw, s0
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    min r4, r2, r3
					    min r2, r1, r0
					    min oC0, r2, r4
					
					// approximately 19 instruction slots used (4 texture, 15 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 4
					itof r0.x, -cb0[34].x
					exp r0.x, r0.x
					mul r0.xy, r0.xxxx, cb0[19].zwzz
					round_ni r0.xy, r0.xyxx
					mad r0.zw, v1.zzzw, r0.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					div r0.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyxx
					round_ni r0.zw, r0.zzzw
					add r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
					mul r1.xy, r0.xyxx, r0.zwzz
					mad r1.zw, r0.zzzw, r0.xxxy, r0.xxxy
					sample r0.xyzw, r1.xwxx, t0.xyzw, s0
					sample r2.xyzw, r1.zyzz, t0.xyzw, s0
					sample r3.xyzw, r1.xyxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					min r1.xyzw, r1.xyzw, r3.xyzw
					min r0.xyzw, r0.xyzw, r2.xyzw
					min o0.xyzw, r0.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 379568
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraReflectionsTexture;
					//   sampler2D _HitPointTexture;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _MainTex                  s0       1
					//   _CameraReflectionsTexture s1       1
					//   _HitPointTexture          s2       1
					//
					
					    ps_3_0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v0, s1
					    texld r1, v0, s2
					    texld r2, r1, s0
					    cmp oC0.xyz, -r1.w, r0, r2
					    mov oC0.w, r1.w
					
					// approximately 5 instruction slots used (3 texture, 2 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 3
					sample r0.xyzw, v1.zwzz, t2.xyzw, s1
					sample r1.xyzw, v1.zwzz, t0.xyzw, s2
					lt r0.w, l(0.000000), r1.w
					sample r2.xyzw, r1.xyxx, t1.xyzw, s0
					mov o0.w, r1.w
					movc o0.xyz, r0.wwww, r2.xyzx, r0.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 458579
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraGBufferTexture1;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _CameraGBufferTexture1 s0       1
					//   _CameraGBufferTexture2 s1       1
					//
					
					    ps_3_0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mov oC0.xyz, r0
					    texld r0, v0, s0
					    mov oC0.w, r0.w
					
					// approximately 4 instruction slots used (2 texture, 2 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 1
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					mov o0.xyz, r0.xyzx
					sample r0.xyzw, v1.zwzz, t1.xyzw, s0
					mov o0.w, r0.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 516783
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 0, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mov oC0.x, -r0.x
					    mov oC0.yzw, c1.x
					
					// approximately 5 instruction slots used (1 texture, 4 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 1
					sample r0.xyzw, v1.zwzz, t0.xyzw, s0
					mad r0.x, cb0[7].z, r0.x, cb0[7].w
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mov o0.x, -r0.x
					mov o0.yzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 571217
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, -2, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.y, c9.y
					    slt r0.x, c8.y, r0.y
					    mad r0.y, v1.y, c9.z, c9.x
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _HighlightSuppression;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _ReflectionBlur;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _MainTex_TexelSize    c0       1
					//   _ReflectionBlur       c1       1
					//   _HighlightSuppression c2       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    def c3, 1, 0.0833333358, 0, 0
					    def c4, -0.321940005, -0.932614982, -0.791558981, -0.597710013
					    def c5, 0.507430971, 0.0644249991, 0.896420002, 0.412458003
					    def c6, 0.519456029, 0.767022014, 0.185461, -0.893123984
					    def c7, 0.962339997, -0.194983006, 0.473434001, -0.480026007
					    def c8, -0.69591397, 0.457136989, -0.203345001, 0.620715976
					    def c9, -0.326211989, -0.405809999, -0.840143979, -0.0735799968
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mul r0.x, r0.x, c1.x
					    mad r1, r0.x, c9, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add r0.yzw, r2.xxyz, c3.x
					    rcp r0.y, r0.y
					    mul r3.x, r0.y, r2.x
					    rcp r0.y, r0.z
					    rcp r0.z, r0.w
					    mul r3.yz, r0, r2
					    abs r0.y, c2.x
					    cmp r2.xyz, -r0.y, r2, r3
					    add r3.xyz, r1, c3.x
					    rcp r0.z, r3.x
					    mul r4.x, r0.z, r1.x
					    rcp r0.z, r3.y
					    rcp r0.w, r3.z
					    mul r4.yz, r0.xzww, r1
					    cmp r1.xyz, -r0.y, r1, r4
					    add r1, r1, r2
					    mad r2, r0.x, c8, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r4.xyz, r3, c3.x
					    rcp r0.z, r4.x
					    mul r5.x, r0.z, r3.x
					    rcp r0.z, r4.y
					    rcp r0.w, r4.z
					    mul r5.yz, r0.xzww, r3
					    cmp r3.xyz, -r0.y, r3, r5
					    add r1, r1, r3
					    add r3.xyz, r2, c3.x
					    rcp r0.z, r3.x
					    mul r4.x, r0.z, r2.x
					    rcp r0.z, r3.y
					    rcp r0.w, r3.z
					    mul r4.yz, r0.xzww, r2
					    cmp r2.xyz, -r0.y, r2, r4
					    add r1, r1, r2
					    mad r2, r0.x, c7, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r4.xyz, r3, c3.x
					    rcp r0.z, r4.x
					    mul r5.x, r0.z, r3.x
					    rcp r0.z, r4.y
					    rcp r0.w, r4.z
					    mul r5.yz, r0.xzww, r3
					    cmp r3.xyz, -r0.y, r3, r5
					    add r1, r1, r3
					    add r3.xyz, r2, c3.x
					    rcp r0.z, r3.x
					    mul r4.x, r0.z, r2.x
					    rcp r0.z, r3.y
					    rcp r0.w, r3.z
					    mul r4.yz, r0.xzww, r2
					    cmp r2.xyz, -r0.y, r2, r4
					    add r1, r1, r2
					    mad r2, r0.x, c6, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    add r4.xyz, r3, c3.x
					    rcp r0.z, r4.x
					    mul r5.x, r0.z, r3.x
					    rcp r0.z, r4.y
					    rcp r0.w, r4.z
					    mul r5.yz, r0.xzww, r3
					    cmp r3.xyz, -r0.y, r3, r5
					    add r1, r1, r3
					    add r3.xyz, r2, c3.x
					    rcp r0.z, r3.x
					    mul r4.x, r0.z, r2.x
					    rcp r0.z, r3.y
					    rcp r0.w, r3.z
					    mul r4.yz, r0.xzww, r2
					    cmp r2.xyz, -r0.y, r2, r4
					    add r1, r1, r2
					    mad r2, r0.x, c5, v0.xyxy
					    mad r3, r0.x, c4, v0.xyxy
					    texld r4, r2, s0
					    texld r2, r2.zwzw, s0
					    add r0.xzw, r4.xyyz, c3.x
					    rcp r0.x, r0.x
					    mul r5.x, r0.x, r4.x
					    rcp r0.x, r0.z
					    rcp r0.z, r0.w
					    mul r5.yz, r0.xxzw, r4
					    cmp r4.xyz, -r0.y, r4, r5
					    add r1, r1, r4
					    add r0.xzw, r2.xyyz, c3.x
					    rcp r0.x, r0.x
					    mul r4.x, r0.x, r2.x
					    rcp r0.x, r0.z
					    rcp r0.z, r0.w
					    mul r4.yz, r0.xxzw, r2
					    cmp r2.xyz, -r0.y, r2, r4
					    add r1, r1, r2
					    texld r2, r3, s0
					    texld r3, r3.zwzw, s0
					    add r0.xzw, r2.xyyz, c3.x
					    rcp r0.x, r0.x
					    mul r4.x, r0.x, r2.x
					    rcp r0.x, r0.z
					    rcp r0.z, r0.w
					    mul r4.yz, r0.xxzw, r2
					    cmp r2.xyz, -r0.y, r2, r4
					    add r1, r1, r2
					    add r0.xzw, r3.xyyz, c3.x
					    rcp r0.x, r0.x
					    mul r2.x, r0.x, r3.x
					    rcp r0.x, r0.z
					    rcp r0.z, r0.w
					    mul r2.yz, r0.xxzw, r3
					    cmp r3.xyz, -r0.y, r3, r2
					    add r1, r1, r3
					    mul r2, r1, c3.y
					    mad r0.xzw, r1.xyyz, -c3.y, c3.x
					    rcp r0.x, r0.x
					    mul r1.x, r0.x, r2.x
					    rcp r0.x, r0.z
					    rcp r0.z, r0.w
					    mul r1.yz, r0.xxzw, r2
					    cmp oC0.xyz, -r0.y, r2, r1
					    mov oC0.w, r2.w
					
					// approximately 125 instruction slots used (12 texture, 113 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_immediateConstantBuffer { { -0.326212, -0.405810, 0, 0},
					                              { -0.840144, -0.073580, 0, 0},
					                              { -0.695914, 0.457137, 0, 0},
					                              { -0.203345, 0.620716, 0, 0},
					                              { 0.962340, -0.194983, 0, 0},
					                              { 0.473434, -0.480026, 0, 0},
					                              { 0.519456, 0.767022, 0, 0},
					                              { 0.185461, -0.893124, 0, 0},
					                              { 0.507431, 0.064425, 0, 0},
					                              { 0.896420, 0.412458, 0, 0},
					                              { -0.321940, -0.932615, 0, 0},
					                              { -0.791559, -0.597710, 0, 0} }
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 4
					mul r0.x, cb0[4].x, cb0[23].y
					mov r1.xyzw, l(0,0,0,0)
					mov r0.y, l(0)
					loop 
					  ige r0.z, r0.y, l(12)
					  breakc_nz r0.z
					  mad r0.zw, icb[r0.y + 0].xxxy, r0.xxxx, v1.zzzw
					  sample r2.xyzw, r0.zwzz, t0.xyzw, s0
					  add r3.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r3.xyz, r2.xyzx, r3.xyzx
					  movc r2.xyz, cb0[27].xxxx, r3.xyzx, r2.xyzx
					  add r1.xyzw, r1.xyzw, r2.xyzw
					  iadd r0.y, r0.y, l(1)
					endloop 
					mul r0.xyzw, r1.xyzw, l(0.083333, 0.083333, 0.083333, 0.083333)
					mad r1.xyz, -r1.xyzx, l(0.083333, 0.083333, 0.083333, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
					div r1.xyz, r0.xyzx, r1.xyzx
					movc o0.xyz, cb0[27].xxxx, r1.xyzx, r0.xyzx
					mov o0.w, r0.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
	Fallback "Diffuse"
}