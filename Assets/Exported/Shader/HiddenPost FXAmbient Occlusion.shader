Shader "Hidden/Post FX/Ambient Occlusion" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 37307
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float4 _CameraDepthTexture_ST;
					//   float _Downsample;
					//   float _Intensity;
					//   float4 _ProjectionParams;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//   float4 unity_OrthoParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _SampleCount               i0       1
					//   unity_CameraProjection     c0       2
					//   _ProjectionParams          c2       1
					//   _ScreenParams              c3       1
					//   _ZBufferParams             c4       1
					//   unity_OrthoParams          c5       1
					//   _CameraDepthTexture_ST     c6       1
					//   _SampleCount               c7       1
					//   _Intensity                 c8       1
					//   _Radius                    c9       1
					//   _Downsample                c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c11, 3.55539989, 0, -1.77769995, 1
					    def c12, 100000000, 0.0671105608, 0.00583714992, 0
					    def c13, 0, 1, 12.9898005, 78.2330017
					    def c14, 0.00200000009, 9.99999975e-005, 0.600000024, 0
					    def c15, 6.28318548, -3.14159274, 0.159154937, 0.5
					    def c16, 2, -1, 1, -0.999989986
					    def c17, 52.9829178, 12.451169, 0.5, 43758.5469
					    def c18, 0.5, -0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v0, c6, c6.zwzw
					    texld r1, r0, s1
					    mad r1.xyz, r1, c11.xxyw, c11.zzww
					    dp3 r0.z, r1, r1
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mul r1.yz, r1.xxyw, r0.w
					    mad r1.w, r0.z, c16.x, c16.y
					    mul_pp r2.xyz, r1.yzww, c16.zzyw
					    texld r3, r0, s0
					    mov r0.w, c11.w
					    add r0.z, r0.w, -c5.w
					    mul r1.x, r3.x, c4.x
					    mad r2.w, c5.w, -r1.x, r0.w
					    mad r1.x, r0.z, r1.x, c4.y
					    rcp r1.x, r1.x
					    mul r3.x, r1.x, r2.w
					    cmp r3.yz, r0.xxyw, c11.y, c11.w
					    dp2add r3.y, r3.yzzw, r3.yzzw, c11.y
					    cmp r3.y, -r3.y, c11.y, c11.w
					    add r0.xy, -r0, c11.w
					    cmp r0.xy, r0, c11.y, c11.w
					    dp2add r0.x, r0, r0, c11.y
					    cmp r0.x, -r0.x, c11.y, c11.w
					    add r0.x, r0.x, r3.y
					    mad r0.y, r2.w, r1.x, c16.w
					    cmp r0.y, r0.y, c11.w, c11.y
					    add r0.x, r0.y, r0.x
					    mul r0.x, r0.x, c12.x
					    mad r3.z, r3.x, c2.z, r0.x
					    mad r0.xy, v1, c16.x, c16.y
					    mov r4.x, c0.z
					    mov r4.y, c1.z
					    add r0.xy, r0, -r4
					    rcp r5.x, c0.x
					    rcp r5.y, c1.y
					    mul r0.xy, r0, r5
					    add r1.x, -r3.z, c11.w
					    mad r1.x, c5.w, r1.x, r3.z
					    mul r3.xy, r0, r1.x
					    mul r0.xy, c10.x, v0
					    mul r0.xy, r0, c3
					    frc r4.zw, r0.xyxy
					    add r0.xy, r0, -r4.zwzw
					    dp2add r0.x, c12.yzzw, r0, c12.w
					    frc r0.x, r0.x
					    mul r0.x, r0.x, c17.x
					    frc r0.x, r0.x
					    rcp r0.y, c7.x
					    mov r4.zw, c11.y
					    rep i0
					      mad r1.x, r4.w, c17.y, c17.z
					      frc r1.x, r1.x
					      mad r1.x, r1.x, c15.x, c15.y
					      sincos r6.y, r1.x
					      mul r1.x, r6.y, c17.w
					      frc r1.x, r1.x
					      add r1.x, r0.x, r1.x
					      frc r1.x, r1.x
					      mad r6.z, r1.x, c16.x, c16.y
					      mad r5.zw, r4.w, c13.xyxy, c13.xyzx
					      dp2add r1.x, r5.zwzw, c13.ywzw, c13.x
					      mad r1.x, r1.x, c15.z, c15.w
					      frc r1.x, r1.x
					      mad r1.x, r1.x, c15.x, c15.y
					      sincos r7.y, r1.x
					      mul r1.x, r7.y, c17.w
					      frc r1.x, r1.x
					      add r1.x, r0.x, r1.x
					      add r1.x, r1.x, c17.z
					      frc r1.x, r1.x
					      mad r1.x, r1.x, c15.x, c15.y
					      sincos r7.xy, r1.x
					      mad r1.x, r6.z, -r6.z, c11.w
					      rsq r1.x, r1.x
					      rcp r1.x, r1.x
					      mul r6.xy, r1.x, r7
					      add r4.w, r4.w, c11.w
					      mul r1.x, r0.y, r4.w
					      rsq r1.x, r1.x
					      rcp r1.x, r1.x
					      mul r1.x, r1.x, c9.x
					      mul r6.xyz, r1.x, r6
					      dp3 r1.x, -r2, r6
					      cmp r1.x, r1.x, c11.w, c11.y
					      mul r7.xyz, r1.x, r6
					      mad r6.xyz, r7, -c16.x, r6
					      add r6.xyz, r3, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      add r1.x, -r6.z, c11.w
					      mad r1.x, c5.w, r1.x, r6.z
					      rcp r1.x, r1.x
					      mad r5.zw, r7.xyxy, r1.x, c11.w
					      mul r6.xy, r5.zwzw, c6
					      mov r6.z, c17.z
					      mad r6.xy, r6, r6.z, c6.zwzw
					      texld r7, r6, s0
					      mul r1.x, r7.x, c4.x
					      mad r2.w, c5.w, -r1.x, r0.w
					      mad r1.x, r0.z, r1.x, c4.y
					      rcp r1.x, r1.x
					      mul r3.w, r1.x, r2.w
					      cmp r6.zw, r6.xyxy, c11.y, c11.w
					      dp2add r6.z, r6.zwzw, r6.zwzw, c11.y
					      add r6.xy, -r6, c11.w
					      cmp r6.xy, r6, c11.y, c11.w
					      dp2add r6.x, r6, r6, c11.y
					      cmp r6.xz, -r6, c11.y, c11.w
					      add r6.x, r6.x, r6.z
					      mad r1.x, r2.w, r1.x, c16.w
					      cmp r1.x, r1.x, c11.w, c11.y
					      add r1.x, r1.x, r6.x
					      mul r1.x, r1.x, c12.x
					      mad r6.z, r3.w, c2.z, r1.x
					      add r5.zw, -r4.xyxy, r5
					      add r5.zw, r5, -c11.w
					      mul r5.zw, r5.xyxy, r5
					      add r1.x, -r6.z, c11.w
					      mad r1.x, c5.w, r1.x, r6.z
					      mul r6.xy, r1.x, r5.zwzw
					      add r6.xyz, -r3, r6
					      dp3 r1.x, r6, r2
					      mad r1.x, r3.z, -c14.x, r1.x
					      max r2.w, r1.x, c11.y
					      dp3 r1.x, r6, r6
					      add r1.x, r1.x, c14.y
					      rcp r1.x, r1.x
					      mad r4.z, r2.w, r1.x, r4.z
					    endrep
					    mul r0.x, r4.z, c9.x
					    mul r0.x, r0.x, c8.x
					    mul r0.x, r0.y, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c14.z
					    exp_pp oC0.x, r0.x
					    mad_pp oC0.yzw, r1, c18.xxxy, c18.x
					
					// approximately 167 instruction slots used (3 texture, 164 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_constantbuffer CB1[9], immediateIndexed
					dcl_constantbuffer CB2[9], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 9
					mad r0.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
					sample r1.xyzw, r0.xyxx, t0.xyzw, s1
					mad r1.xyz, r1.xyzx, l(3.555400, 3.555400, 0.000000, 0.000000), l(-1.777700, -1.777700, 1.000000, 0.000000)
					dp3 r0.z, r1.xyzx, r1.xyzx
					div r0.z, l(2.000000), r0.z
					mul r1.yz, r1.xxyx, r0.zzzz
					add r1.w, r0.z, l(-1.000000)
					mul r2.xyz, r1.yzwy, l(1.000000, 1.000000, -1.000000, 0.000000)
					sample r3.xyzw, r0.xyxx, t1.xyzw, s0
					add r0.z, -cb1[8].w, l(1.000000)
					mul r0.w, r3.x, cb1[7].x
					mad r1.x, -cb1[8].w, r0.w, l(1.000000)
					mad r0.w, r0.z, r0.w, cb1[7].y
					div r0.w, r1.x, r0.w
					lt r3.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
					or r1.x, r3.y, r3.x
					and r1.x, r1.x, l(1)
					lt r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
					or r0.x, r0.y, r0.x
					and r0.x, r0.x, l(1)
					iadd r0.x, r0.x, r1.x
					itof r0.x, r0.x
					ge r0.y, l(0.000010), r0.w
					and r0.y, r0.y, l(0x3f800000)
					add r0.x, r0.y, r0.x
					mul r0.x, r0.x, l(100000000.000000)
					mad r3.z, r0.w, cb1[5].z, r0.x
					mad r0.xy, v1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					add r0.xy, r0.xyxx, -cb2[8].xyxx
					mov r4.x, cb2[6].x
					mov r4.y, cb2[7].y
					div r0.xy, r0.xyxx, r4.xyxx
					add r0.w, -r3.z, l(1.000000)
					mad r0.w, cb1[8].w, r0.w, r3.z
					mul r3.xy, r0.wwww, r0.xyxx
					mul r0.xy, v1.xyxx, cb0[7].zzzz
					mul r0.xy, r0.xyxx, cb1[6].xyxx
					round_ni r0.xy, r0.xyxx
					dp2 r0.x, l(0.067111, 0.005837, 0.000000, 0.000000), r0.xyxx
					frc r0.x, r0.x
					mul r0.x, r0.x, l(52.982918)
					frc r0.x, r0.x
					itof r0.y, cb0[5].x
					mov r5.x, l(12.989800)
					mov r0.w, l(0)
					mov r1.x, l(0)
					loop 
					  ige r2.w, r1.x, cb0[5].x
					  breakc_nz r2.w
					  itof r2.w, r1.x
					  mul r2.w, r2.w, l(1.000100)
					  round_ni r5.y, r2.w
					  mul r2.w, r5.y, l(78.233002)
					  sincos r2.w, null, r2.w
					  mul r2.w, r2.w, l(43758.546875)
					  frc r2.w, r2.w
					  add r2.w, r0.x, r2.w
					  frc r2.w, r2.w
					  mad r6.z, r2.w, l(2.000000), l(-1.000000)
					  dp2 r2.w, r5.xyxx, l(1.000000, 78.233002, 0.000000, 0.000000)
					  sincos r2.w, null, r2.w
					  mul r2.w, r2.w, l(43758.546875)
					  frc r2.w, r2.w
					  add r2.w, r0.x, r2.w
					  mul r2.w, r2.w, l(6.283185)
					  sincos r7.x, r8.x, r2.w
					  mad r2.w, -r6.z, r6.z, l(1.000000)
					  sqrt r2.w, r2.w
					  mov r8.y, r7.x
					  mul r6.xy, r2.wwww, r8.xyxx
					  add r2.w, r5.y, l(1.000000)
					  div r2.w, r2.w, r0.y
					  sqrt r2.w, r2.w
					  mul r2.w, r2.w, cb0[7].y
					  mul r5.yzw, r2.wwww, r6.xxyz
					  dp3 r2.w, -r2.xyzx, r5.yzwy
					  ge r2.w, r2.w, l(0.000000)
					  movc r5.yzw, r2.wwww, -r5.yyzw, r5.yyzw
					  add r5.yzw, r3.xxyz, r5.yyzw
					  mul r4.zw, r5.zzzz, cb2[7].xxxy
					  mad r4.zw, cb2[6].xxxy, r5.yyyy, r4.zzzw
					  mad r4.zw, cb2[8].xxxy, r5.wwww, r4.zzzw
					  add r2.w, -r5.w, l(1.000000)
					  mad r2.w, cb1[8].w, r2.w, r5.w
					  div r4.zw, r4.zzzw, r2.wwww
					  add r4.zw, r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r5.yz, r4.zzwz, cb0[4].xxyx
					  mad r5.yz, r5.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000), cb0[4].zzwz
					  sample r6.xyzw, r5.yzyy, t1.xyzw, s0
					  mul r2.w, r6.x, cb1[7].x
					  mad r3.w, -cb1[8].w, r2.w, l(1.000000)
					  mad r2.w, r0.z, r2.w, cb1[7].y
					  div r2.w, r3.w, r2.w
					  lt r6.xy, r5.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r3.w, r6.y, r6.x
					  and r3.w, r3.w, l(1)
					  lt r5.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r5.yyzy
					  or r5.y, r5.z, r5.y
					  and r5.y, r5.y, l(1)
					  iadd r3.w, r3.w, r5.y
					  itof r3.w, r3.w
					  ge r5.y, l(0.000010), r2.w
					  and r5.y, r5.y, l(0x3f800000)
					  add r3.w, r3.w, r5.y
					  mul r3.w, r3.w, l(100000000.000000)
					  mad r6.z, r2.w, cb1[5].z, r3.w
					  add r4.zw, r4.zzzw, -cb2[8].xxxy
					  add r4.zw, r4.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)
					  div r4.zw, r4.zzzw, r4.xxxy
					  add r2.w, -r6.z, l(1.000000)
					  mad r2.w, cb1[8].w, r2.w, r6.z
					  mul r6.xy, r2.wwww, r4.zwzz
					  add r5.yzw, -r3.xxyz, r6.xxyz
					  dp3 r2.w, r5.yzwy, r2.xyzx
					  mad r2.w, -r3.z, l(0.002000), r2.w
					  max r2.w, r2.w, l(0.000000)
					  dp3 r3.w, r5.yzwy, r5.yzwy
					  add r3.w, r3.w, l(0.000100)
					  div r2.w, r2.w, r3.w
					  add r0.w, r0.w, r2.w
					  iadd r1.x, r1.x, l(1)
					endloop 
					mul r0.x, r0.w, cb0[7].y
					mul r0.x, r0.x, cb0[7].x
					div r0.x, r0.x, r0.y
					log r0.x, r0.x
					mul r0.x, r0.x, l(0.600000)
					exp o0.x, r0.x
					mad o0.yzw, r1.yyzw, l(0.000000, 0.500000, 0.500000, -0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 109700
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   float4 _CameraDepthTexture_ST;
					//   float _Downsample;
					//   float _Intensity;
					//   float4 _ProjectionParams;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   row_major float4x4 unity_CameraProjection;
					//   float4 unity_OrthoParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _SampleCount               i0       1
					//   unity_CameraProjection     c0       2
					//   _ProjectionParams          c2       1
					//   _ScreenParams              c3       1
					//   unity_OrthoParams          c4       1
					//   _CameraDepthTexture_ST     c5       1
					//   _SampleCount               c6       1
					//   _Intensity                 c7       1
					//   _Radius                    c8       1
					//   _Downsample                c9       1
					//   _CameraDepthNormalsTexture s0       1
					//
					
					    ps_3_0
					    def c10, 3.55539989, 0, -1.77769995, 1
					    def c11, 1, 0.00392156886, 0, -0.999989986
					    def c12, 2, -1, 1, 100000000
					    def c13, 1.52587891e-005, 0.0671105608, 0.00583714992, 0
					    def c14, 0, 1, 12.9898005, 78.2330017
					    def c15, 0.00200000009, 9.99999975e-005, 0.600000024, 0
					    def c16, 6.28318548, -3.14159274, 0.159154937, 0.5
					    def c17, 52.9829178, 12.451169, 0.5, 43758.5469
					    def c18, 0.5, -0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    mad r0.xy, v0, c5, c5.zwzw
					    texld r1, r0, s0
					    mad r2.xyz, r1, c10.xxyw, c10.zzww
					    dp3 r0.z, r2, r2
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mul r2.yz, r2.xxyw, r0.w
					    mad r2.w, r0.z, c12.x, c12.y
					    mul_pp r3.xyz, r2.yzww, c12.zzyw
					    dp2add r0.z, r1.zwzw, c11, c11.z
					    cmp r1.xy, r0, c10.y, c10.w
					    dp2add r0.w, r1, r1, c10.y
					    add r0.xy, -r0, c10.w
					    cmp r0.xy, r0, c10.y, c10.w
					    dp2add r0.x, r0, r0, c10.y
					    cmp r0.xw, -r0, c10.y, c10.w
					    add r0.x, r0.x, r0.w
					    dp2add r0.y, r1.zwzw, c11, c11.w
					    cmp r0.y, r0.y, c10.w, c10.y
					    add r0.x, r0.y, r0.x
					    mul r0.x, r0.x, c12.w
					    mad r0.x, r0.z, c2.z, r0.x
					    mov r1.x, c13.x
					    mad r0.z, c2.z, -r1.x, r0.x
					    mad r1.xy, v1, c12.x, c12.y
					    mov r4.x, c0.z
					    mov r4.y, c1.z
					    add r1.xy, r1, -r4
					    rcp r5.x, c0.x
					    rcp r5.y, c1.y
					    mul r1.xy, r1, r5
					    add r0.w, -r0.z, c10.w
					    mad r0.w, c4.w, r0.w, r0.z
					    mul r0.xy, r0.w, r1
					    mul r1.xy, c9.x, v0
					    mul r1.xy, r1, c3
					    frc r1.zw, r1.xyxy
					    add r1.xy, -r1.zwzw, r1
					    dp2add r0.w, c13.yzzw, r1, c13.w
					    frc r0.w, r0.w
					    mul r0.w, r0.w, c17.x
					    frc r0.w, r0.w
					    rcp r1.x, c6.x
					    mov r1.yz, c10.y
					    rep i0
					      mad r1.w, r1.z, c17.y, c17.z
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c16.x, c16.y
					      sincos r6.y, r1.w
					      mul r1.w, r6.y, c17.w
					      frc r1.w, r1.w
					      add r1.w, r0.w, r1.w
					      frc r1.w, r1.w
					      mad r6.z, r1.w, c12.x, c12.y
					      mad r4.zw, r1.z, c14.xyxy, c14.xyzx
					      dp2add r1.w, r4.zwzw, c14.ywzw, c14.x
					      mad r1.w, r1.w, c16.z, c16.w
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c16.x, c16.y
					      sincos r7.y, r1.w
					      mul r1.w, r7.y, c17.w
					      frc r1.w, r1.w
					      add r1.w, r0.w, r1.w
					      add r1.w, r1.w, c17.z
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c16.x, c16.y
					      sincos r7.xy, r1.w
					      mad r1.w, r6.z, -r6.z, c10.w
					      rsq r1.w, r1.w
					      rcp r1.w, r1.w
					      mul r6.xy, r1.w, r7
					      add r1.z, r1.z, c10.w
					      mul r1.w, r1.x, r1.z
					      rsq r1.w, r1.w
					      rcp r1.w, r1.w
					      mul r1.w, r1.w, c8.x
					      mul r6.xyz, r1.w, r6
					      dp3 r1.w, -r3, r6
					      cmp r1.w, r1.w, c10.w, c10.y
					      mul r7.xyz, r1.w, r6
					      mad r6.xyz, r7, -c12.x, r6
					      add r6.xyz, r0, r6
					      dp3 r7.x, c0, r6
					      dp3 r7.y, c1, r6
					      add r1.w, -r6.z, c10.w
					      mad r1.w, c4.w, r1.w, r6.z
					      rcp r1.w, r1.w
					      mad r4.zw, r7.xyxy, r1.w, c10.w
					      mul r5.zw, r4, c5.xyxy
					      mov r6.z, c17.z
					      mad r5.zw, r5, r6.z, c5
					      texld r6, r5.zwzw, s0
					      dp2add r1.w, r6.zwzw, c11, c11.z
					      cmp r6.xy, r5.zwzw, c10.y, c10.w
					      dp2add r2.x, r6, r6, c10.y
					      cmp r2.x, -r2.x, c10.y, c10.w
					      add r5.zw, -r5, c10.w
					      cmp r5.zw, r5, c10.y, c10.w
					      dp2add r3.w, r5.zwzw, r5.zwzw, c10.y
					      cmp r3.w, -r3.w, c10.y, c10.w
					      add r2.x, r2.x, r3.w
					      dp2add r3.w, r6.zwzw, c11, c11.w
					      cmp r3.w, r3.w, c10.w, c10.y
					      add r2.x, r2.x, r3.w
					      mul r2.x, r2.x, c12.w
					      mad r6.z, r1.w, c2.z, r2.x
					      add r4.zw, -r4.xyxy, r4
					      add r4.zw, r4, -c10.w
					      mul r4.zw, r5.xyxy, r4
					      add r1.w, -r6.z, c10.w
					      mad r1.w, c4.w, r1.w, r6.z
					      mul r6.xy, r1.w, r4.zwzw
					      add r6.xyz, -r0, r6
					      dp3 r1.w, r6, r3
					      mad r1.w, r0.z, -c15.x, r1.w
					      max r2.x, r1.w, c10.y
					      dp3 r1.w, r6, r6
					      add r1.w, r1.w, c15.y
					      rcp r1.w, r1.w
					      mad r1.y, r2.x, r1.w, r1.y
					    endrep
					    mul r0.x, r1.y, c8.x
					    mul r0.x, r0.x, c7.x
					    mul r0.x, r1.x, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c15.z
					    exp_pp oC0.x, r0.x
					    mad_pp oC0.yzw, r2, c18.xxxy, c18.x
					
					// approximately 162 instruction slots used (2 texture, 160 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_constantbuffer CB1[9], immediateIndexed
					dcl_constantbuffer CB2[9], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 8
					mad r0.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
					sample r1.xyzw, r0.xyxx, t0.xyzw, s0
					mad r2.xyz, r1.xyzx, l(3.555400, 3.555400, 0.000000, 0.000000), l(-1.777700, -1.777700, 1.000000, 0.000000)
					dp3 r0.z, r2.xyzx, r2.xyzx
					div r0.z, l(2.000000), r0.z
					mul r2.yz, r2.xxyx, r0.zzzz
					add r2.w, r0.z, l(-1.000000)
					mul r3.xyz, r2.yzwy, l(1.000000, 1.000000, -1.000000, 0.000000)
					dp2 r0.z, r1.zwzz, l(1.000000, 0.003922, 0.000000, 0.000000)
					lt r1.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
					or r0.w, r1.y, r1.x
					lt r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
					or r0.x, r0.y, r0.x
					and r0.xw, r0.xxxw, l(1, 0, 0, 1)
					iadd r0.x, r0.x, r0.w
					itof r0.x, r0.x
					ge r0.y, l(0.000010), r0.z
					and r0.y, r0.y, l(0x3f800000)
					add r0.x, r0.y, r0.x
					mul r0.x, r0.x, l(100000000.000000)
					mad r0.x, r0.z, cb1[5].z, r0.x
					mad r0.z, -cb1[5].z, l(0.000015), r0.x
					mad r1.xy, v1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					add r1.xy, r1.xyxx, -cb2[8].xyxx
					mov r4.x, cb2[6].x
					mov r4.y, cb2[7].y
					div r1.xy, r1.xyxx, r4.xyxx
					add r0.w, -r0.z, l(1.000000)
					mad r0.w, cb1[8].w, r0.w, r0.z
					mul r0.xy, r0.wwww, r1.xyxx
					mul r1.xy, v1.xyxx, cb0[7].zzzz
					mul r1.xy, r1.xyxx, cb1[6].xyxx
					round_ni r1.xy, r1.xyxx
					dp2 r0.w, l(0.067111, 0.005837, 0.000000, 0.000000), r1.xyxx
					frc r0.w, r0.w
					mul r0.w, r0.w, l(52.982918)
					frc r0.w, r0.w
					itof r1.x, cb0[5].x
					mov r5.x, l(12.989800)
					mov r1.yz, l(0,0,0,0)
					loop 
					  ige r1.w, r1.z, cb0[5].x
					  breakc_nz r1.w
					  itof r1.w, r1.z
					  mul r1.w, r1.w, l(1.000100)
					  round_ni r5.y, r1.w
					  mul r1.w, r5.y, l(78.233002)
					  sincos r1.w, null, r1.w
					  mul r1.w, r1.w, l(43758.546875)
					  frc r1.w, r1.w
					  add r1.w, r0.w, r1.w
					  frc r1.w, r1.w
					  mad r6.z, r1.w, l(2.000000), l(-1.000000)
					  dp2 r1.w, r5.xyxx, l(1.000000, 78.233002, 0.000000, 0.000000)
					  sincos r1.w, null, r1.w
					  mul r1.w, r1.w, l(43758.546875)
					  frc r1.w, r1.w
					  add r1.w, r0.w, r1.w
					  mul r1.w, r1.w, l(6.283185)
					  sincos r2.x, r7.x, r1.w
					  mad r1.w, -r6.z, r6.z, l(1.000000)
					  sqrt r1.w, r1.w
					  mov r7.y, r2.x
					  mul r6.xy, r1.wwww, r7.xyxx
					  add r1.w, r5.y, l(1.000000)
					  div r1.w, r1.w, r1.x
					  sqrt r1.w, r1.w
					  mul r1.w, r1.w, cb0[7].y
					  mul r5.yzw, r1.wwww, r6.xxyz
					  dp3 r1.w, -r3.xyzx, r5.yzwy
					  ge r1.w, r1.w, l(0.000000)
					  movc r5.yzw, r1.wwww, -r5.yyzw, r5.yyzw
					  add r5.yzw, r0.xxyz, r5.yyzw
					  mul r4.zw, r5.zzzz, cb2[7].xxxy
					  mad r4.zw, cb2[6].xxxy, r5.yyyy, r4.zzzw
					  mad r4.zw, cb2[8].xxxy, r5.wwww, r4.zzzw
					  add r1.w, -r5.w, l(1.000000)
					  mad r1.w, cb1[8].w, r1.w, r5.w
					  div r4.zw, r4.zzzw, r1.wwww
					  add r4.zw, r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r5.yz, r4.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)
					  mad r5.yz, r5.yyzy, cb0[4].xxyx, cb0[4].zzwz
					  sample r6.xyzw, r5.yzyy, t0.xyzw, s0
					  dp2 r1.w, r6.zwzz, l(1.000000, 0.003922, 0.000000, 0.000000)
					  lt r6.xy, r5.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.x, r6.y, r6.x
					  and r2.x, r2.x, l(1)
					  lt r5.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r5.yyzy
					  or r3.w, r5.z, r5.y
					  and r3.w, r3.w, l(1)
					  iadd r2.x, r2.x, r3.w
					  itof r2.x, r2.x
					  ge r3.w, l(0.000010), r1.w
					  and r3.w, r3.w, l(0x3f800000)
					  add r2.x, r2.x, r3.w
					  mul r2.x, r2.x, l(100000000.000000)
					  mad r6.z, r1.w, cb1[5].z, r2.x
					  add r4.zw, r4.zzzw, -cb2[8].xxxy
					  add r4.zw, r4.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)
					  div r4.zw, r4.zzzw, r4.xxxy
					  add r1.w, -r6.z, l(1.000000)
					  mad r1.w, cb1[8].w, r1.w, r6.z
					  mul r6.xy, r1.wwww, r4.zwzz
					  add r5.yzw, -r0.xxyz, r6.xxyz
					  dp3 r1.w, r5.yzwy, r3.xyzx
					  mad r1.w, -r0.z, l(0.002000), r1.w
					  max r1.w, r1.w, l(0.000000)
					  dp3 r2.x, r5.yzwy, r5.yzwy
					  add r2.x, r2.x, l(0.000100)
					  div r1.w, r1.w, r2.x
					  add r1.y, r1.w, r1.y
					  iadd r1.z, r1.z, l(1)
					endloop 
					mul r0.x, r1.y, cb0[7].y
					mul r0.x, r0.x, cb0[7].x
					div r0.x, r0.x, r1.x
					log r0.x, r0.x
					mul r0.x, r0.x, l(0.600000)
					exp o0.x, r0.x
					mad o0.yzw, r2.yyzw, l(0.000000, 0.500000, 0.500000, -0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 188563
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "FOG_OFF" }
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _CameraDepthTexture_ST;
					//   sampler2D _CameraGBufferTexture2;
					//   float _Downsample;
					//   float _Intensity;
					//   float4 _ProjectionParams;
					//   float _Radius;
					//   int _SampleCount;
					//   float4 _ScreenParams;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraProjection;
					//   float4 unity_OrthoParams;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _SampleCount           i0       1
					//   unity_WorldToCamera    c0       3
					//   unity_CameraProjection c3       2
					//   _ProjectionParams      c5       1
					//   _ScreenParams          c6       1
					//   _ZBufferParams         c7       1
					//   unity_OrthoParams      c8       1
					//   _CameraDepthTexture_ST c9       1
					//   _SampleCount           c10      1
					//   _Intensity             c11      1
					//   _Radius                c12      1
					//   _Downsample            c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//
					
					    ps_3_0
					    def c14, -0.999989986, 100000000, 52.9829178, 43758.5469
					    def c15, 0.0671105608, 0.00583714992, 0, 0.5
					    def c16, 0, 1, 12.9898005, 78.2330017
					    def c17, 12.451169, 0.5, 6.28318548, -3.14159274
					    def c18, 0.159154937, 0.5, 0.00200000009, 9.99999975e-005
					    def c19, -0, -1, 2, 1
					    def c20, 0.600000024, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mad r0.xy, v0, c9, c9.zwzw
					    texld r1, r0, s0
					    dp3 r0.z, r1, r1
					    cmp r0.z, -r0.z, c19.x, c19.y
					    mad r1.xyz, r1, c19.z, r0.z
					    dp3_pp r2.y, c0, r1
					    dp3_pp r2.z, c1, r1
					    dp3_pp r2.w, c2, r1
					    texld r1, r0, s1
					    mov r0.w, c19.w
					    add r0.z, r0.w, -c8.w
					    mul r1.x, r1.x, c7.x
					    mad r1.y, c8.w, -r1.x, r0.w
					    mad r1.x, r0.z, r1.x, c7.y
					    rcp r1.x, r1.x
					    mul r1.z, r1.x, r1.y
					    cmp r3.xy, r0, -c19.x, -c19.y
					    dp2add r1.w, r3, r3, -c19.x
					    cmp r1.w, -r1.w, -c19.x, -c19.y
					    add r0.xy, -r0, c19.w
					    cmp r0.xy, r0, -c19.x, -c19.y
					    dp2add r0.x, r0, r0, -c19.x
					    cmp r0.x, -r0.x, -c19.x, -c19.y
					    add r0.x, r0.x, r1.w
					    mad r0.y, r1.y, r1.x, c14.x
					    cmp r0.y, r0.y, -c19.y, -c19.x
					    add r0.x, r0.y, r0.x
					    mul r0.x, r0.x, c14.y
					    mad r1.z, r1.z, c5.z, r0.x
					    mad r0.xy, v1, c19.z, c19.y
					    mov r3.x, c3.z
					    mov r3.y, c4.z
					    add r0.xy, r0, -r3
					    rcp r4.x, c3.x
					    rcp r4.y, c4.y
					    mul r0.xy, r0, r4
					    add r1.w, -r1.z, c19.w
					    mad r1.w, c8.w, r1.w, r1.z
					    mul r1.xy, r0, r1.w
					    mul r0.xy, c13.x, v0
					    mul r0.xy, r0, c6
					    frc r3.zw, r0.xyxy
					    add r0.xy, r0, -r3.zwzw
					    dp2add r0.x, c15, r0, c15.z
					    frc r0.x, r0.x
					    mul r0.x, r0.x, c14.z
					    frc r0.x, r0.x
					    rcp r0.y, c10.x
					    mov r3.zw, -c19.x
					    rep i0
					      mad r1.w, r3.w, c17.x, c17.y
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c17.z, c17.w
					      sincos r5.y, r1.w
					      mul r1.w, r5.y, c14.w
					      frc r1.w, r1.w
					      add r1.w, r0.x, r1.w
					      frc r1.w, r1.w
					      mad r5.z, r1.w, c19.z, c19.y
					      mad r4.zw, r3.w, c16.xyxy, c16.xyzx
					      dp2add r1.w, r4.zwzw, c16.ywzw, c16.x
					      mad r1.w, r1.w, c18.x, c18.y
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c17.z, c17.w
					      sincos r6.y, r1.w
					      mul r1.w, r6.y, c14.w
					      frc r1.w, r1.w
					      add r1.w, r0.x, r1.w
					      add r1.w, r1.w, c15.w
					      frc r1.w, r1.w
					      mad r1.w, r1.w, c17.z, c17.w
					      sincos r6.xy, r1.w
					      mad r1.w, r5.z, -r5.z, c19.w
					      rsq r1.w, r1.w
					      rcp r1.w, r1.w
					      mul r5.xy, r1.w, r6
					      add r3.w, r3.w, c19.w
					      mul r1.w, r0.y, r3.w
					      rsq r1.w, r1.w
					      rcp r1.w, r1.w
					      mul r1.w, r1.w, c12.x
					      mul r5.xyz, r1.w, r5
					      dp3 r1.w, -r2.yzww, r5
					      cmp r1.w, r1.w, -c19.y, -c19.x
					      mul r6.xyz, r1.w, r5
					      mad r5.xyz, r6, -c19.z, r5
					      add r5.xyz, r1, r5
					      dp3 r6.x, c3, r5
					      dp3 r6.y, c4, r5
					      add r1.w, -r5.z, c19.w
					      mad r1.w, c8.w, r1.w, r5.z
					      rcp r1.w, r1.w
					      mad r4.zw, r6.xyxy, r1.w, c19.w
					      mul r5.xy, r4.zwzw, c9
					      mov r1.w, c15.w
					      mad r5.xy, r5, r1.w, c9.zwzw
					      texld r6, r5, s1
					      mul r1.w, r6.x, c7.x
					      mad r2.x, c8.w, -r1.w, r0.w
					      mad r1.w, r0.z, r1.w, c7.y
					      rcp r1.w, r1.w
					      mul r5.z, r1.w, r2.x
					      cmp r6.xy, r5, -c19.x, -c19.y
					      dp2add r5.w, r6, r6, -c19.x
					      add r5.xy, -r5, c19.w
					      cmp r5.xy, r5, -c19.x, -c19.y
					      dp2add r5.x, r5, r5, -c19.x
					      cmp r5.xw, -r5, -c19.x, -c19.y
					      add r5.x, r5.x, r5.w
					      mad r1.w, r2.x, r1.w, c14.x
					      cmp r1.w, r1.w, -c19.y, -c19.x
					      add r1.w, r1.w, r5.x
					      mul r1.w, r1.w, c14.y
					      mad r5.z, r5.z, c5.z, r1.w
					      add r4.zw, -r3.xyxy, r4
					      add r4.zw, r4, c19.y
					      mul r4.zw, r4.xyxy, r4
					      add r1.w, -r5.z, c19.w
					      mad r1.w, c8.w, r1.w, r5.z
					      mul r5.xy, r1.w, r4.zwzw
					      add r5.xyz, -r1, r5
					      dp3 r1.w, r5, r2.yzww
					      mad r1.w, r1.z, -c18.z, r1.w
					      max r2.x, r1.w, -c19.x
					      dp3 r1.w, r5, r5
					      add r1.w, r1.w, c18.w
					      rcp r1.w, r1.w
					      mad r3.z, r2.x, r1.w, r3.z
					    endrep
					    mul r0.x, r3.z, c12.x
					    mul r0.x, r0.x, c11.x
					    mul r0.x, r0.y, r0.x
					    log r0.x, r0.x
					    mul r0.x, r0.x, c20.x
					    exp_pp oC0.x, r0.x
					    mad_pp oC0.yzw, r2, c15.w, c15.w
					
					// approximately 166 instruction slots used (3 texture, 163 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_OFF" }
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_constantbuffer CB1[9], immediateIndexed
					dcl_constantbuffer CB2[17], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 8
					mad r0.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
					sample r1.xyzw, r0.xyxx, t0.xyzw, s0
					dp3 r0.z, r1.xyzx, r1.xyzx
					ne r0.z, r0.z, l(0.000000)
					movc r0.z, r0.z, l(-1.000000), l(-0.000000)
					mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.zzzz
					mul r2.xyz, r1.yyyy, cb2[15].xyzx
					mad r1.xyw, cb2[14].xyxz, r1.xxxx, r2.xyxz
					mad r1.xyz, cb2[16].xyzx, r1.zzzz, r1.xywx
					sample r2.xyzw, r0.xyxx, t1.xyzw, s1
					add r0.z, -cb1[8].w, l(1.000000)
					mul r0.w, r2.x, cb1[7].x
					mad r1.w, -cb1[8].w, r0.w, l(1.000000)
					mad r0.w, r0.z, r0.w, cb1[7].y
					div r0.w, r1.w, r0.w
					lt r2.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
					or r1.w, r2.y, r2.x
					and r1.w, r1.w, l(1)
					lt r0.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r0.xyxx
					or r0.x, r0.y, r0.x
					and r0.x, r0.x, l(1)
					iadd r0.x, r0.x, r1.w
					itof r0.x, r0.x
					ge r0.y, l(0.000010), r0.w
					and r0.y, r0.y, l(0x3f800000)
					add r0.x, r0.y, r0.x
					mul r0.x, r0.x, l(100000000.000000)
					mad r2.z, r0.w, cb1[5].z, r0.x
					mad r0.xy, v1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					add r0.xy, r0.xyxx, -cb2[8].xyxx
					mov r3.x, cb2[6].x
					mov r3.y, cb2[7].y
					div r0.xy, r0.xyxx, r3.xyxx
					add r0.w, -r2.z, l(1.000000)
					mad r0.w, cb1[8].w, r0.w, r2.z
					mul r2.xy, r0.wwww, r0.xyxx
					mul r0.xy, v1.xyxx, cb0[7].zzzz
					mul r0.xy, r0.xyxx, cb1[6].xyxx
					round_ni r0.xy, r0.xyxx
					dp2 r0.x, l(0.067111, 0.005837, 0.000000, 0.000000), r0.xyxx
					frc r0.x, r0.x
					mul r0.x, r0.x, l(52.982918)
					frc r0.x, r0.x
					itof r0.y, cb0[5].x
					mov r4.x, l(12.989800)
					mov r0.w, l(0)
					mov r1.w, l(0)
					loop 
					  ige r2.w, r1.w, cb0[5].x
					  breakc_nz r2.w
					  itof r2.w, r1.w
					  mul r2.w, r2.w, l(1.000100)
					  round_ni r4.y, r2.w
					  mul r2.w, r4.y, l(78.233002)
					  sincos r2.w, null, r2.w
					  mul r2.w, r2.w, l(43758.546875)
					  frc r2.w, r2.w
					  add r2.w, r0.x, r2.w
					  frc r2.w, r2.w
					  mad r5.z, r2.w, l(2.000000), l(-1.000000)
					  dp2 r2.w, r4.xyxx, l(1.000000, 78.233002, 0.000000, 0.000000)
					  sincos r2.w, null, r2.w
					  mul r2.w, r2.w, l(43758.546875)
					  frc r2.w, r2.w
					  add r2.w, r0.x, r2.w
					  mul r2.w, r2.w, l(6.283185)
					  sincos r6.x, r7.x, r2.w
					  mad r2.w, -r5.z, r5.z, l(1.000000)
					  sqrt r2.w, r2.w
					  mov r7.y, r6.x
					  mul r5.xy, r2.wwww, r7.xyxx
					  add r2.w, r4.y, l(1.000000)
					  div r2.w, r2.w, r0.y
					  sqrt r2.w, r2.w
					  mul r2.w, r2.w, cb0[7].y
					  mul r4.yzw, r2.wwww, r5.xxyz
					  dp3 r2.w, -r1.xyzx, r4.yzwy
					  ge r2.w, r2.w, l(0.000000)
					  movc r4.yzw, r2.wwww, -r4.yyzw, r4.yyzw
					  add r4.yzw, r2.xxyz, r4.yyzw
					  mul r3.zw, r4.zzzz, cb2[7].xxxy
					  mad r3.zw, cb2[6].xxxy, r4.yyyy, r3.zzzw
					  mad r3.zw, cb2[8].xxxy, r4.wwww, r3.zzzw
					  add r2.w, -r4.w, l(1.000000)
					  mad r2.w, cb1[8].w, r2.w, r4.w
					  div r3.zw, r3.zzzw, r2.wwww
					  add r3.zw, r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r4.yz, r3.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)
					  mad r4.yz, r4.yyzy, cb0[4].xxyx, cb0[4].zzwz
					  sample r5.xyzw, r4.yzyy, t1.xyzw, s1
					  mul r2.w, r5.x, cb1[7].x
					  mad r4.w, -cb1[8].w, r2.w, l(1.000000)
					  mad r2.w, r0.z, r2.w, cb1[7].y
					  div r2.w, r4.w, r2.w
					  lt r5.xy, r4.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r4.w, r5.y, r5.x
					  lt r4.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r4.yyzy
					  or r4.y, r4.z, r4.y
					  and r4.yw, r4.yyyw, l(0, 1, 0, 1)
					  iadd r4.y, r4.y, r4.w
					  itof r4.y, r4.y
					  ge r4.z, l(0.000010), r2.w
					  and r4.z, r4.z, l(0x3f800000)
					  add r4.y, r4.z, r4.y
					  mul r4.y, r4.y, l(100000000.000000)
					  mad r5.z, r2.w, cb1[5].z, r4.y
					  add r3.zw, r3.zzzw, -cb2[8].xxxy
					  add r3.zw, r3.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)
					  div r3.zw, r3.zzzw, r3.xxxy
					  add r2.w, -r5.z, l(1.000000)
					  mad r2.w, cb1[8].w, r2.w, r5.z
					  mul r5.xy, r2.wwww, r3.zwzz
					  add r4.yzw, -r2.xxyz, r5.xxyz
					  dp3 r2.w, r4.yzwy, r1.xyzx
					  mad r2.w, -r2.z, l(0.002000), r2.w
					  max r2.w, r2.w, l(0.000000)
					  dp3 r3.z, r4.yzwy, r4.yzwy
					  add r3.z, r3.z, l(0.000100)
					  div r2.w, r2.w, r3.z
					  add r0.w, r0.w, r2.w
					  iadd r1.w, r1.w, l(1)
					endloop 
					mul r0.x, r0.w, cb0[7].y
					mul r0.x, r0.x, cb0[7].x
					div r0.x, r0.x, r0.y
					log r0.x, r0.x
					mul r0.x, r0.x, l(0.600000)
					exp o0.x, r0.x
					mad o0.yzw, r1.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 225503
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _MainTex_TexelSize         c0       1
					//   _MainTex                   s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c1, 2.76923084, 1.38461542, 6.46153831, 3.23076916
					    def c2, 1, 0, 3.55539989, -1.77769995
					    def c3, 2, -1, 1, -0.800000012
					    def c4, 5.00000048, -2, 3, 0.31621623
					    def c5, 0.0702702701, 0.227027029, 0.5, -0.5
					    dcl_texcoord2 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s1
					    mad r0.xyz, r0, c2.zzyw, c2.wwxw
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad r1.w, r0.z, c3.x, c3.y
					    mul r1.yz, r0.xxyw, r0.w
					    mul_pp r0.xyz, r1.yzww, c3.zzyw
					    mad_pp oC0.yzw, r1, c5.xzzw, c5.z
					    mov r1.xy, c2
					    mul r1.xy, r1, c0.x
					    mad r2, r1.xyxy, -c1, v0.xyxy
					    mad r1, r1.xyxy, c1, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    mad_pp r3.yzw, r3, c3.x, c3.y
					    dp3 r0.w, r0, r3.yzww
					    add r0.w, r0.w, c3.w
					    mul_sat r0.w, r0.w, c4.x
					    mad r3.y, r0.w, c4.y, c4.z
					    mul r0.w, r0.w, r0.w
					    mul_pp r0.w, r0.w, r3.y
					    mul_pp r0.w, r0.w, c4.w
					    mul_pp r3.x, r0.w, r3.x
					    texld_pp r4, v0, s0
					    mad_pp r3.x, r4.x, c5.y, r3.x
					    texld_pp r4, r1, s0
					    texld_pp r1, r1.zwzw, s0
					    mad_pp r3.yzw, r4, c3.x, c3.y
					    dp3 r3.y, r0, r3.yzww
					    add r3.y, r3.y, c3.w
					    mul_sat r3.y, r3.y, c4.x
					    mad r3.z, r3.y, c4.y, c4.z
					    mul r3.y, r3.y, r3.y
					    mul_pp r3.y, r3.y, r3.z
					    mul_pp r3.z, r3.y, c4.w
					    mad_pp r0.w, r3.y, c4.w, r0.w
					    mad_pp r3.x, r4.x, r3.z, r3.x
					    mad_pp r2.yzw, r2, c3.x, c3.y
					    dp3 r2.y, r0, r2.yzww
					    add r2.y, r2.y, c3.w
					    mul_sat r2.y, r2.y, c4.x
					    mad r2.z, r2.y, c4.y, c4.z
					    mul r2.y, r2.y, r2.y
					    mul_pp r2.y, r2.y, r2.z
					    mul_pp r2.z, r2.y, c5.x
					    mad_pp r0.w, r2.y, c5.x, r0.w
					    mad_pp r2.x, r2.x, r2.z, r3.x
					    mad_pp r1.yzw, r1, c3.x, c3.y
					    dp3 r0.x, r0, r1.yzww
					    add r0.x, r0.x, c3.w
					    mul_sat r0.x, r0.x, c4.x
					    mad r0.y, r0.x, c4.y, c4.z
					    mul r0.x, r0.x, r0.x
					    mul_pp r0.x, r0.x, r0.y
					    mul_pp r0.y, r0.x, c5.x
					    mad_pp r0.x, r0.x, c5.x, r0.w
					    add_pp r0.x, r0.x, c5.y
					    rcp r0.x, r0.x
					    mad_pp r0.y, r1.x, r0.y, r2.x
					    mul_pp oC0.x, r0.x, r0.y
					
					// approximately 61 instruction slots used (6 texture, 55 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float       
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_temps 5
					sample r0.xyzw, v2.xyxx, t1.xyzw, s1
					mad r0.xyz, r0.xyzx, l(3.555400, 3.555400, 0.000000, 0.000000), l(-1.777700, -1.777700, 1.000000, 0.000000)
					dp3 r0.z, r0.xyzx, r0.xyzx
					div r0.z, l(2.000000), r0.z
					mul r1.yz, r0.xxyx, r0.zzzz
					add r1.w, r0.z, l(-1.000000)
					mul r0.xyz, r1.yzwy, l(1.000000, 1.000000, -1.000000, 0.000000)
					mad o0.yzw, r1.yyzw, l(0.000000, 0.500000, 0.500000, -0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					mov r1.x, cb0[2].x
					mov r1.y, l(0)
					mad r2.xyzw, -r1.xyxy, l(2.769231, 1.384615, 6.461538, 3.230769), v2.xyxy
					mad r1.xyzw, r1.xyxy, l(2.769231, 1.384615, 6.461538, 3.230769), v2.xyxy
					sample r3.xyzw, r2.xyxx, t0.xyzw, s0
					sample r2.xyzw, r2.zwzz, t0.xyzw, s0
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.w, r0.xyzx, r3.yzwy
					add r0.w, r0.w, l(-0.800000)
					mul_sat r0.w, r0.w, l(5.000000)
					mad r3.y, r0.w, l(-2.000000), l(3.000000)
					mul r0.w, r0.w, r0.w
					mul r0.w, r0.w, r3.y
					mul r0.w, r0.w, l(0.316216)
					mul r3.x, r0.w, r3.x
					sample r4.xyzw, v2.xyxx, t0.xyzw, s0
					mad r3.x, r4.x, l(0.227027), r3.x
					sample r4.xyzw, r1.xyxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					mad r3.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r3.y, r0.xyzx, r3.yzwy
					add r3.y, r3.y, l(-0.800000)
					mul_sat r3.y, r3.y, l(5.000000)
					mad r3.z, r3.y, l(-2.000000), l(3.000000)
					mul r3.y, r3.y, r3.y
					mul r3.y, r3.y, r3.z
					mul r3.z, r3.y, l(0.316216)
					mad r0.w, r3.y, l(0.316216), r0.w
					mad r3.x, r4.x, r3.z, r3.x
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r2.y, r0.xyzx, r2.yzwy
					add r2.y, r2.y, l(-0.800000)
					mul_sat r2.y, r2.y, l(5.000000)
					mad r2.z, r2.y, l(-2.000000), l(3.000000)
					mul r2.y, r2.y, r2.y
					mul r2.y, r2.y, r2.z
					mul r2.z, r2.y, l(0.070270)
					mad r0.w, r2.y, l(0.070270), r0.w
					mad r2.x, r2.x, r2.z, r3.x
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.x, r0.xyzx, r1.yzwy
					add r0.x, r0.x, l(-0.800000)
					mul_sat r0.x, r0.x, l(5.000000)
					mad r0.y, r0.x, l(-2.000000), l(3.000000)
					mul r0.x, r0.x, r0.x
					mul r0.x, r0.x, r0.y
					mul r0.y, r0.x, l(0.070270)
					mad r0.x, r0.x, l(0.070270), r0.w
					add r0.x, r0.x, l(0.227027)
					mad r0.y, r1.x, r0.y, r2.x
					div o0.x, r0.y, r0.x
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 265691
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraGBufferTexture2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_WorldToCamera;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   unity_WorldToCamera    c0       3
					//   _MainTex_TexelSize     c3       1
					//   _MainTex               s0       1
					//   _CameraGBufferTexture2 s1       1
					//
					
					    ps_3_0
					    def c4, 2.76923084, 1.38461542, 6.46153831, 3.23076916
					    def c5, -2, 3, 0.31621623, 0.0702702701
					    def c6, 2, -1, -0.800000012, 5.00000048
					    def c7, 0.227027029, 0.5, 0, 0
					    def c8, 1, 0, -0, -1
					    dcl_texcoord2 v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mov r1.xy, c8
					    mul r0.yz, r1.xxyw, c3.x
					    mad r1, r0.yzyz, -c4, v0.xyxy
					    mad r2, r0.yzyz, c4, v0.xyxy
					    texld_pp r3, r1, s0
					    texld_pp r1, r1.zwzw, s0
					    mad_pp r0.yzw, r3, c6.x, c6.y
					    texld r4, v0, s1
					    dp3 r3.y, r4, r4
					    cmp r3.y, -r3.y, c8.z, c8.w
					    mad r3.yzw, r4.xxyz, c6.x, r3.y
					    dp3_pp r4.y, c0, r3.yzww
					    dp3_pp r4.z, c1, r3.yzww
					    dp3_pp r4.w, c2, r3.yzww
					    dp3 r0.y, r4.yzww, r0.yzww
					    add r0.y, r0.y, c6.z
					    mul_sat r0.y, r0.y, c6.w
					    mad r0.z, r0.y, c5.x, c5.y
					    mul r0.y, r0.y, r0.y
					    mul_pp r0.y, r0.y, r0.z
					    mul_pp r0.y, r0.y, c5.z
					    mul_pp r0.z, r0.y, r3.x
					    mad_pp r0.x, r0.x, c7.x, r0.z
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    mad_pp r3.yzw, r3, c6.x, c6.y
					    dp3 r0.z, r4.yzww, r3.yzww
					    add r0.z, r0.z, c6.z
					    mul_sat r0.z, r0.z, c6.w
					    mad r0.w, r0.z, c5.x, c5.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.w, r0.z, c5.z
					    mad_pp r0.y, r0.z, c5.z, r0.y
					    mad_pp r0.x, r3.x, r0.w, r0.x
					    mad_pp r1.yzw, r1, c6.x, c6.y
					    dp3 r0.z, r4.yzww, r1.yzww
					    add r0.z, r0.z, c6.z
					    mul_sat r0.z, r0.z, c6.w
					    mad r0.w, r0.z, c5.x, c5.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.w, r0.z, c5.w
					    mad_pp r0.y, r0.z, c5.w, r0.y
					    mad_pp r0.x, r1.x, r0.w, r0.x
					    mad_pp r1.xyz, r2.yzww, c6.x, c6.y
					    dp3 r0.z, r4.yzww, r1
					    mad_pp oC0.yzw, r4, c7.y, c7.y
					    add r0.z, r0.z, c6.z
					    mul_sat r0.z, r0.z, c6.w
					    mad r0.w, r0.z, c5.x, c5.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r0.z, r0.z, r0.w
					    mul_pp r0.w, r0.z, c5.w
					    mad_pp r0.y, r0.z, c5.w, r0.y
					    add_pp r0.y, r0.y, c7.x
					    rcp r0.y, r0.y
					    mad_pp r0.x, r2.x, r0.w, r0.x
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 60 instruction slots used (6 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float       
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[17], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_temps 5
					sample r0.xyzw, v2.xyxx, t1.xyzw, s1
					dp3 r0.w, r0.xyzx, r0.xyzx
					ne r0.w, r0.w, l(0.000000)
					movc r0.w, r0.w, l(-1.000000), l(-0.000000)
					mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.wwww
					mul r1.xyz, r0.yyyy, cb1[15].xyzx
					mad r0.xyw, cb1[14].xyxz, r0.xxxx, r1.xyxz
					mad r0.xyz, cb1[16].xyzx, r0.zzzz, r0.xywx
					mov r1.x, cb0[2].x
					mov r1.y, l(0)
					mad r2.xyzw, -r1.xyxy, l(2.769231, 1.384615, 6.461538, 3.230769), v2.xyxy
					mad r1.xyzw, r1.xyxy, l(2.769231, 1.384615, 6.461538, 3.230769), v2.xyxy
					sample r3.xyzw, r2.xyxx, t0.xyzw, s0
					sample r2.xyzw, r2.zwzz, t0.xyzw, s0
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.w, r0.xyzx, r3.yzwy
					add r0.w, r0.w, l(-0.800000)
					mul_sat r0.w, r0.w, l(5.000000)
					mad r3.y, r0.w, l(-2.000000), l(3.000000)
					mul r0.w, r0.w, r0.w
					mul r0.w, r0.w, r3.y
					mul r0.w, r0.w, l(0.316216)
					mul r3.x, r0.w, r3.x
					sample r4.xyzw, v2.xyxx, t0.xyzw, s0
					mad r3.x, r4.x, l(0.227027), r3.x
					sample r4.xyzw, r1.xyxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					mad r3.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r3.y, r0.xyzx, r3.yzwy
					add r3.y, r3.y, l(-0.800000)
					mul_sat r3.y, r3.y, l(5.000000)
					mad r3.z, r3.y, l(-2.000000), l(3.000000)
					mul r3.y, r3.y, r3.y
					mul r3.y, r3.y, r3.z
					mul r3.z, r3.y, l(0.316216)
					mad r0.w, r3.y, l(0.316216), r0.w
					mad r3.x, r4.x, r3.z, r3.x
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r2.y, r0.xyzx, r2.yzwy
					add r2.y, r2.y, l(-0.800000)
					mul_sat r2.y, r2.y, l(5.000000)
					mad r2.z, r2.y, l(-2.000000), l(3.000000)
					mul r2.y, r2.y, r2.y
					mul r2.y, r2.y, r2.z
					mul r2.z, r2.y, l(0.070270)
					mad r0.w, r2.y, l(0.070270), r0.w
					mad r2.x, r2.x, r2.z, r3.x
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.y, r0.xyzx, r1.yzwy
					mad o0.yzw, r0.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					add r0.x, r1.y, l(-0.800000)
					mul_sat r0.x, r0.x, l(5.000000)
					mad r0.y, r0.x, l(-2.000000), l(3.000000)
					mul r0.x, r0.x, r0.x
					mul r0.x, r0.x, r0.y
					mul r0.y, r0.x, l(0.070270)
					mad r0.x, r0.x, l(0.070270), r0.w
					add r0.x, r0.x, l(0.227027)
					mad r0.y, r1.x, r0.y, r2.x
					div o0.x, r0.y, r0.x
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 371454
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Downsample;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Downsample        c1       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c2, 0, 2.76923084, 6.46153831, -0.800000012
					    def c3, 1.38461542, 3.23076916, 2, -1
					    def c4, 5.00000048, -2, 3, 0.31621623
					    def c5, 0.0702702701, 0.227027029, 0.5, 0
					    dcl_texcoord2 v0.xy
					    dcl_2d s0
					    rcp r0.x, c1.x
					    mul r0.x, r0.x, c0.y
					    mov r0.yz, c3.xxyw
					    mad r1, c2.xyxz, -r0.yxzx, v0.xyxy
					    mad r0, c2.xyxz, r0.yxzx, v0.xyxy
					    texld_pp r2, r1, s0
					    texld_pp r1, r1.zwzw, s0
					    mad_pp r2.yzw, r2, c3.z, c3.w
					    texld_pp r3, v0, s0
					    mad_pp r3.yzw, r3, c3.z, c3.w
					    dp3 r2.y, r3.yzww, r2.yzww
					    add r2.y, r2.y, c2.w
					    mul_sat r2.y, r2.y, c4.x
					    mad r2.z, r2.y, c4.y, c4.z
					    mul r2.y, r2.y, r2.y
					    mul_pp r2.y, r2.y, r2.z
					    mul_pp r2.y, r2.y, c4.w
					    mul_pp r2.x, r2.y, r2.x
					    mad_pp r2.x, r3.x, c5.y, r2.x
					    texld_pp r4, r0, s0
					    texld_pp r0, r0.zwzw, s0
					    mad_pp r4.yzw, r4, c3.z, c3.w
					    dp3 r2.z, r3.yzww, r4.yzww
					    add r2.z, r2.z, c2.w
					    mul_sat r2.z, r2.z, c4.x
					    mad r2.w, r2.z, c4.y, c4.z
					    mul r2.z, r2.z, r2.z
					    mul_pp r2.z, r2.z, r2.w
					    mul_pp r2.w, r2.z, c4.w
					    mad_pp r2.y, r2.z, c4.w, r2.y
					    mad_pp r2.x, r4.x, r2.w, r2.x
					    mad_pp r1.yzw, r1, c3.z, c3.w
					    dp3 r1.y, r3.yzww, r1.yzww
					    add r1.y, r1.y, c2.w
					    mul_sat r1.y, r1.y, c4.x
					    mad r1.z, r1.y, c4.y, c4.z
					    mul r1.y, r1.y, r1.y
					    mul_pp r1.y, r1.y, r1.z
					    mul_pp r1.z, r1.y, c5.x
					    mad_pp r1.y, r1.y, c5.x, r2.y
					    mad_pp r1.x, r1.x, r1.z, r2.x
					    mad_pp r0.yzw, r0, c3.z, c3.w
					    dp3 r0.y, r3.yzww, r0.yzww
					    mad_pp oC0.yzw, r3, c5.z, c5.z
					    add r0.y, r0.y, c2.w
					    mul_sat r0.y, r0.y, c4.x
					    mad r0.z, r0.y, c4.y, c4.z
					    mul r0.y, r0.y, r0.y
					    mul_pp r0.y, r0.y, r0.z
					    mul_pp r0.z, r0.y, c5.x
					    mad_pp r0.y, r0.y, c5.x, r1.y
					    add_pp r0.y, r0.y, c5.y
					    rcp r0.y, r0.y
					    mad_pp r0.x, r0.x, r0.z, r1.x
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 55 instruction slots used (5 texture, 50 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float       
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_temps 5
					div r0.x, cb0[2].y, cb0[7].z
					mov r0.yz, l(0,1.384615,3.230769,0)
					mad r1.xyzw, l(-0.000000, -2.769231, -0.000000, -6.461538), r0.yxzx, v2.xyxy
					mad r0.xyzw, l(0.000000, 2.769231, 0.000000, 6.461538), r0.yxzx, v2.xyxy
					sample r2.xyzw, r1.xyxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					sample r3.xyzw, v2.xyxx, t0.xyzw, s0
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r2.y, r3.yzwy, r2.yzwy
					add r2.y, r2.y, l(-0.800000)
					mul_sat r2.y, r2.y, l(5.000000)
					mad r2.z, r2.y, l(-2.000000), l(3.000000)
					mul r2.y, r2.y, r2.y
					mul r2.y, r2.y, r2.z
					mul r2.y, r2.y, l(0.316216)
					mul r2.x, r2.y, r2.x
					mad r2.x, r3.x, l(0.227027), r2.x
					sample r4.xyzw, r0.xyxx, t0.xyzw, s0
					sample r0.xyzw, r0.zwzz, t0.xyzw, s0
					mad r4.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r2.z, r3.yzwy, r4.yzwy
					add r2.z, r2.z, l(-0.800000)
					mul_sat r2.z, r2.z, l(5.000000)
					mad r2.w, r2.z, l(-2.000000), l(3.000000)
					mul r2.z, r2.z, r2.z
					mul r2.z, r2.z, r2.w
					mul r2.w, r2.z, l(0.316216)
					mad r2.y, r2.z, l(0.316216), r2.y
					mad r2.x, r4.x, r2.w, r2.x
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.y, r3.yzwy, r1.yzwy
					add r1.y, r1.y, l(-0.800000)
					mul_sat r1.y, r1.y, l(5.000000)
					mad r1.z, r1.y, l(-2.000000), l(3.000000)
					mul r1.y, r1.y, r1.y
					mul r1.y, r1.y, r1.z
					mul r1.z, r1.y, l(0.070270)
					mad r1.y, r1.y, l(0.070270), r2.y
					mad r1.x, r1.x, r1.z, r2.x
					mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.y, r3.yzwy, r0.yzwy
					mad o0.yzw, r3.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.500000, 0.500000)
					add r0.y, r0.y, l(-0.800000)
					mul_sat r0.y, r0.y, l(5.000000)
					mad r0.z, r0.y, l(-2.000000), l(3.000000)
					mul r0.y, r0.y, r0.y
					mul r0.y, r0.y, r0.z
					mul r0.z, r0.y, l(0.070270)
					mad r0.y, r0.y, l(0.070270), r1.y
					add r0.y, r0.y, l(0.227027)
					mad r0.x, r0.x, r0.z, r1.x
					div o0.x, r0.x, r0.y
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 447289
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Downsample;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Downsample        c1       1
					//   _MainTex           s0       1
					//   _OcclusionTexture  s1       1
					//
					
					    ps_3_0
					    def c2, 2, -1, -0.800000012, 5.00000048
					    def c3, -2, 3, 0, 0
					    dcl_texcoord2_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c1.x
					    mad r0.yz, c0.xxyw, -r0.x, v0.xxyw
					    texld_pp r1, r0.yzzw, s1
					    mad_pp r0.yzw, r1, c2.x, c2.y
					    texld_pp r2, v0, s1
					    mad_pp r1.yzw, r2, c2.x, c2.y
					    dp3 r0.y, r1.yzww, r0.yzww
					    add r0.y, r0.y, c2.z
					    mul_sat r0.y, r0.y, c2.w
					    mad r0.z, r0.y, c3.x, c3.y
					    mul r0.y, r0.y, r0.y
					    mul_pp r0.w, r0.y, r0.z
					    mad_pp r0.y, r0.z, r0.y, -c2.y
					    mad_pp r0.z, r1.x, r0.w, r2.x
					    mul r2.xy, r0.x, c0
					    mad r0.xw, c0.xyzy, r0.x, v0.xyzy
					    texld_pp r3, r0.xwzw, s1
					    mov r2.zw, -r2.xyyx
					    add r2, r2.xzwy, v0.xyxy
					    texld_pp r4, r2, s1
					    texld_pp r2, r2.zwzw, s1
					    mad_pp r4.yzw, r4, c2.x, c2.y
					    dp3 r0.x, r1.yzww, r4.yzww
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.w, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.w
					    mad_pp r0.x, r0.w, r0.x, r0.y
					    mad_pp r0.y, r4.x, r1.x, r0.z
					    mad_pp r2.yzw, r2, c2.x, c2.y
					    dp3 r0.z, r1.yzww, r2.yzww
					    add r0.z, r0.z, c2.z
					    mul_sat r0.z, r0.z, c2.w
					    mad r0.w, r0.z, c3.x, c3.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    mad_pp r0.y, r2.x, r1.x, r0.y
					    mad_pp r2.xyz, r3.yzww, c2.x, c2.y
					    dp3 r0.z, r1.yzww, r2
					    add r0.z, r0.z, c2.z
					    mul_sat r0.z, r0.z, c2.w
					    mad r0.w, r0.z, c3.x, c3.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    rcp r0.x, r0.x
					    mad_pp r0.y, r3.x, r1.x, r0.y
					    mad_pp r0.x, r0.y, -r0.x, -c2.y
					    texld_pp r1, v0, s0
					    mul_pp oC0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 53 instruction slots used (6 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float       
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_temps 5
					div r0.xy, cb0[2].xyxx, cb0[7].zzzz
					add r1.xy, -r0.xyxx, v2.xyxx
					sample r1.xyzw, r1.xyxx, t0.xyzw, s1
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					sample r2.xyzw, v2.xyxx, t0.xyzw, s1
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.y, r2.yzwy, r1.yzwy
					add r1.y, r1.y, l(-0.800000)
					mul_sat r1.y, r1.y, l(5.000000)
					mad r1.z, r1.y, l(-2.000000), l(3.000000)
					mul r1.y, r1.y, r1.y
					mul r1.y, r1.y, r1.z
					mad r1.x, r1.x, r1.y, r2.x
					mov r0.zw, -r0.yyyx
					add r3.xyzw, r0.xzwy, v2.xyxy
					add r0.xy, r0.xyxx, v2.xyxx
					sample r0.xyzw, r0.xyxx, t0.xyzw, s1
					sample r4.xyzw, r3.xyxx, t0.xyzw, s1
					sample r3.xyzw, r3.zwzz, t0.xyzw, s1
					mad r4.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r4.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r4.x, r2.x, r1.x
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r3.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r3.x, r2.x, r1.x
					mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.y, r2.yzwy, r0.yzwy
					add r0.y, r0.y, l(-0.800000)
					mul_sat r0.y, r0.y, l(5.000000)
					mad r0.z, r0.y, l(-2.000000), l(3.000000)
					mul r0.y, r0.y, r0.y
					mul r0.w, r0.y, r0.z
					mad r0.y, r0.z, r0.y, r1.y
					add r0.y, r0.y, l(1.000000)
					mad r0.x, r0.x, r0.w, r1.x
					div r0.x, r0.x, r0.y
					add r0.x, -r0.x, l(1.000000)
					sample r1.xyzw, v2.xyxx, t1.xyzw, s0
					mul o0.xyz, r0.xxxx, r1.xyzx
					mov o0.w, r1.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Blend Zero OneMinusSrcColor, Zero OneMinusSrcAlpha
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 461938
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					    vs_3_0
					    def c0, 1, -1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    mov r1, v0
					    mad r0.xy, v1, c0, c0.zxzw
					    mov o1.xy, r0
					    mov o2.xy, r0
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 6 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyzw
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_input v0.xyzw
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					mov o0.xyzw, v0.xyzw
					mad o1.xyzw, v1.xyxy, l(1.000000, -1.000000, 1.000000, -1.000000), l(0.000000, 1.000000, 0.000000, 1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Downsample;
					//   sampler2D _OcclusionTexture;
					//   float4 _ScreenParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenParams     c0       1
					//   _Downsample       c1       1
					//   _OcclusionTexture s0       1
					//
					
					    ps_3_0
					    def c2, -2, 3, 0, 0
					    def c3, -1, 2, -0.800000012, 5.00000048
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    mov r0.x, c3.x
					    add r0.xy, r0.x, c0.zwzw
					    rcp r0.z, c1.x
					    mad r1.xy, r0, -r0.z, v0
					    texld_pp r1, r1, s0
					    mad_pp r1.yzw, r1, c3.y, c3.x
					    texld_pp r2, v0, s0
					    mad_pp r2.yzw, r2, c3.y, c3.x
					    dp3 r0.w, r2.yzww, r1.yzww
					    add r0.w, r0.w, c3.z
					    mul_sat r0.w, r0.w, c3.w
					    mad r1.y, r0.w, c2.x, c2.y
					    mul r0.w, r0.w, r0.w
					    mul_pp r1.z, r0.w, r1.y
					    mad_pp r0.w, r1.y, r0.w, -c3.x
					    mad_pp r1.x, r1.x, r1.z, r2.x
					    mul r3.xy, r0.z, r0
					    mad r0.xy, r0, r0.z, v0
					    texld_pp r4, r0, s0
					    mov r3.zw, -r3.xyyx
					    add r3, r3.xzwy, v0.xyxy
					    texld_pp r5, r3, s0
					    texld_pp r3, r3.zwzw, s0
					    mad_pp r0.xyz, r5.yzww, c3.y, c3.x
					    dp3 r0.x, r2.yzww, r0
					    add r0.x, r0.x, c3.z
					    mul_sat r0.x, r0.x, c3.w
					    mad r0.y, r0.x, c2.x, c2.y
					    mul r0.x, r0.x, r0.x
					    mul_pp r0.z, r0.x, r0.y
					    mad_pp r0.x, r0.y, r0.x, r0.w
					    mad_pp r0.y, r5.x, r0.z, r1.x
					    mad_pp r1.xyz, r3.yzww, c3.y, c3.x
					    dp3 r0.z, r2.yzww, r1
					    add r0.z, r0.z, c3.z
					    mul_sat r0.z, r0.z, c3.w
					    mad r0.w, r0.z, c2.x, c2.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    mad_pp r0.y, r3.x, r1.x, r0.y
					    mad_pp r1.xyz, r4.yzww, c3.y, c3.x
					    dp3 r0.z, r2.yzww, r1
					    add r0.z, r0.z, c3.z
					    mul_sat r0.z, r0.z, c3.w
					    mad r0.w, r0.z, c2.x, c2.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    rcp r0.x, r0.x
					    mad_pp r0.y, r4.x, r1.x, r0.y
					    mul_pp r0.xyz, r0.x, r0.y
					    mov r0.w, c2.z
					    mov_pp oC0, r0.wwwz
					    mov_pp oC1, r0
					
					// approximately 55 instruction slots used (5 texture, 50 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 5
					add r0.xy, cb1[6].zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
					div r0.xy, r0.xyxx, cb0[7].zzzz
					add r1.xy, -r0.xyxx, v1.zwzz
					sample r1.xyzw, r1.xyxx, t0.xyzw, s0
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					sample r2.xyzw, v1.zwzz, t0.xyzw, s0
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.y, r2.yzwy, r1.yzwy
					add r1.y, r1.y, l(-0.800000)
					mul_sat r1.y, r1.y, l(5.000000)
					mad r1.z, r1.y, l(-2.000000), l(3.000000)
					mul r1.y, r1.y, r1.y
					mul r1.y, r1.y, r1.z
					mad r1.x, r1.x, r1.y, r2.x
					mov r0.zw, -r0.yyyx
					add r3.xyzw, r0.xzwy, v1.zwzw
					add r0.xy, r0.xyxx, v1.zwzz
					sample r0.xyzw, r0.xyxx, t0.xyzw, s0
					sample r4.xyzw, r3.xyxx, t0.xyzw, s0
					sample r3.xyzw, r3.zwzz, t0.xyzw, s0
					mad r4.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r4.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r4.x, r2.x, r1.x
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r3.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r3.x, r2.x, r1.x
					mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.y, r2.yzwy, r0.yzwy
					add r0.y, r0.y, l(-0.800000)
					mul_sat r0.y, r0.y, l(5.000000)
					mad r0.z, r0.y, l(-2.000000), l(3.000000)
					mul r0.y, r0.y, r0.y
					mul r0.w, r0.y, r0.z
					mad r0.y, r0.z, r0.y, r1.y
					add r0.y, r0.y, l(1.000000)
					mad r0.x, r0.x, r0.w, r1.x
					div r0.xyz, r0.xxxx, r0.yyyy
					mov r0.w, l(0)
					mov o0.xyzw, r0.wwwz
					mov o1.xyzw, r0.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 582320
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   _MainTex_TexelSize  c8       1
					//
					
					    vs_3_0
					    def c9, 0, 1, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    mad r0, v0.xyzx, c9.yyyx, c9.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mov r0.x, c9.x
					    slt r0.x, c8.y, r0.x
					    add r0.y, c9.y, -v1.y
					    lrp r1.y, r0.x, r0.y, v1.y
					    mov r1.x, v1.x
					    mov o2.xy, r1
					    mov o3.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[3], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_output o2.xy
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[2].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc r0.w, r0.x, r0.y, v1.y
					mov r0.xyz, v1.xyxx
					mov o1.xyzw, r0.xyzw
					mov o2.xy, r0.zwzz
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Downsample;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _Downsample        c1       1
					//   _MainTex           s0       1
					//   _OcclusionTexture  s1       1
					//
					
					    ps_3_0
					    def c2, 2, -1, -0.800000012, 5.00000048
					    def c3, -2, 3, 0, 0
					    dcl_texcoord2_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    rcp r0.x, c1.x
					    mad r0.yz, c0.xxyw, -r0.x, v0.xxyw
					    texld_pp r1, r0.yzzw, s1
					    mad_pp r0.yzw, r1, c2.x, c2.y
					    texld_pp r2, v0, s1
					    mad_pp r1.yzw, r2, c2.x, c2.y
					    dp3 r0.y, r1.yzww, r0.yzww
					    add r0.y, r0.y, c2.z
					    mul_sat r0.y, r0.y, c2.w
					    mad r0.z, r0.y, c3.x, c3.y
					    mul r0.y, r0.y, r0.y
					    mul_pp r0.w, r0.y, r0.z
					    mad_pp r0.y, r0.z, r0.y, -c2.y
					    mad_pp r0.z, r1.x, r0.w, r2.x
					    mul r2.xy, r0.x, c0
					    mad r0.xw, c0.xyzy, r0.x, v0.xyzy
					    texld_pp r3, r0.xwzw, s1
					    mov r2.zw, -r2.xyyx
					    add r2, r2.xzwy, v0.xyxy
					    texld_pp r4, r2, s1
					    texld_pp r2, r2.zwzw, s1
					    mad_pp r4.yzw, r4, c2.x, c2.y
					    dp3 r0.x, r1.yzww, r4.yzww
					    add r0.x, r0.x, c2.z
					    mul_sat r0.x, r0.x, c2.w
					    mad r0.w, r0.x, c3.x, c3.y
					    mul r0.x, r0.x, r0.x
					    mul_pp r1.x, r0.x, r0.w
					    mad_pp r0.x, r0.w, r0.x, r0.y
					    mad_pp r0.y, r4.x, r1.x, r0.z
					    mad_pp r2.yzw, r2, c2.x, c2.y
					    dp3 r0.z, r1.yzww, r2.yzww
					    add r0.z, r0.z, c2.z
					    mul_sat r0.z, r0.z, c2.w
					    mad r0.w, r0.z, c3.x, c3.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    mad_pp r0.y, r2.x, r1.x, r0.y
					    mad_pp r2.xyz, r3.yzww, c2.x, c2.y
					    dp3 r0.z, r1.yzww, r2
					    add r0.z, r0.z, c2.z
					    mul_sat r0.z, r0.z, c2.w
					    mad r0.w, r0.z, c3.x, c3.y
					    mul r0.z, r0.z, r0.z
					    mul_pp r1.x, r0.z, r0.w
					    mad_pp r0.x, r0.w, r0.z, r0.x
					    rcp r0.x, r0.x
					    mad_pp r0.y, r3.x, r1.x, r0.y
					    mad_pp oC0.xyz, r0.y, -r0.x, -c2.y
					    texld_pp r0, v0, s0
					    mov_pp oC0.w, r0.w
					
					// approximately 52 instruction slots used (6 texture, 46 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float       
					// TEXCOORD                 2   xy          2     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v2.xy
					dcl_output o0.xyzw
					dcl_temps 5
					div r0.xy, cb0[2].xyxx, cb0[7].zzzz
					add r1.xy, -r0.xyxx, v2.xyxx
					sample r1.xyzw, r1.xyxx, t0.xyzw, s1
					mad r1.yzw, r1.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					sample r2.xyzw, v2.xyxx, t0.xyzw, s1
					mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.y, r2.yzwy, r1.yzwy
					add r1.y, r1.y, l(-0.800000)
					mul_sat r1.y, r1.y, l(5.000000)
					mad r1.z, r1.y, l(-2.000000), l(3.000000)
					mul r1.y, r1.y, r1.y
					mul r1.y, r1.y, r1.z
					mad r1.x, r1.x, r1.y, r2.x
					mov r0.zw, -r0.yyyx
					add r3.xyzw, r0.xzwy, v2.xyxy
					add r0.xy, r0.xyxx, v2.xyxx
					sample r0.xyzw, r0.xyxx, t0.xyzw, s1
					sample r4.xyzw, r3.xyxx, t0.xyzw, s1
					sample r3.xyzw, r3.zwzz, t0.xyzw, s1
					mad r4.yzw, r4.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r4.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r4.x, r2.x, r1.x
					mad r3.yzw, r3.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r1.z, r2.yzwy, r3.yzwy
					add r1.z, r1.z, l(-0.800000)
					mul_sat r1.z, r1.z, l(5.000000)
					mad r1.w, r1.z, l(-2.000000), l(3.000000)
					mul r1.z, r1.z, r1.z
					mul r2.x, r1.z, r1.w
					mad r1.y, r1.w, r1.z, r1.y
					mad r1.x, r3.x, r2.x, r1.x
					mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3 r0.y, r2.yzwy, r0.yzwy
					add r0.y, r0.y, l(-0.800000)
					mul_sat r0.y, r0.y, l(5.000000)
					mad r0.z, r0.y, l(-2.000000), l(3.000000)
					mul r0.y, r0.y, r0.y
					mul r0.w, r0.y, r0.z
					mad r0.y, r0.z, r0.y, r1.y
					add r0.y, r0.y, l(1.000000)
					mad r0.x, r0.x, r0.w, r1.x
					div r0.x, r0.x, r0.y
					add o0.xyz, -r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
					sample r0.xyzw, v2.xyxx, t1.xyzw, s0
					mov o0.w, r0.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}